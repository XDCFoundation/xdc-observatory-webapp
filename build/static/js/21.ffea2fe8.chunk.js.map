{"version":3,"sources":["modules/contractMethods/read.js"],"names":["QuestionContainer","styled","div","props","isActive","QuestionNameContainer","QuestionName","ArrowImg","img","OutputContainer","MainTitle","Output","Devider","ParentContainer","InputTypeFunctionsContainer","InputName","ParamInput","input","SubmitButton","button","ErrorText","HighlightedText","HeaderContainer","HeaderItemsContainer","ContractRead","React","useState","readResponses","readFunctions","contractAddress","loading","error","isExpand","state","setState","useEffect","contractInfo","contractData","abi","JSON","parse","stringify","readFunction","filter","item","stateMutability","contractMethodTypes","view","map","response","params","getFunctionParams","address","replace","functionDetail","paramKeys","inputs","name","handleFunctionClick","index","haveInputs","a","hasParams","method","web3","Web3","process","contract","eth","Contract","methods","call","handleExpandAllClick","length","style","borderRadius","boxShadow","elevation","src","gap","alignItems","size","onClick","handleCollpaseClick","handleResetClick","FunctionContainer","key","InputTypeFunctions","itemIndex","handleSubmit","OutPutComponent","setParams","setError","idx","placeholder","type","value","onChange","event","includes","param","Number","handleParamsInput","target","requiredInpuIndex","Object","values","findIndex","String","request","element","keys","find","Boolean","checkNumberType","handleInputSubmit","disabled","number","outputs","it","join"],"mappings":"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","file":"static/js/21.ffea2fe8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { contractMethodTypes } from \"../../constants\";\r\nimport Web3 from \"web3\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { Row } from \"simple-flexbox\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst QuestionContainer = styled.div`\r\n  font-weight: 400;\r\n  color: #212529;\r\n  border: solid 1px #dfe2e8;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  border-radius: 4px;\r\n  height: ${(props) => (props.isActive ? \"auto\" : \"50px\")};\r\n  transition: height 0.5s ease-out;\r\n`;\r\nconst QuestionNameContainer = styled.div`\r\n  color: #343a40 !important;\r\n  height: 50px;\r\n  background-color: #f8f9fa !important;\r\n  display: flex;\r\n  flex-flow: row;\r\n  border-bottom: solid 1px #dfe2e8;\r\n  padding: 15px;\r\n  border-radius: 4px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst QuestionName = styled.div`\r\n  color: #3a3a3a;\r\n  font-family: Inter;\r\n  font-size: 15px;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst ArrowImg = styled.img`\r\n  transform: ${(props) => (props.isActive ? \"rotate(90deg)\" : \"\")};\r\n  transition: transform 0.5s ease-in-out;\r\n`;\r\n\r\nconst OutputContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 15px;\r\n  background-color: white;\r\n  padding: 15px;\r\n`;\r\n\r\nconst MainTitle = styled.div`\r\n  color: #343a40 !important;\r\n  font-weight: bold;\r\n  font-size: 15px;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst Output = styled.div`\r\n  word-wrap: break-word;\r\n  font-size: 15px;\r\n  color: #3a3a3a;\r\n  font-weight: 500;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst Devider = styled.div`\r\n  background-color: #dfe2e8;\r\n  height: 1px;\r\n`;\r\n\r\nconst ParentContainer = styled.div`\r\n  padding: 0 1.875rem 1.875rem 1.875rem;\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 15px;\r\n  @media (min-width: 0px) and (max-width: 1240px) {\r\n    padding: 0 15px 15px 15px;\r\n  }\r\n`;\r\n\r\nconst InputTypeFunctionsContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 15px;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst InputName = styled.div`\r\n  font-family: Inter;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  color: #3a3a3a;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst ParamInput = styled.input`\r\n  color: #343a40 !important;\r\n  font-size: 13px;\r\n  min-height: 35px;\r\n  min-width: 100px;\r\n  outline: none;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n\r\n  :active {\r\n    outline: none;\r\n  }\r\n  :hover {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  border-radius: 4px;\r\n  background-color: ${(props) => (props.isActive ? \"#e5eafa\" : \"#3763dd\")};\r\n  border: ${(props) => (props.isActive ? \"solid 1px #3763dd\" : \"\")};\r\n  width: 80px;\r\n  cursor: ${(props) => (props.isActive ? \"\" : \"pointer\")};\r\n  height: 30px;\r\n  font-size: 15px;\r\n  font-weight: 600;\r\n  width: 150px;\r\n  height: 45px;\r\n  color: white;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst ErrorText = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n`;\r\n\r\nconst HighlightedText = styled.div`\r\n  display: flex;\r\n  font-family: Inter;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  color: #2149b9;\r\n`;\r\n\r\nconst HeaderContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: row;\r\n  padding: 1.875rem;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    flex-flow: column;\r\n    padding: 15px;\r\n    gap: 15px;\r\n    align-items: flex-start;\r\n  }\r\n  @media (min-width: 767px) and (max-width: 1240px) {\r\n    padding: 15px;\r\n    gap: 15px;\r\n  }\r\n`;\r\n\r\nconst HeaderItemsContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nexport default function ContractRead(props) {\r\n  const [state, setState] = React.useState({\r\n    readResponses: [],\r\n    readFunctions: [],\r\n    contractAddress: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n    isExpand: false,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    let contractInfo = props.contractData ? props.contractData : {};\r\n    contractInfo.abi = JSON.parse(\r\n      contractInfo.abi ? contractInfo.abi : JSON.stringify([])\r\n    );\r\n    let readFunction = contractInfo.abi.filter(\r\n      (item) => item.stateMutability == contractMethodTypes.view\r\n    );\r\n    readFunction = readFunction.map((item) => {\r\n      return {\r\n        ...item,\r\n        isActive: false,\r\n        response: {},\r\n        loading: false,\r\n        error: \"\",\r\n        params: getFunctionParams(item),\r\n      };\r\n    });\r\n    setState({\r\n      ...state,\r\n      readFunctions: readFunction,\r\n      contractAddress: contractInfo.address\r\n        ? contractInfo.address.replace(\"xdc\", \"0x\")\r\n        : \"\",\r\n    });\r\n  }, [props.contractData]);\r\n\r\n  const getFunctionParams = (functionDetail) => {\r\n    let paramKeys = {};\r\n    functionDetail.inputs.map((item) => {\r\n      paramKeys[item.name] = \"\";\r\n    });\r\n    return paramKeys;\r\n  };\r\n\r\n  const handleFunctionClick = async (\r\n    index,\r\n    isActive,\r\n    haveInputs,\r\n    hasParams = false,\r\n    params,\r\n    loading = false\r\n  ) => {\r\n    let readFunctions = [...state.readFunctions];\r\n\r\n    if (isActive) {\r\n      readFunctions[index].isActive = false;\r\n      readFunctions[index].response = {};\r\n      setState({ ...state, readFunctions });\r\n      return;\r\n    }\r\n    try {\r\n      readFunctions[index].loading = true;\r\n      setState({ ...state, readFunctions, loading });\r\n      if (!haveInputs) {\r\n        const method = readFunctions[index].name;\r\n        let web3 = new Web3(process.env.REACT_APP_WEB3_URL);\r\n        const contract = new web3.eth.Contract(\r\n          readFunctions,\r\n          state.contractAddress\r\n        );\r\n        let response = hasParams\r\n          ? await contract.methods[method](...params).call()\r\n          : await contract.methods[method]().call();\r\n\r\n        readFunctions[index].response = { method, index, response };\r\n      }\r\n      readFunctions[index].isActive = true;\r\n      readFunctions[index].loading = false;\r\n      setState({ ...state, readFunctions });\r\n    } catch (error) {\r\n      readFunctions[index].loading = false;\r\n      readFunctions[index].error = \"Transaction failed\";\r\n      setState({\r\n        ...state,\r\n        readFunctions,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    let readFunctions = state.readFunctions.map((item) => {\r\n      return {\r\n        ...item,\r\n        // isActive: false,\r\n        response: {},\r\n        params: getFunctionParams(item),\r\n      };\r\n    });\r\n    setState({ ...state, readFunctions });\r\n  };\r\n\r\n  const handleExpandAllClick = async () => {\r\n    let readFunctions = [...state.readFunctions];\r\n    await setState({ ...state, loading: true });\r\n\r\n    for (let index = 0; index < state.readFunctions.length; index++) {\r\n      const item = state.readFunctions[index];\r\n      if (item.isActive) {\r\n        readFunctions[index] = item;\r\n        continue;\r\n      }\r\n      if (item.inputs.length) {\r\n        readFunctions[index].isActive = true;\r\n        readFunctions[index].response = {};\r\n        setState({ ...state, readFunctions, loading: true });\r\n      } else {\r\n        await handleFunctionClick(index, false, false, false, true);\r\n      }\r\n    }\r\n    setState({ ...state, readFunctions, loading: false, isExpand: true });\r\n  };\r\n\r\n  const handleCollpaseClick = () => {\r\n    const readFunctions = state.readFunctions.map((item) => {\r\n      return {\r\n        ...item,\r\n        isActive: false,\r\n        response: {},\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n    });\r\n    setState({ ...state, readFunctions, isExpand: false });\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        borderRadius: \"14px\",\r\n        boxShadow: \" 0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <HeaderContainer>\r\n        <HeaderItemsContainer>\r\n          <img src=\"/images/contract.svg\" />\r\n          <MainTitle>Read Contract Information</MainTitle>\r\n        </HeaderItemsContainer>\r\n        <Row style={{ gap: 20 }} alignItems=\"center\">\r\n          {state.loading ? (\r\n            <CircularProgress size={20} />\r\n          ) : !state.isExpand ? (\r\n            <HighlightedText onClick={() => handleExpandAllClick()}>\r\n              Expand all\r\n            </HighlightedText>\r\n          ) : (\r\n            <HighlightedText onClick={() => handleCollpaseClick()}>\r\n              Collapse all\r\n            </HighlightedText>\r\n          )}\r\n          <HeaderItemsContainer onClick={() => handleResetClick()}>\r\n            <HighlightedText>Reset</HighlightedText>\r\n            <img src=\"/images/reset.svg\" />\r\n          </HeaderItemsContainer>\r\n        </Row>\r\n      </HeaderContainer>\r\n      <ParentContainer>\r\n        {state.readFunctions && state.readFunctions.length\r\n          ? state.readFunctions.map((item, index) => {\r\n            return (\r\n              <FunctionContainer\r\n                item={item}\r\n                index={index}\r\n                setState={setState}\r\n                state={state}\r\n                handleFunctionClick={handleFunctionClick}\r\n              />\r\n            );\r\n          })\r\n          : \"\"}\r\n      </ParentContainer>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst FunctionContainer = ({\r\n  item,\r\n  index,\r\n  state,\r\n  handleFunctionClick,\r\n  setState,\r\n}) => {\r\n  return (\r\n    <QuestionContainer isActive={item.isActive} key={index}>\r\n      <QuestionNameContainer\r\n        onClick={() =>\r\n          handleFunctionClick(\r\n            index,\r\n            item.isActive,\r\n            item.inputs.length > 0,\r\n            false,\r\n            false,\r\n            false\r\n          )\r\n        }\r\n      >\r\n        <QuestionName>{`${index + 1}. ${item.name}`}</QuestionName>\r\n        <Row style={{ gap: 10 }} alignItems=\"center\">\r\n          {item.loading && item.inputs.length === 0 ? (\r\n            <CircularProgress size={10} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <ArrowImg isActive={item.isActive} src=\"/images/next.svg\" />\r\n        </Row>\r\n      </QuestionNameContainer>\r\n      {item.isActive ? (\r\n        <OutputContainer>\r\n          {item.inputs.length > 0 ? (\r\n            <InputTypeFunctions\r\n              itemIndex={index}\r\n              state={state}\r\n              setState={setState}\r\n              functionDetail={item}\r\n              handleSubmit={handleFunctionClick}\r\n            />\r\n          ) : (\r\n            <OutPutComponent item={item} />\r\n          )}\r\n        </OutputContainer>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </QuestionContainer>\r\n  );\r\n};\r\n\r\nconst InputTypeFunctions = ({\r\n  functionDetail,\r\n  handleSubmit,\r\n  itemIndex,\r\n  setState,\r\n  state,\r\n}) => {\r\n  const [params, setParams] = React.useState({});\r\n  const error = functionDetail.error ? functionDetail.error : \"\";\r\n\r\n  React.useEffect(() => {\r\n    setParams(functionDetail.params);\r\n  }, [functionDetail.params]);\r\n\r\n  const setError = (error, index) => {\r\n    let readFunctions = state.readFunctions;\r\n    readFunctions[index].error = error;\r\n    setState({ ...state, readFunctions });\r\n  };\r\n\r\n  const handleParamsInput = (value, name, type) => {\r\n    if (value.includes(\"xdc\")) {\r\n      value = value.replace(/^.{3}/g, \"0x\");\r\n    }\r\n    setError(\"\", itemIndex);\r\n    let param = params;\r\n    param[name] = type === \"uint256\" ? Number(value) : value;\r\n    setParams(param);\r\n  };\r\n\r\n  const handleInputSubmit = () => {\r\n    let requiredInpuIndex = Object.values(params).findIndex(\r\n      (item) => String(item).length == 0\r\n    );\r\n    if (requiredInpuIndex !== -1) {\r\n      setError(\r\n        `${Object.keys(params)[requiredInpuIndex]} is required field`,\r\n        itemIndex\r\n      );\r\n      return;\r\n    }\r\n    let request = { ...params };\r\n    for (let index = 0; index < Object.keys(params).length; index++) {\r\n      const element = Object.keys(params)[index];\r\n      let input = functionDetail.inputs.find((item) => item.name == element);\r\n      if (input.type == \"bool\") {\r\n        request[element] = Boolean(request[element]);\r\n      } else if (input.type.includes(\"uint\")) {\r\n        try {\r\n          checkNumberType(request[element]);\r\n          request[element] = request[element];\r\n        } catch (error) {\r\n          setError(\"Invalid value for type \" + input.type, itemIndex);\r\n          return;\r\n        }\r\n      } else if (input.type.includes(\"map\")) {\r\n        try {\r\n          request[element] = JSON.parse(request[element]);\r\n        } catch (error) { }\r\n      } else {\r\n        request[element] = request[element];\r\n      }\r\n    }\r\n    handleSubmit(itemIndex, false, false, true, Object.values(request));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {functionDetail.inputs.map((item, idx) => {\r\n        return (\r\n          <InputTypeFunctionsContainer key={idx}>\r\n            <InputName>{item.name}</InputName>\r\n            <ParamInput\r\n              placeholder={item.type}\r\n              value={params[item.name]}\r\n              onChange={(event) =>\r\n                handleParamsInput(event.target.value, item.name, item.type)\r\n              }\r\n            />\r\n          </InputTypeFunctionsContainer>\r\n        );\r\n      })}\r\n      <SubmitButton\r\n        onClick={() => handleInputSubmit()}\r\n        disabled={functionDetail.loading}\r\n        isActive={functionDetail.loading}\r\n      >\r\n        {functionDetail.loading ? <CircularProgress size={20} /> : \"Submit\"}\r\n      </SubmitButton>\r\n      {error ? <ErrorText>{error}</ErrorText> : \"\"}\r\n      {functionDetail?.response?.response ? (\r\n        <OutPutComponent item={functionDetail} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst checkNumberType = (number) => {\r\n  const isFloat = Number(number) === number && number % 1 !== 0;\r\n  if (isFloat) {\r\n    throw `Invalid input`;\r\n  }\r\n};\r\n\r\nconst OutPutComponent = ({ item }) => {\r\n  return (\r\n    <>\r\n      {/* <Title>Output:</Title> */}\r\n      <Output>{item?.response?.response}</Output>\r\n      <Devider />\r\n      <InputName>Return:</InputName>\r\n      <Output>{item.outputs.map((it) => it.type).join(\",\")}</Output>\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}