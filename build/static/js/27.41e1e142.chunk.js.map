{"version":3,"sources":["modules/token/tokenHistoryAnalytics/index.js","modules/token/holderAnalytics/tokenBalanceGraph/index.js","modules/token/holderAnalytics/tokenTransferAmountGraph/index.js","modules/token/holderAnalytics/tokenTransferCount/index.js","modules/token/holderAnalytics/analyticsComponent.js","modules/holders/holderTable.js","modules/holders/holderDetails.js","services/accounts.js","modules/common/commonGraph.js","services/contract.js","services/address.js"],"names":["ProgressBarContainer","styled","div","NoDataFoundContainer","WrappedComponent","props","tn","useParams","TokenPriceHistoryGraph","contractAddress","tokenName","theme","componentDidMount","splitRes","window","location","pathname","split","length","setState","getHistoricalTokenData","a","loading","tokenAddress","request","startTime","moment","subtract","valueOf","endTime","utility","parseResponse","accounts","getHistoryPrice","error","response","generateGraphData","graphData","data","__this","options","title","text","chart","type","zoomType","enabled","backgroundColor","legend","layout","align","symbolPadding","symbolWidth","symbolHeight","squareSymbol","useHTML","labelFormatter","this","name","state","navigator","scrollbar","rangeSelector","exporting","buttons","contextButton","tooltip","formatter","x","format","point","highestPrice","lowestPrice","closingPrice","series","map","obj","timestamp","y","color","credits","yAxis","opposite","xAxis","showInLegend","className","size","src","require","BaseComponent","TokenBalanceGraphComponent","count","buttonSpacing","buttonTheme","style","fill","stroke","fontWeight","fontSize","width","height","r","states","hover","select","inputBoxBorderColor","inputBoxWidth","inputBoxHeight","inputDateFormat","inputStyle","labelStyle","shared","date","Math","abs","Number","currentBalance","toFixed","labels","Highcharts","dateFormat","value","CircularProgress","receiveAmountSeries","sentAmountSeries","push","toAmount","fromAmount","addr","address","TokenTransferCountGraph","getTokenTransfer","userAddress","walletAddress","from","to","getTokenTransferCount","sort","itemA","itemB","totalTransferData","inBoundData","outBoundData","uniqueAddressSent","uniqueAddressReceived","index","totalTransfers","inBoundTransfer","outBoundTransfer","uniqueAddressesSent","uniqueAddressesReceived","AnalyticsTabButton","button","active","Buttonscontainer","TokenAnalytics","React","useState","setGraphData","setLoading","contractAdd","setContractAdd","useEffect","getTokenBalance","values","pageNum","perpage","Utils","TokenData","getHolderDetailsUsingAddressforToken","err","tns","Contract_address","Utility","AccountService","activeTab","setActiveTab","Paper","padding","borderRadius","boxShadow","display","flexFlow","gap","elevation","onClick","DeskTopView","MobileView","PaginationInLine","Pagination","RightPagination","LeftPagination","useStyles","makeStyles","container","borderBottom","background","HolderTableComponent","classes","shorten","b","amountL","stars","slice","repeat","setAddress","setBalance","totalRecord","setTotalRecord","keywords","setKeywords","setReportaddress","downloadaddress","setDownloadaddress","page","setPage","isDownloadActive","setDownloadActive","noData","setNoData","isLoading","sortKey","setSortKey","sortOrder","setSortOrder","rowsPerPage","setRowsPerPage","sortTable","_sortKey","_sortOrder","includes","requestObj","skip","limit","getHolderDetails","handleChangePage","action","pagecount","handleChangeRowsPerPage","event","target","reqObj","responseData","Total_transfes_transactions_Count","parseResponseData","parseFloat","console","Recdata","trxn","JSON","parse","Transfers","responseTransaction","total","d","Txn_Hash","hash","Age","Block","blockNumber","From","To","Value","id","_id","handleKeyUp","searchkeyword","handleChanged","checked","tempAddress","isChecked","filter","TxHash","Amount","tempAddr","marginRight","marginTop","placeholder","onKeyPress","e","key","onChange","filename","textAlign","pointerEvents","Grid","lg","TableContainer","Table","TableHead","TableRow","TableCell","border","alt","TableBody","colspan","row","currentTime","Date","previousTime","TimeAge","timeDiff","divideByDecimalValue","decimal","marginleft","href","Tooltip","placement","item","marginLeft","round","ceil","QRCode","CloseIcon","img","isDesktop","HoldersDetails","isAnalytics","URLSearchParams","search","get","toggleState","setToggleState","transactions","copiedText","setCopiedText","holder","setHolderDetail","setContractAddress","setDecimal","holderDetail","getContractDetails","urlPath","ContractData","getContractDetailsUsingAddress","contractDecimal","contractResponse","decimals","toggleTab","flexDirection","tableCell","paddingRight","onCopy","trigger","lockScroll","modal","close","alignItems","innerWidth","Holder_token_balance","class","aria-hidden","TabComponent","trans","getHeaders","httpConstants","CONTENT_TYPE","APPLICATION_JSON","process","httpService","METHOD_TYPE","GET","then","success","responseCode","Promise","resolve","reject","catch","symbol","url","API_END_POINT","GET_TOKEN_INFO","requestData","POST","path","GET_TOKEN_BALANCE","GET_ADDRESS_ANALYTICS","GET_TOKEN_TRANSFER_COUNT","GET_TOKEN_OVERVIEW","GET_HISTORY_PRICE","getTotalAccount","getSomeDaysAccount","getLatestAccount","getTokenOverview","getTokenInfo","getAccountList","getAddressAnalytics","Chart","setOptions","lang","rangeSelectorFrom","rangeSelectorTo","rangeSelectorZoom","highcharts","constructorType","getContractLists","getTotalContractList","getContractSearch","addrr","sortType","searchValue","txnType","status","getAddressDetail","getAddressDetailWithlimit","getFilteredAddressDetailWithLimit","getFiltersForAccountTransaction","getTransactionSearch","getTransactionsCountForAddress","getAddressStats"],"mappings":"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","file":"static/js/27.41e1e142.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Graph from \"../../common/commonGraph\";\r\nimport BaseComponent from \"../../baseComponent\";\r\nimport utility from \"../../../utility\";\r\nimport accounts from \"../../../services/accounts\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst ProgressBarContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-flow: row;\r\n  margin: 20px;\r\n`;\r\n\r\nconst NoDataFoundContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 100px;\r\n  gap: 10px;\r\n  @media (min-width: 767px) {\r\n    margin: 100px !important;\r\n  }\r\n`;\r\nexport default function WrappedComponent(props) {\r\n  const { tn } = useParams();\r\n  return (\r\n    <TokenPriceHistoryGraph\r\n      contractAddress={props.contractAddress}\r\n      tokenName={tn}\r\n      theme={props.theme}\r\n    />\r\n  );\r\n}\r\n\r\nclass TokenPriceHistoryGraph extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false,\r\n      tokenName: \"\",\r\n      graphData: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let splitRes = window.location.pathname.split(\"/\");\r\n    if (splitRes && splitRes.length) {\r\n      this.setState({ tokenName: splitRes[splitRes.length - 1] });\r\n    }\r\n    this.getHistoricalTokenData();\r\n  };\r\n\r\n  getHistoricalTokenData = async () => {\r\n    this.setState({ loading: true });\r\n    // const tokenAddress = window.location.pathname.split(\"/\")[2];\r\n    const tokenAddress = this.props.contractAddress;\r\n    let request = {\r\n      tokenAddress: tokenAddress,\r\n      startTime: moment().subtract(2, \"month\").valueOf(),\r\n      endTime: moment().valueOf(),\r\n    };\r\n    let [error, response] = await utility.parseResponse(\r\n      accounts.getHistoryPrice(request)\r\n    );\r\n    if (error || !response) {\r\n      this.setState({ loading: false });\r\n      this.generateGraphData([]);\r\n      return;\r\n    }\r\n    this.setState({ loading: false, graphData: response });\r\n    this.generateGraphData(response);\r\n  };\r\n\r\n  generateGraphData = (data) => {\r\n    // const data = [{\r\n    //     \"tokenAddress\": \"xdc536dd70445cea1e97f9bf1bada04cbda5199a2a1\",\r\n    //     \"closingTime\": 1641427199000,\r\n    //     \"openingTime\": 1641340800000,\r\n    //     \"highValueTime\": 1641391199000,\r\n    //     \"lowValueTime\": 1641405599000,\r\n    //     \"openingPrice\": 100,\r\n    //     \"highestPrice\": 120,\r\n    //     \"lowestPrice\": 90,\r\n    //     \"closingPrice\": 105,\r\n    //     \"volume\": 66994920902.7202,\r\n    //     \"marketCap\": 4530215218.84018,\r\n    //     \"timestamp\": 1641340800000\r\n    // },\r\n    //     {\r\n    //         \"tokenAddress\": \"xdc536dd70445cea1e97f9bf1bada04cbda5199a2a1\",\r\n    //         \"closingTime\": 1641427199000,\r\n    //         \"openingTime\": 1641340800000,\r\n    //         \"highValueTime\": 1641391199000,\r\n    //         \"lowValueTime\": 1641405599000,\r\n    //         \"openingPrice\": 100,\r\n    //         \"highestPrice\": 120,\r\n    //         \"lowestPrice\": 90,\r\n    //         \"closingPrice\": 120,\r\n    //         \"volume\": 66994920902.7202,\r\n    //         \"marketCap\": 4530215218.84018,\r\n    //         \"timestamp\": 1641487232000\r\n    //     },\r\n    //     {\r\n    //         \"tokenAddress\": \"xdc536dd70445cea1e97f9bf1bada04cbda5199a2a1\",\r\n    //         \"closingTime\": 1641427199000,\r\n    //         \"openingTime\": 1641340800000,\r\n    //         \"highValueTime\": 1641391199000,\r\n    //         \"lowValueTime\": 1641405599000,\r\n    //         \"openingPrice\": 100,\r\n    //         \"highestPrice\": 120,\r\n    //         \"lowestPrice\": 90,\r\n    //         \"closingPrice\": 150,\r\n    //         \"volume\": 66994920902.7202,\r\n    //         \"marketCap\": 4530215218.84018,\r\n    //         \"timestamp\": 1641573632000\r\n    //     }\r\n    // ]\r\n    const __this = this;\r\n    let options = {\r\n      title: {\r\n        text: \"\",\r\n      },\r\n      chart: {\r\n        type: \"line\",\r\n        zoomType: {\r\n          enabled: false,\r\n        },\r\n        backgroundColor: \"#ffffff\",\r\n      },\r\n      legend: {\r\n        layout: \"horizontal\",\r\n        align: \"center\",\r\n        enabled: true,\r\n        symbolPadding: 0,\r\n        symbolWidth: 0,\r\n        symbolHeight: 0,\r\n        squareSymbol: false,\r\n        backgroundColor: \"#FFFFFF\",\r\n        useHTML: true,\r\n        labelFormatter: function () {\r\n          let legend = \"<div style='display:flex; align-items: center;'>\";\r\n          if (this.name == __this.state.tokenName + \" Daily Price\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-circle-blue.svg' />\";\r\n          }\r\n\r\n          return (legend +=\r\n            \"<div style='margin:5px 5px 5px 0'>\" +\r\n            __this.state.tokenName +\r\n            \" Daily Price\" +\r\n            \"</div>\" +\r\n            \"</div>\");\r\n        },\r\n      },\r\n      navigator: {\r\n        enabled: false,\r\n      },\r\n      scrollbar: {\r\n        enabled: false,\r\n      },\r\n      rangeSelector: {\r\n        enabled: false,\r\n      },\r\n      exporting: {\r\n        buttons: {\r\n          contextButton: {\r\n            text: \"Export\",\r\n            enabled: true,\r\n          },\r\n        },\r\n        enabled: true,\r\n      },\r\n      tooltip: {\r\n        split: false,\r\n        formatter: function () {\r\n          let tooltip = moment(this.x).format(\"dddd, MMM D, YYYY\");\r\n          tooltip += '<br><h2 style=\"font-size:20px\">Daily Price</h2>';\r\n          tooltip +=\r\n            \"<br><h2>High - </h2>\" +\r\n            '<label style=\"font-weight: bold\">' +\r\n            this.point.highestPrice +\r\n            \" USD</label>\";\r\n          tooltip +=\r\n            \"<br><h2>Low - </h2>\" +\r\n            '<label style=\"font-weight: bold\">' +\r\n            this.point.lowestPrice +\r\n            \" USD</label>\";\r\n          tooltip +=\r\n            \"<br><h2>Close - </h2>\" +\r\n            '<label style=\"font-weight: bold\">' +\r\n            this.point.closingPrice +\r\n            \" USD</label>\";\r\n          return tooltip;\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          data: data.map((obj) => {\r\n            obj.x = obj.timestamp;\r\n            obj.y = obj.closingPrice;\r\n            return obj;\r\n          }),\r\n          color: \"rgb(124, 181, 236)\",\r\n          name: __this.state.tokenName + \" Daily Price\",\r\n        },\r\n      ],\r\n      credits: { enabled: false },\r\n      yAxis: [\r\n        {\r\n          opposite: false,\r\n          title: { text: __this.state.tokenName + \" Price(USD)\" },\r\n        },\r\n      ],\r\n      xAxis: [\r\n        {\r\n          showInLegend: false,\r\n          opposite: false,\r\n          title: { text: \"\" },\r\n        },\r\n      ],\r\n    };\r\n    this.setState({ options });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.theme === \"dark\" ? \"bg-192a59\" : \"\"}>\r\n        {this.state.loading ? (\r\n          <ProgressBarContainer>\r\n            <CircularProgress size={40} />\r\n          </ProgressBarContainer>\r\n        ) : (\r\n          <span>\r\n            {this.state.graphData.length == 0 ?\r\n              <NoDataFoundContainer>\r\n                <img\r\n                  src={require(\"../../../../src/assets/images/XDC-Alert.svg\")}\r\n                ></img>\r\n\r\n                <div className={this.props.theme === \"dark\" ? \"fc-b1c3e1\" : \"\"}>No Data found.</div>\r\n              </NoDataFoundContainer>\r\n              :\r\n              <Graph options={this.state.options} />\r\n            }\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Graph from \"../../../common/commonGraph\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Highcharts from \"highcharts/highstock\";\r\n\r\nconst NoDataFoundContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 100px;\r\n  gap: 10px;\r\n  @media (min-width: 767px) {\r\n    margin: 100px !important;\r\n  }\r\n`;\r\n\r\nfunction TokenBalanceGraphComponent(props) {\r\n  const graphData = props.graphData.map((data) => {\r\n    data.x = data.date;\r\n    data.y = Math.abs(Number(data.currentBalance.toFixed(2)));\r\n    return data;\r\n  });\r\n\r\n  const options = {\r\n    title: {\r\n      text: \"\",\r\n    },\r\n    legend: {\r\n      layout: \"horizontal\",\r\n      align: \"center\",\r\n      enabled: true,\r\n      symbolPadding: 0,\r\n      symbolWidth: 0,\r\n      symbolHeight: 0,\r\n      squareSymbol: false,\r\n      backgroundColor: \"#FFFFFF\",\r\n      useHTML: true,\r\n      labelFormatter: function () {\r\n        let legend = \"<div style='display:flex; align-items: center;'>\";\r\n        if (this.name == \"Token Balance\") {\r\n          legend +=\r\n            \"<img style='margin:5px' src='/images/graph-circle-blue.svg' />\";\r\n        }\r\n\r\n        return (legend +=\r\n          \"<div style='margin:5px 5px 5px 0'>\" +\r\n          this.name +\r\n          \"</div>\" +\r\n          \"</div>\");\r\n      },\r\n    },\r\n    navigator: {\r\n      enabled: false,\r\n    },\r\n    scrollbar: {\r\n      enabled: false,\r\n    },\r\n    rangeSelector: {\r\n      enabled: true,\r\n      buttons: [\r\n        {\r\n          type: \"all\",\r\n          text: \"All\",\r\n        },\r\n        {\r\n          type: \"year\",\r\n          count: 1,\r\n          text: \"1y\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 6,\r\n          text: \"6m\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 3,\r\n          text: \"3m\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n        },\r\n      ],\r\n      buttonSpacing: 10,\r\n\r\n      buttonTheme: {\r\n        style: {\r\n          fill: \"none\",\r\n        },\r\n        stroke: \"none\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 10,\r\n        width: null,\r\n        height: 25,\r\n        \"stroke-width\": 0,\r\n        r: 5,\r\n        states: {\r\n          hover: {\r\n            fill: \"#4878ff\",\r\n            style: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n          select: {\r\n            fill: \"#4878ff\",\r\n            style: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#e3e7eb\",\r\n      inputBoxWidth: 85,\r\n      inputBoxHeight: 25,\r\n      inputDateFormat: \"%d-%m-%Y\",\r\n      inputStyle: {\r\n        color: \"#2a2a2a\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#252525\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    tooltip: {\r\n      split: false,\r\n      shared: true,\r\n    },\r\n    series: [\r\n      {\r\n        showInLegend: true,\r\n        data: graphData,\r\n        name: \"Token Balance\",\r\n        type: \"line\",\r\n      },\r\n    ],\r\n    credits: { enabled: false },\r\n    yAxis: [\r\n      {\r\n        opposite: false,\r\n        title: { text: \"Token Balance\" },\r\n      },\r\n    ],\r\n    xAxis: [\r\n      {\r\n        showInLegend: false,\r\n        opposite: false,\r\n        title: { text: \"\" },\r\n        labels: {\r\n          formatter: function () {\r\n            return Highcharts.dateFormat(\"%d-%m-%Y\", this.value);\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className={props.theme === \"dark\" ? \"bg-192a59\" : \"\"}>\r\n      {props.loading ? (\r\n        <props.ProgressBarContainer>\r\n          <CircularProgress size={40} />\r\n        </props.ProgressBarContainer>\r\n      ) : (\r\n          <span>\r\n              {props.graphData.length == 0 ?\r\n                  <NoDataFoundContainer>\r\n                    <img\r\n                        src={require(\"../../../../../src/assets/images/XDC-Alert.svg\")}\r\n                    ></img>\r\n\r\n                    <div className={props.theme === \"dark\" ? \"fc-b1c3e1\" : \"\"}>No Data found.</div>\r\n                  </NoDataFoundContainer>\r\n                  :\r\n                  <Graph options={options}/>\r\n              }\r\n            </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenBalanceGraphComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Graph from \"../../../common/commonGraph\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Highcharts from \"highcharts/highstock\";\r\n\r\n\r\nconst NoDataFoundContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 100px;\r\n  gap: 10px;\r\n  @media (min-width: 767px) {\r\n    margin: 100px !important;\r\n  }\r\n`;\r\nfunction TokenBalanceGraphComponent(props) {\r\n  let receiveAmountSeries = [],\r\n    sentAmountSeries = [];\r\n  props.graphData.map((data) => {\r\n    sentAmountSeries.push({\r\n      x: data.date,\r\n      y: data.toAmount,\r\n    });\r\n    receiveAmountSeries.push({\r\n      x: data.date,\r\n      y: data.fromAmount,\r\n    });\r\n  });\r\n\r\n  const options = {\r\n    title: {\r\n      text: \"\",\r\n    },\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    legend: {\r\n      layout: \"horizontal\",\r\n      align: \"center\",\r\n      enabled: true,\r\n      symbolPadding: 0,\r\n      symbolWidth: 0,\r\n      symbolHeight: 0,\r\n      squareSymbol: false,\r\n      backgroundColor: \"#FFFFFF\",\r\n      useHTML: true,\r\n      labelFormatter: function () {\r\n        let legend = \"<div style='display:flex; align-items: center;'>\";\r\n        if (this.name == \"Sent (out)\") {\r\n          legend +=\r\n            \"<img style='margin:5px' src='/images/graph-triangle.svg' />\";\r\n        }\r\n        if (this.name == \"Receive (in)\") {\r\n          legend +=\r\n            \"<img style='margin:5px' src='/images/graph-triangle-red.svg' />\";\r\n        }\r\n\r\n        return (legend +=\r\n          \"<div style='margin:5px 5px 5px 0'>\" +\r\n          this.name +\r\n          \"</div>\" +\r\n          \"</div>\");\r\n      },\r\n    },\r\n    navigator: {\r\n      enabled: false,\r\n    },\r\n    scrollbar: {\r\n      enabled: false,\r\n    },\r\n    rangeSelector: {\r\n      enabled: true,\r\n      buttons: [\r\n        {\r\n          type: \"all\",\r\n          text: \"All\",\r\n        },\r\n        {\r\n          type: \"year\",\r\n          count: 1,\r\n          text: \"1y\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 6,\r\n          text: \"6m\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 3,\r\n          text: \"3m\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n        },\r\n      ],\r\n      buttonSpacing: 10,\r\n\r\n      buttonTheme: {\r\n        style: {\r\n          fill: \"none\",\r\n        },\r\n        stroke: \"none\",\r\n        fontWeight: \"bold\",\r\n        width: null,\r\n        height: 25,\r\n        \"stroke-width\": 0,\r\n        r: 5,\r\n        states: {\r\n          hover: {\r\n            fill: \"#4878ff\",\r\n            style: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n          select: {\r\n            fill: \"#4878ff\",\r\n            style: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#e3e7eb\",\r\n      inputBoxWidth: 85,\r\n      inputBoxHeight: 25,\r\n      inputDateFormat: \"%d-%m-%Y\",\r\n      inputStyle: {\r\n        color: \"#2a2a2a\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#252525\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    tooltip: {\r\n      split: false,\r\n      shared: true,\r\n    },\r\n    series: [\r\n      {\r\n        showInLegend: true,\r\n        data: sentAmountSeries,\r\n        name: \"Sent (out)\",\r\n      },\r\n      {\r\n        showInLegend: true,\r\n        data: receiveAmountSeries,\r\n        name: \"Receive (in)\",\r\n      },\r\n    ],\r\n    credits: { enabled: false },\r\n    yAxis: [\r\n      {\r\n        opposite: false,\r\n        title: { text: \"Transfer Amounts\" },\r\n      },\r\n    ],\r\n    xAxis: [\r\n      {\r\n        showInLegend: false,\r\n        opposite: false,\r\n        title: { text: \"\" },\r\n        labels: {\r\n          formatter: function () {\r\n            return Highcharts.dateFormat(\"%d-%m-%Y\", this.value);\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className={props.theme === \"dark\" ? \"bg-192a59\" : \"\"}>\r\n      {props.loading ? (\r\n        <props.ProgressBarContainer> \r\n          <CircularProgress size={40} />\r\n        </props.ProgressBarContainer>\r\n      ) : (\r\n          <span>\r\n              {props.graphData.length == 0 ?\r\n                  <NoDataFoundContainer>\r\n                    <img\r\n                        src={require(\"../../../../../src/assets/images/XDC-Alert.svg\")}\r\n                    ></img>\r\n\r\n                    <div className={props.theme === \"dark\" ? \"fc-b1c3e1\" : \"\"}>No Data found.</div>\r\n                  </NoDataFoundContainer>\r\n                  :\r\n                  <Graph options={options}/>\r\n              }\r\n            </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenBalanceGraphComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Graph from \"../../../common/commonGraph\";\r\nimport BaseComponent from \"../../../baseComponent\";\r\nimport TokenListComponent from \"../../../tokenList/tokenList\";\r\nimport utility from \"../../../../utility\";\r\nimport accounts from \"../../../../services/accounts\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Highcharts from \"highcharts/highstock\";\r\n\r\nconst ProgressBarContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-flow: row;\r\n  margin: 20px;\r\n`;\r\n\r\nconst NoDataFoundContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 100px;\r\n  gap: 10px;\r\n  @media (min-width: 767px) {\r\n    margin: 100px !important;\r\n  }\r\n`;\r\n\r\nexport default function WrappedComponent(props) {\r\n  const { addr } = useParams();\r\n  return (\r\n    <TokenTransferCountGraph\r\n      address={addr}\r\n      contractAddress={props.contractAddress}\r\n      theme={props.theme}\r\n    />\r\n  );\r\n}\r\n\r\nclass TokenTransferCountGraph extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      options: {\r\n        loading: false\r\n      },\r\n      graphData:[]\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.getTokenTransfer();\r\n  };\r\n\r\n  async getTokenTransfer() {\r\n    this.setState({ loading: true });\r\n    const userAddress = this.props.address;\r\n    const tokenAddress = this.props.contractAddress;\r\n    let request = {\r\n      walletAddress: userAddress,\r\n      tokenAddress: tokenAddress,\r\n      from: moment().subtract(2, \"month\").valueOf(),\r\n      to: moment().valueOf(),\r\n    };\r\n    let [error, response] = await utility.parseResponse(\r\n      accounts.getTokenTransferCount(request)\r\n    );\r\n    this.setState({ loading: false });\r\n    if (error || !response) {\r\n      this.generateGraphData([]);\r\n      return;\r\n    }\r\n    this.setState({graphData:response})\r\n    this.generateGraphData(response);\r\n  }\r\n\r\n  generateGraphData(data) {\r\n    data = data.sort((itemA, itemB) => {\r\n      return itemA.date - itemB.date;\r\n    });\r\n    const totalTransferData = [];\r\n    const inBoundData = [];\r\n    const outBoundData = [];\r\n    const uniqueAddressSent = [];\r\n    const uniqueAddressReceived = [];\r\n    for (let index = 0; index < data.length; index++) {\r\n      const x = data[index].date;\r\n      totalTransferData.push({ x, y: data[index].totalTransfers });\r\n      inBoundData.push({ x, y: data[index].inBoundTransfer });\r\n      outBoundData.push({ x, y: data[index].outBoundTransfer });\r\n      uniqueAddressSent.push({\r\n        x,\r\n        y: data[index].uniqueAddressesSent,\r\n      });\r\n      uniqueAddressReceived.push({\r\n        x,\r\n        y: data[index].uniqueAddressesReceived,\r\n      });\r\n    }\r\n    let options = {\r\n      title: {\r\n        text: \"\",\r\n      },\r\n      chart: {\r\n        type: \"line\",\r\n      },\r\n      legend: {\r\n        layout: \"horizontal\",\r\n        align: \"center\",\r\n        enabled: true,\r\n        symbolPadding: 0,\r\n        symbolWidth: 0,\r\n        symbolHeight: 0,\r\n        squareSymbol: false,\r\n        backgroundColor: \"#FFFFFF\",\r\n        useHTML: true,\r\n        labelFormatter: function () {\r\n          let legend = \"<div style='display:flex; align-items: center;'>\";\r\n          if (this.name == \"Outbound Transfers Counts\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-triangle.svg' />\";\r\n          }\r\n          if (this.name == \"Inbound Transfers Counts\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-triangle-red.svg' />\";\r\n          }\r\n          if (this.name == \"Total Transfers\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-circle-blue.svg' />\";\r\n          }\r\n          if (this.name == \"Unique Address Sent\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-triangle.svg' />\";\r\n          }\r\n          if (this.name == \"Unique Address Received\") {\r\n            legend +=\r\n              \"<img style='margin:5px' src='/images/graph-triangle-red.svg' />\";\r\n          }\r\n\r\n          return (legend +=\r\n            \"<div style='margin:5px 5px 5px 0'>\" +\r\n            this.name +\r\n            \"</div>\" +\r\n            \"</div>\");\r\n        },\r\n      },\r\n      navigator: {\r\n        enabled: false,\r\n      },\r\n      scrollbar: {\r\n        enabled: false,\r\n      },\r\n      rangeSelector: {\r\n        enabled: true,\r\n        buttons: [\r\n          {\r\n            type: \"all\",\r\n            text: \"All\",\r\n          },\r\n          {\r\n            type: \"year\",\r\n            count: 1,\r\n            text: \"1y\",\r\n          },\r\n          {\r\n            type: \"month\",\r\n            count: 6,\r\n            text: \"6m\",\r\n          },\r\n          {\r\n            type: \"month\",\r\n            count: 3,\r\n            text: \"3m\",\r\n          },\r\n          {\r\n            type: \"month\",\r\n            count: 1,\r\n            text: \"1m\",\r\n          },\r\n        ],\r\n        buttonSpacing: 10,\r\n\r\n        buttonTheme: {\r\n          style: {\r\n            fill: \"none\",\r\n          },\r\n          stroke: \"none\",\r\n          fontWeight: \"bold\",\r\n          width: null,\r\n          height: 25,\r\n          \"stroke-width\": 0,\r\n          r: 5,\r\n          states: {\r\n            hover: {\r\n              fill: \"#4878ff\",\r\n              style: {\r\n                color: \"white\",\r\n              },\r\n            },\r\n            select: {\r\n              fill: \"#4878ff\",\r\n              style: {\r\n                color: \"white\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        inputBoxBorderColor: \"#e3e7eb\",\r\n        inputBoxWidth: 85,\r\n        inputBoxHeight: 25,\r\n        inputDateFormat: \"%d-%m-%Y\",\r\n        inputStyle: {\r\n          color: \"#2a2a2a\",\r\n        },\r\n        labelStyle: {\r\n          color: \"#252525\",\r\n          fontWeight: \"bold\",\r\n          fontSize: 10,\r\n        },\r\n      },\r\n      tooltip: {\r\n        split: false,\r\n        shared: true,\r\n      },\r\n      series: [\r\n        {\r\n          data: totalTransferData,\r\n          type: \"column\",\r\n          color: \"rgb(124, 181, 236)\",\r\n          name: \"Total Transfers\",\r\n        },\r\n        {\r\n          data: outBoundData,\r\n          type: \"line\",\r\n          color: \"rgb(67, 67, 72)\",\r\n          name: \"Outbound Transfers Counts\",\r\n        },\r\n        {\r\n          data: inBoundData,\r\n          type: \"line\",\r\n          color: \"rgb(144, 237, 125)\",\r\n          name: \"Inbound Transfers Counts\",\r\n        },\r\n        {\r\n          data: uniqueAddressSent,\r\n          type: \"line\",\r\n          color: \"rgb(247, 163, 92)\",\r\n          name: \"Unique Address Sent\",\r\n        },\r\n        {\r\n          data: uniqueAddressReceived,\r\n          type: \"line\",\r\n          color: \"rgb(128, 133, 233)\",\r\n          name: \"Unique Address Received\",\r\n        },\r\n      ],\r\n      credits: { enabled: false },\r\n      yAxis: [\r\n        {\r\n          opposite: false,\r\n          title: { text: \"Transfer Counts\" },\r\n        },\r\n      ],\r\n      xAxis: [\r\n        {\r\n          showInLegend: false,\r\n          opposite: false,\r\n          title: { text: \"\" },\r\n          labels: {\r\n            formatter: function () {\r\n              return Highcharts.dateFormat(\"%d-%m-%Y\", this.value);\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    this.setState({ options });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.theme === \"dark\" ? \"bg-192a59\" : \"\"}>\r\n        {this.state.loading ? (\r\n          <ProgressBarContainer>\r\n            <CircularProgress size={40} />\r\n          </ProgressBarContainer>\r\n        ) : (\r\n            <span>\r\n              {this.state.graphData.length == 0 ?\r\n                  <NoDataFoundContainer>\r\n                    <img\r\n                        src={require(\"../../../../../src/assets/images/XDC-Alert.svg\")}\r\n                    ></img>\r\n\r\n                    <div className={this.props.theme === \"dark\" ? \"fc-b1c3e1\" : \"\"}>No Data found.</div>\r\n                  </NoDataFoundContainer>\r\n                  :\r\n                  <Graph options={this.state.options}/>\r\n              }\r\n            </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport TokenBalanceGraph from \"./tokenBalanceGraph\";\r\nimport TokenTransferAmount from \"./tokenTransferAmountGraph\";\r\nimport TokenTransferCount from \"./tokenTransferCount\";\r\nimport TokeHistoryAnalytics from \"../tokenHistoryAnalytics\";\r\nimport Utility from \"../../../utility\";\r\nimport AccountService from \"../../../services/accounts\";\r\nimport moment from \"moment\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport Utils from \"../../../utility\";\r\nimport TokenData from \"../../../services/token\";\r\n\r\nconst AnalyticsTabButton = styled.button`\r\n  border-radius: 5px;\r\n  border: 1px solid #d5dae2;\r\n  background: #fff;\r\n  color: #77838f;\r\n  font-weight: 600;\r\n  height: 35px;\r\n  ${({ active }) =>\r\n    active &&\r\n    `\r\n    background: #2149b9;\r\n    color: #fff;\r\n    border: none;\r\n  `}\r\n`;\r\n\r\nconst Buttonscontainer = styled.div`\r\n  padding: 15px 0 0 15px;\r\n  display: flex;\r\n  flex-flow: row;\r\n  gap: 15px;\r\n  @media (min-width: 0px) and (max-width: 767px) {\r\n    flex-flow: column;\r\n    align-items: flex-start;\r\n    padding: 0 0 0 15px;\r\n  }\r\n`;\r\n\r\nconst ProgressBarContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-flow: row;\r\n  margin: 20px;\r\n`;\r\n\r\nfunction TokenAnalytics(props) {\r\n  const [graphData, setGraphData] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [contractAdd, setContractAdd] = React.useState(\"\");\r\n\r\n  React.useEffect(async () => {\r\n    await getTokenBalance();\r\n  }, []);\r\n\r\n  const getTokenBalance = async () => {\r\n    let values = { addr: props.walletAddress, pageNum: 0, perpage: 1 };\r\n    let [err, tns] = await Utils.parseResponse(\r\n      TokenData.getHolderDetailsUsingAddressforToken(values)\r\n    );\r\n    if (err || !tns) return;\r\n    setContractAdd(tns[0]?.Contract_address);\r\n    setLoading(true);\r\n    let request = {\r\n      walletAddress: props.walletAddress,\r\n      tokenAddress: tns[0]?.Contract_address,\r\n      from: moment().subtract(3, \"month\").valueOf(),\r\n      to: moment().valueOf(),\r\n      type: \"\",\r\n    };\r\n    let [error, response] = await Utility.parseResponse(\r\n      AccountService.getTokenBalance(request)\r\n    );\r\n    setLoading(false);\r\n    if (error || !response) {\r\n      return [];\r\n    }\r\n    setGraphData(response.data);\r\n  };\r\n\r\n  let [activeTab, setActiveTab] = useState(\"tokenBalance\");\r\n\r\n  return (\r\n    <Paper\r\n      style={props.theme === \"dark\" ? {\r\n        padding: \"15px 10px 0 0\",\r\n        borderRadius: \"14px\",\r\n        boxShadow: \" 0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        gap: \"10px\",\r\n        backgroundColor: \"#192a59\"\r\n      } : {\r\n        padding: \"15px 10px 0 0\",\r\n        borderRadius: \"14px\",\r\n        boxShadow: \" 0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        gap: \"10px\",\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <Buttonscontainer>\r\n        <AnalyticsTabButton\r\n          active={activeTab === \"tokenBalance\" ? true : false}\r\n          onClick={() => setActiveTab(\"tokenBalance\")}\r\n        >\r\n          Token Balance\r\n        </AnalyticsTabButton>\r\n        <AnalyticsTabButton\r\n          active={activeTab === \"tokenTransferAmounts\" ? true : false}\r\n          onClick={() => setActiveTab(\"tokenTransferAmounts\")}\r\n        >\r\n          Token Transfer Amounts\r\n        </AnalyticsTabButton>\r\n        <AnalyticsTabButton\r\n          active={activeTab === \"tokenTransferCounts\" ? true : false}\r\n          onClick={() => setActiveTab(\"tokenTransferCounts\")}\r\n        >\r\n          Token Transfer Counts\r\n        </AnalyticsTabButton>\r\n        <AnalyticsTabButton\r\n          active={activeTab === \"historicalPrice\" ? true : false}\r\n          onClick={() => setActiveTab(\"historicalPrice\")}\r\n        >\r\n          Historical Price\r\n        </AnalyticsTabButton>\r\n      </Buttonscontainer>\r\n      {activeTab === \"tokenBalance\" && (\r\n        <TokenBalanceGraph\r\n          graphData={graphData}\r\n          loading={loading}\r\n          ProgressBarContainer={ProgressBarContainer}\r\n          theme={props.theme}\r\n        />\r\n      )}\r\n      {activeTab === \"tokenTransferAmounts\" && (\r\n        <TokenTransferAmount\r\n          graphData={graphData}\r\n          loading={loading}\r\n          ProgressBarContainer={ProgressBarContainer}\r\n          theme={props.theme}\r\n        />\r\n      )}\r\n      {activeTab === \"tokenTransferCounts\" && (\r\n        <TokenTransferCount\r\n          contractAddress={contractAdd}\r\n          loading={loading}\r\n          ProgressBarContainer={ProgressBarContainer}\r\n          theme={props.theme}\r\n        />\r\n      )}\r\n      {activeTab === \"historicalPrice\" && (\r\n        <TokeHistoryAnalytics contractAddress={contractAdd} loading={loading} theme={props.theme}/>\r\n      )}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TokenAnalytics;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../../../src/assets/styles/blocksAndTransactionList.css\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { Grid, TableContainer } from \"@material-ui/core\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport moment from \"moment\";\r\nimport Utility from \"../../utility\";\r\nimport AddressData from \"../../services/address\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nimport TokenData from \"../../services/token\";\r\nimport Loader from \"../../assets/loader\";\r\nimport format from \"format-number\";\r\n\r\nconst DeskTopView = styled.div`\r\n  @media (min-width: 0px) and (max-width: 1023px) {\r\n    display: none;\r\n  }\r\n\r\n  @media (min-width: 1024px) {\r\n    display: visible;\r\n  }\r\n`;\r\n\r\nconst MobileView = styled.div`\r\n  @media (min-width: 0px) and (max-width: 1023px) {\r\n    display: visible;\r\n  }\r\n\r\n  @media (min-width: 1024px) {\r\n    display: none;\r\n  }\r\n`;\r\nconst PaginationInLine = styled.div`\r\n  display: flex;\r\n  width: 75.125rem;\r\n  justify-content: space-between;\r\n`;\r\nconst Pagination = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n  /* width: 990px; */\r\n  margin: auto;\r\n\r\n  @media (max-width: 640px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  @media (min-width: 641px) and (max-width: 1023px) {\r\n    display: flex;\r\n  }\r\n`;\r\nconst RightPagination = styled.div`\r\n  display: flex;\r\n  margin-top: 20px;\r\n  flex-direction: row;\r\n  /* width: 100%; */\r\n`;\r\nconst LeftPagination = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-top: 20px;\r\n`;\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        borderRadius: \"14px\",\r\n        boxShadow: \"0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n        borderBottom: \"none\",\r\n        background: \"#fff\",\r\n    },\r\n});\r\nexport default function HolderTableComponent(props) {\r\n    const { state } = props;\r\n    const classes = useStyles();\r\n\r\n    function shorten(b, amountL = 10, amountR = 3, stars = 3) {\r\n        return `${b?.slice(0, amountL)}${\".\".repeat(stars)}${b?.slice(\r\n            b.length - 3,\r\n            b.length\r\n        )}`;\r\n    }\r\n\r\n    let { addr } = useParams();\r\n    const [address, setAddress] = useState([]);\r\n    const [txtAddress, setTxtAddress] = useState(\"\");\r\n    const [balance, setBalance] = useState(0);\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [totalRecord, setTotalRecord] = useState(0);\r\n    const [keywords, setKeywords] = useState(\"\");\r\n\r\n    const [reportaddress, setReportaddress] = useState([]);\r\n    const [downloadaddress, setDownloadaddress] = useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [isDownloadActive, setDownloadActive] = useState(0);\r\n    const [noData, setNoData] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [sortKey, setSortKey] = useState(\"\");\r\n    const [sortOrder, setSortOrder] = useState(\"\");\r\n    let showPerPage = 10;\r\n    let datas = {};\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(showPerPage);\r\n\r\n    const sortTable = (_sortKey) => {\r\n        let _sortOrder = -1;\r\n        if (sortKey.includes(_sortKey)) {\r\n            _sortOrder = sortOrder * -1;\r\n        } else {\r\n            setSortKey(_sortKey);\r\n        }\r\n        setSortOrder(_sortOrder);\r\n        let requestObj = {\r\n            skip: 0,\r\n            limit: rowsPerPage,\r\n            address: addr,\r\n            sortKey: { [_sortKey]: _sortOrder }\r\n        }\r\n        getHolderDetails(requestObj);\r\n    }\r\n\r\n    const handleChangePage = (action) => {\r\n        let requestObj = {\r\n            limit: rowsPerPage,\r\n            address: addr\r\n        }\r\n        if (keywords)\r\n            requestObj.keywords = keywords;\r\n        if (action == \"first\") {\r\n            requestObj.skip = 0;\r\n            setPage(0);\r\n        }\r\n        if (action === \"last\") {\r\n            let pagecount = totalRecord - rowsPerPage;\r\n            setPage(pagecount);\r\n            requestObj.skip = pagecount;\r\n        }\r\n\r\n        if (action === \"next\") {\r\n            if (rowsPerPage + page < totalRecord) {\r\n                let pagecount = rowsPerPage + page;\r\n                setPage(pagecount);\r\n                requestObj.skip = pagecount;\r\n            }\r\n        }\r\n\r\n        if (action === \"prev\") {\r\n            if (page - rowsPerPage >= 0) {\r\n                let pagecount = page - rowsPerPage;\r\n                setPage(pagecount);\r\n                requestObj.skip = pagecount;\r\n            }\r\n        }\r\n        getHolderDetails(requestObj);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(event.target.value);\r\n        setPage(0);\r\n        const reqObj = {\r\n            skip: 0,\r\n            limit: event.target.value,\r\n            address: addr,\r\n        };\r\n        getHolderDetails(reqObj);\r\n    };\r\n    const getHolderDetails = async (data) => {\r\n        try {\r\n            if (!data.sortKey && sortKey && sortOrder)\r\n                data.sortKey = { [sortKey]: sortOrder }\r\n            const [error, responseData] = await Utility.parseResponse(\r\n                TokenData.getHolderDetailsUsingAddressforToken(data)\r\n            );\r\n\r\n            if (responseData[0].Total_transfes_transactions_Count > 0) {\r\n                setLoading(false);\r\n                setNoData(false);\r\n                parseResponseData(responseData, 1);\r\n            } else {\r\n                setLoading(false);\r\n                setNoData(true);\r\n                setBalance(parseFloat(0).toFixed(2));\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        datas = {\r\n            skip: page,\r\n            limit: rowsPerPage,\r\n            address: addr,\r\n        };\r\n        getHolderDetails(datas);\r\n    }, []);\r\n\r\n    // const getTransactionSearch = async (data) => {\r\n    //     try {\r\n    //         const [error, responseData] = await Utility.parseResponse(\r\n    //             AddressData.getTransactionSearch(data)\r\n    //         );\r\n    //\r\n    //         if (responseData.responseTransaction.length > 0) {\r\n    //             setNoData(false);\r\n    //             parseResponseData(responseData, 2);\r\n    //         } else {\r\n    //             setNoData(true);\r\n    //             setBalance(parseFloat(0).toFixed(2));\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n    //     }\r\n    // };\r\n\r\n    const parseResponseData = async (Recdata, type) => {\r\n        let trxn = [];\r\n        if (type == 1) {\r\n            trxn = JSON.parse(Recdata[0].Transfers);\r\n            setTotalRecord(Recdata[0].Total_transfes_transactions_Count);\r\n        } else {\r\n            trxn = Recdata.responseTransaction;\r\n            setTotalRecord(Recdata.total);\r\n        }\r\n\r\n        setAddress(\r\n            trxn.map((d) => {\r\n                return {\r\n                    Txn_Hash: d.hash,\r\n                    Age: d.timestamp,\r\n                    Block: d.blockNumber,\r\n                    From: d.from,\r\n                    To: d.to,\r\n                    Value: d.value,\r\n                    id: d._id,\r\n                };\r\n            })\r\n        );\r\n\r\n        setReportaddress(\r\n            trxn.map((d) => {\r\n                return {\r\n                    Txn_Hash: d.hash,\r\n                    Age: d.timestamp,\r\n                    Block: d.blockNumber,\r\n                    From: d.from,\r\n                    To: d.to,\r\n                    Value: d.value / 1000000000000000000,\r\n                };\r\n            })\r\n        );\r\n        setDownloadaddress(\r\n            trxn.map((d) => {\r\n                return {\r\n                    Txn_Hash: d.hash,\r\n                    Age: moment(d.timestamp * 1000).format(\"DD/MM/YYYY hh:mm:ss\"),\r\n                    Block: d.blockNumber,\r\n                    From: d.from,\r\n                    To: d.to,\r\n                    Value: d.value / 1000000000000000000,\r\n                };\r\n            })\r\n        );\r\n    };\r\n    const handleKeyUp = (event) => {\r\n        let searchkeyword = event.target.value;\r\n        setSortKey(0)\r\n        setSortOrder(0)\r\n        setPage(0);\r\n        if (searchkeyword.length > 2) {\r\n            setKeywords(searchkeyword);\r\n            datas = {\r\n                skip: 0,\r\n                limit: rowsPerPage,\r\n                address: addr,\r\n                keywords: searchkeyword,\r\n            };\r\n            getHolderDetails(datas);\r\n        }\r\n        if (searchkeyword.length == 0) {\r\n            setPage(0);\r\n            datas = {\r\n                skip: 0,\r\n                limit: rowsPerPage,\r\n                address: addr,\r\n            };\r\n            getHolderDetails(datas);\r\n        }\r\n    };\r\n\r\n    const handleChanged = (event) => {\r\n        const { name, checked } = event.target;\r\n        if (name === \"allselect\") {\r\n            let tempAddress = address.map((addr) => {\r\n                return { ...addr, isChecked: checked };\r\n            });\r\n            setAddress(tempAddress);\r\n            let tempAddr = tempAddress.filter((addr) => {\r\n                if (addr.isChecked === true) {\r\n                    return addr;\r\n                }\r\n            });\r\n            if (tempAddr.length > 0) {\r\n                setDownloadActive(1);\r\n            } else {\r\n                setDownloadActive(0);\r\n            }\r\n\r\n            setDownloadaddress(\r\n                tempAddress.map((d) => {\r\n                    return {\r\n                        TxHash: d.Txn_Hash,\r\n                        Age: moment(d.Age * 1000).format(\"DD/MM/YYYY hh:mm:ss\"),\r\n                        Block: d.Block,\r\n                        From: d.From,\r\n                        To: d.To,\r\n                        Amount: d.Value,\r\n                    };\r\n                })\r\n            );\r\n        } else {\r\n            let tempAddress = address.map((addr) =>\r\n                addr.id === name ? { ...addr, isChecked: checked } : addr\r\n            );\r\n            setAddress(tempAddress);\r\n            let tempAddr = tempAddress.filter((addr) => {\r\n                if (addr.isChecked === true) {\r\n                    return addr;\r\n                }\r\n            });\r\n            if (tempAddr.length > 0) {\r\n                setDownloadActive(1);\r\n            } else {\r\n                setDownloadActive(0);\r\n            }\r\n            setDownloadaddress(\r\n                tempAddr.map((d) => {\r\n                    return {\r\n                        TxHash: d.Txn_Hash,\r\n                        Age: moment(d.Age * 1000).format(\"DD/MM/YYYY hh:mm:ss\"),\r\n                        Block: d.Block,\r\n                        From: d.From,\r\n                        To: d.To,\r\n                        Amount: d.Value,\r\n                    };\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content_input_all\">\r\n                <div className=\"searchelement-input3\">\r\n                    <img\r\n                        style={{ width: 18, height: 18, marginRight: 5, marginTop: 7 }}\r\n                        src={\"/images/Search.svg\"}\r\n                    />\r\n                    <input\r\n                        className=\"account-searchbar\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search Transaction\"\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                handleKeyUp(e);\r\n                            }\r\n                        }}\r\n                        onChange={(e) => {\r\n                            if (e.target.value == \"\") {\r\n                                handleKeyUp(e);\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                {isDownloadActive ? (\r\n                    <CSVLink\r\n                        filename={\"transactions.csv\"}\r\n                        data={downloadaddress}\r\n                        style={{\r\n                            fontSize: \"0.938rem\",\r\n                            color: \"#ffffff\",\r\n                            textAlign: \"center\",\r\n                            backgroundColor: \"rgb(7 125 245)\",\r\n                            borderRadius: \"4px\",\r\n                            width: \"5.875rem\",\r\n                            height: \"2.125rem\",\r\n                        }}\r\n                    >\r\n                        Export\r\n                    </CSVLink>\r\n                ) : (\r\n                    <CSVLink\r\n                        filename={\"transactions.csv\"}\r\n                        data={downloadaddress}\r\n                        style={{\r\n                            pointerEvents: \"none\",\r\n                            fontSize: \"15px\",\r\n                            textAlign: \"center\",\r\n                            color: \"#ffffff\",\r\n                            backgroundColor: \"#e3e7eb\",\r\n                            borderRadius: \"4px\",\r\n                            width: \"94px\",\r\n                            height: \"30px\",\r\n                        }}\r\n                    >\r\n                        Export\r\n                    </CSVLink>\r\n                )}\r\n            </div>\r\n\r\n            <Grid lg={13} className=\"tablegrid_address\">\r\n                <Paper style={{ borderRadius: \"14px\" }} elevation={0}>\r\n                    <TableContainer\r\n                        className={classes.container}\r\n                        id=\"container-table-holder\"\r\n                    >\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\">\r\n                                        <input\r\n                                            onChange={handleChanged}\r\n                                            type=\"checkbox\"\r\n                                            name=\"allselect\"\r\n                                            checked={\r\n                                                address.filter((addr) => addr?.isChecked == true)\r\n                                                    .length == address.length\r\n                                            }\r\n                                            style={{ marginRight: \"8px\" }}\r\n                                        />\r\n                                        <span onClick={() => sortTable(\"hash\")}>\r\n                                            <span className={\"tableheader\"} >Transaction Hash</span>\r\n                                            {sortKey && sortOrder && sortKey == \"hash\" ? (sortOrder === -1 ? <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon\"\r\n                                            /> :\r\n                                                <img\r\n                                                    alt=\"question-mark\"\r\n                                                    src=\"/images/see-more.svg\"\r\n                                                    height={\"14px\"}\r\n                                                    className=\"tooltipInfoIcon rotate-180\"\r\n                                                />) : \"\"}\r\n                                        </span>\r\n                                    </TableCell>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\">\r\n                                        <span className={\"tableheader mar-right-45 mar-right-40\"} onClick={() => sortTable(\"timestamp\")}>\r\n                                            Age\r\n                                            {sortKey && sortOrder && sortKey == \"timestamp\" ? (sortOrder === -1 ? <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon\"\r\n                                            /> :\r\n                                                <img\r\n                                                    alt=\"question-mark\"\r\n                                                    src=\"/images/see-more.svg\"\r\n                                                    height={\"14px\"}\r\n                                                    className=\"tooltipInfoIcon rotate-180\"\r\n                                                />) : \"\"}\r\n                                        </span>\r\n                                    </TableCell>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\" onClick={() => sortTable(\"blockNumber\")}>\r\n                                        <span className={\"tableheader\"}>Block</span>\r\n                                        {sortKey && sortOrder && sortKey == \"blockNumber\" ? (sortOrder === -1 ? <img\r\n                                            alt=\"question-mark\"\r\n                                            src=\"/images/see-more.svg\"\r\n                                            height={\"14px\"}\r\n                                            className=\"tooltipInfoIcon\"\r\n                                        /> :\r\n                                            <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon rotate-180\"\r\n                                            />) : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\" onClick={() => sortTable(\"from\")}>\r\n                                        <span className={\"tableheader\"}>From</span>\r\n                                        {sortKey && sortOrder && sortKey == \"from\" ? (sortOrder === -1 ? <img\r\n                                            alt=\"question-mark\"\r\n                                            src=\"/images/see-more.svg\"\r\n                                            height={\"14px\"}\r\n                                            className=\"tooltipInfoIcon\"\r\n                                        /> :\r\n                                            <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon rotate-180\"\r\n                                            />) : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\" onClick={() => sortTable(\"to\")}>\r\n                                        <span className={\"tableheader\"}>To</span>\r\n                                        {sortKey && sortOrder && sortKey == \"to\" ? (sortOrder === -1 ? <img\r\n                                            alt=\"question-mark\"\r\n                                            src=\"/images/see-more.svg\"\r\n                                            height={\"14px\"}\r\n                                            className=\"tooltipInfoIcon\"\r\n                                        /> :\r\n                                            <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon rotate-180\"\r\n                                            />) : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell style={{ border: \"none\" }} align=\"left\" onClick={() => sortTable(\"value\")}>\r\n                                        <span className={\"tableheader\"}>Amount</span>\r\n                                        {sortKey && sortOrder && sortKey == \"value\" ? (sortOrder === -1 ? <img\r\n                                            alt=\"question-mark\"\r\n                                            src=\"/images/see-more.svg\"\r\n                                            height={\"14px\"}\r\n                                            className=\"tooltipInfoIcon\"\r\n                                        /> :\r\n                                            <img\r\n                                                alt=\"question-mark\"\r\n                                                src=\"/images/see-more.svg\"\r\n                                                height={\"14px\"}\r\n                                                className=\"tooltipInfoIcon rotate-180\"\r\n                                            />) : \"\"}\r\n                                    </TableCell>\r\n                                    {/* <TableCell style={{ border: \"none\", paddingLeft: \"2.5%\" }} align=\"left\"><span className={\"tableheaders\"}>Txn Fee</span></TableCell> */}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            {isLoading == true ? (\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell style={{ border: \"none\" }} colspan=\"6\">\r\n                                            <div className=\"loader-address-details-list\">\r\n                                                <Loader />\r\n                                            </div>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            ) : (\r\n                                noData == false && (\r\n                                    <TableBody>\r\n                                        {address.map((row, index) => {\r\n                                            const currentTime = new Date();\r\n                                            const previousTime = new Date(row.Age * 1000);\r\n                                            const TimeAge = Utility.timeDiff(currentTime, previousTime);\r\n                                            const value = Utility.divideByDecimalValue(\r\n                                                row.Value,\r\n                                                Number(props?.decimal)\r\n                                            );\r\n\r\n                                            return (\r\n                                                <TableRow\r\n                                                    style={\r\n                                                        index % 2 !== 1\r\n                                                            ? { background: \"#f9f9f9\" }\r\n                                                            : { background: \"white\" }\r\n                                                    }\r\n                                                >\r\n                                                    <TableCell\r\n                                                        style={{ border: \"none\", width: \"22%\" }}\r\n                                                        marginleft=\"5px\"\r\n                                                    >\r\n                                                        <div className=\"dis-flex input_12\">\r\n                                                            {\" \"}\r\n                                                            <input\r\n                                                                key={row.id}\r\n                                                                name={row.id}\r\n                                                                onChange={handleChanged}\r\n                                                                type=\"checkbox\"\r\n                                                                checked={row?.isChecked || false}\r\n                                                                style={{ marginRight: \"8px\" }}\r\n                                                            />\r\n                                                            <a\r\n                                                                className=\"linkTable\"\r\n                                                                href={\"/transaction-details/\" + row.Txn_Hash}\r\n                                                            >\r\n                                                                <Tooltip placement=\"top\" title={row.Txn_Hash}>\r\n                                                                    <span className=\"tabledata\">\r\n                                                                        {shorten(row.Txn_Hash)}{\" \"}\r\n                                                                    </span>\r\n                                                                </Tooltip>\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    </TableCell>\r\n                                                    <TableCell\r\n                                                        style={{ border: \"none\", width: \"17%\" }}\r\n                                                        align=\"left\"\r\n                                                    >\r\n                                                        <span className=\"tabledata\">{TimeAge}</span>\r\n                                                    </TableCell>\r\n                                                    <TableCell\r\n                                                        style={{ border: \"none\", width: \"15%\" }}\r\n                                                        align=\"left\"\r\n                                                    >\r\n                                                        <a\r\n                                                            className=\"linkTable\"\r\n                                                            href={\"/block-details/\" + row.Block}\r\n                                                        >\r\n                                                            <span className=\"tabledata\">{row.Block}</span>\r\n                                                        </a>\r\n                                                    </TableCell>\r\n                                                    <TableCell style={{ border: \"none\" }} align=\"left\">\r\n                                                        {row.From != addr ? (\r\n                                                            <a\r\n                                                                className=\"linkTable\"\r\n                                                                href={\"/address-details/\" + row.From}\r\n                                                            >\r\n                                                                <Tooltip placement=\"top\" title={row.From}>\r\n                                                                    <span className=\"tabledata\">\r\n                                                                        {\" \"}\r\n                                                                        {shorten(row.From)}\r\n                                                                    </span>\r\n                                                                </Tooltip>\r\n                                                            </a>\r\n                                                        ) : (\r\n                                                            <Tooltip placement=\"top\" title={row.From}>\r\n                                                                <span className=\"tabledata\">\r\n                                                                    {\" \"}\r\n                                                                    {shorten(row.From)}\r\n                                                                </span>\r\n                                                            </Tooltip>\r\n                                                        )}\r\n                                                    </TableCell>\r\n                                                    <TableCell style={{ border: \"none\" }} align=\"left\">\r\n                                                        {row.To != addr ? (\r\n                                                            <a\r\n                                                                className=\"linkTable\"\r\n                                                                href={\"/address-details/\" + row.To}\r\n                                                            >\r\n                                                                <Tooltip placement=\"top\" title={row.To}>\r\n                                                                    <span className=\"tabledata\">\r\n                                                                        {shorten(row.To)}\r\n                                                                    </span>\r\n                                                                </Tooltip>\r\n                                                            </a>\r\n                                                        ) : (\r\n                                                            <Tooltip placement=\"top\" title={row.To}>\r\n                                                                <span className=\"tabledata\">\r\n                                                                    {shorten(row.To)}\r\n                                                                </span>\r\n                                                            </Tooltip>\r\n                                                        )}\r\n                                                    </TableCell>\r\n                                                    <TableCell style={{ border: \"none\" }} align=\"left\">\r\n                                                        <span className=\"tabledata\">\r\n                                                            {Number(value) === Number(row.Value)\r\n                                                                ? 0\r\n                                                                : format({})(parseFloat(value))}\r\n                                                        </span>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                )\r\n                            )}\r\n                            {noData == true && (\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell\r\n                                            id=\"td\"\r\n                                            colspan=\"6\"\r\n                                            style={{ borderBottom: \"none\" }}\r\n                                        >\r\n                                            <span className=\"tabledata\" style={{ color: \"red\" }}>\r\n                                                No transaction found.\r\n                                            </span>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            )}\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n                <DeskTopView>\r\n                    <Grid container style={{ marginTop: \"2.25rem\" }}>\r\n                        <PaginationInLine>\r\n                            <Grid item style={{ width: \"12.5rem\" }}>\r\n                                <span className=\"text\">Show</span>\r\n                                <select\r\n                                    value={rowsPerPage}\r\n                                    className=\"select-amount\"\r\n                                    onChange={handleChangeRowsPerPage}\r\n                                >\r\n                                    <option value={10}>10</option>\r\n                                    <option value={25}>25</option>\r\n                                    <option value={50}>50</option>\r\n                                    <option value={75}>75</option>\r\n                                    <option value={100}>100</option>\r\n                                </select>\r\n                                <span className=\"text\">Records</span>\r\n                            </Grid>\r\n\r\n                            <Grid>\r\n                                <button\r\n                                    style={{ marginLeft: \"0px\" }}\r\n                                    onClick={() => handleChangePage(\"first\")}\r\n                                    className={page === 0 ? \"btn disabled\" : \"btn\"}\r\n                                >\r\n                                    First\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => handleChangePage(\"prev\")}\r\n                                    className={page === 0 ? \"btn disabled\" : \"btn\"}\r\n                                >\r\n                                    {\"<\"}\r\n                                </button>\r\n                                <button className=\"btn\">\r\n                                    Page{\" \"}\r\n                                    {Math.round(totalRecord / rowsPerPage) +\r\n                                        1 -\r\n                                        Math.round((totalRecord - page) / rowsPerPage)}\r\n                                    &nbsp;of {Math.ceil(totalRecord / rowsPerPage)}\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => handleChangePage(\"next\")}\r\n                                    className={\r\n                                        page + rowsPerPage === totalRecord ? \"btn disabled\" : \"btn\"\r\n                                    }\r\n                                >\r\n                                    {\">\"}\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => handleChangePage(\"last\")}\r\n                                    className={\r\n                                        page + rowsPerPage === totalRecord ? \"btn disabled\" : \"btn\"\r\n                                    }\r\n                                >\r\n                                    Last\r\n                                </button>\r\n                            </Grid>\r\n                        </PaginationInLine>\r\n                    </Grid>\r\n                </DeskTopView>\r\n                <MobileView>\r\n                    <Pagination>\r\n                        <LeftPagination>\r\n                            <span className=\"text\">Show</span>\r\n                            <select\r\n                                value={rowsPerPage}\r\n                                className=\"select-amount\"\r\n                                onChange={handleChangeRowsPerPage}\r\n                            >\r\n                                <option value={10}>10</option>\r\n                                <option value={25}>25</option>\r\n                                <option value={50}>50</option>\r\n                                <option value={75}>75</option>\r\n                                <option value={100}>100</option>\r\n                            </select>\r\n                            <span className=\"text\">Records</span>\r\n                        </LeftPagination>\r\n\r\n                        <RightPagination className=\"pagiantion-11\">\r\n                            <button\r\n                                id=\"btn_12\"\r\n                                style={{ marginLeft: \"0px\" }}\r\n                                onClick={() => handleChangePage(\"first\")}\r\n                                className={page === 0 ? \"btn disabled\" : \"btn\"}\r\n                            >\r\n                                First\r\n                            </button>\r\n                            <button\r\n                                id=\"btn_12\"\r\n                                onClick={() => handleChangePage(\"prev\")}\r\n                                className={page === 0 ? \"btn disabled\" : \"btn\"}\r\n                            >\r\n                                {\"<\"}\r\n                            </button>\r\n                            <button id=\"btn_12\" className=\"btn w-100\">\r\n                                <div className=\"txt-center\">\r\n                                    Page\r\n                                    {Math.round(totalRecord / rowsPerPage) +\r\n                                        1 -\r\n                                        Math.round((totalRecord - page) / rowsPerPage)}{\" \"}\r\n                                    &nbsp;of {Math.round(totalRecord / rowsPerPage)}\r\n                                </div>\r\n                            </button>\r\n                            <button\r\n                                id=\"btn_12\"\r\n                                onClick={() => handleChangePage(\"next\")}\r\n                                className={\r\n                                    page + rowsPerPage === totalRecord ? \"btn disabled\" : \"btn\"\r\n                                }\r\n                            >\r\n                                {\">\"}\r\n                            </button>\r\n                            <button\r\n                                id=\"btn_12\"\r\n                                onClick={() => handleChangePage(\"last\")}\r\n                                className={\r\n                                    page + rowsPerPage === totalRecord ? \"btn disabled\" : \"btn\"\r\n                                }\r\n                            >\r\n                                Last\r\n                            </button>\r\n                        </RightPagination>\r\n                    </Pagination>\r\n                </MobileView>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport \"../../assets/styles/custom.css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport Tokensearchbar from \"../explorer/tokensearchBar\";\r\nimport FooterComponent from \"../common/footerComponent\";\r\nimport HolderTableComponent from \"./holderTable\";\r\nimport { ImQrcode } from \"react-icons/im\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { Grid, TableContainer } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport styled from \"styled-components\";\r\nimport Utils from \"../../utility\";\r\nimport TokenData from \"../../services/token\";\r\nimport { Row } from \"simple-flexbox\";\r\nimport format from \"format-number\";\r\nimport ContractData from \"../../services/contract\";\r\nimport HolderAnalytics from \"../token/holderAnalytics/analyticsComponent\";\r\n\r\nvar QRCode = require(\"qrcode.react\");\r\n\r\nconst DeskTopView = styled.div`\r\n  @media (min-width: 0px) and (max-width: 640px) {\r\n    display: none;\r\n  }\r\n\r\n  @media (min-width: 641px) {\r\n    display: visible;\r\n  }\r\n`;\r\n\r\nconst MobileView = styled.div`\r\n  @media (min-width: 0px) and (max-width: 640px) {\r\n    display: visible;\r\n  }\r\n\r\n  @media (min-width: 641px) {\r\n    display: none;\r\n  }\r\n`;\r\nconst CloseIcon = styled.img`\r\n  width: 1rem;\r\n  height: 1rem;\r\n  cursor: pointer;\r\n  @media (min-width: 0) and (max-width: 768px) {\r\n    margin-left: 18rem;\r\n    width: 10.6px;\r\n    height: 10.8px;\r\n    // margin-right: 20px;\r\n    display: ${(props) => (props.isDesktop ? \"none\" : \"block\")};\r\n  }\r\n  @media (min-width: 768px) {\r\n    display: ${(props) => (props.isDesktop ? \"block\" : \"none\")};\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    borderRadius: \"14px\",\r\n    boxShadow: \"0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n    borderBottom: \"none\",\r\n    background: \"#fff\",\r\n    // width: \"75.125rem\"\r\n  },\r\n  \"@media (max-width: 767px)\": {\r\n    container: {\r\n      padding: \"0 15px\",\r\n    },\r\n  }\r\n});\r\nexport default function HoldersDetails(props) {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const isAnalytics = urlParams.get(\"isAnalytics\");\r\n  const [toggleState, setToggleState] = useState(\r\n    isAnalytics === \"true\" ? 2 : 1\r\n  );\r\n\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  const [copiedText, setCopiedText] = useState(\"\");\r\n\r\n  const [holder, setHolderDetail] = useState(0);\r\n  const [contractAddress, setContractAddress] = useState(0);\r\n  const [decimal, setDecimal] = useState(0);\r\n  const { addr } = useParams();\r\n  const { tn } = useParams();\r\n\r\n  useEffect(() => {\r\n    let values = { address: addr, skip: 0, limit: 1 };\r\n    holderDetail(values);\r\n    if (holder !== 0) {\r\n      getContractDetails();\r\n    }\r\n  }, [contractAddress]);\r\n\r\n  const getContractDetails = async () => {\r\n    let urlPath = `${contractAddress}`;\r\n    let [error, contractDecimal] = await Utils.parseResponse(\r\n      ContractData.getContractDetailsUsingAddress(urlPath, {})\r\n    );\r\n    if (error || !contractDecimal) return;\r\n    setDecimal(contractDecimal.contractResponse?.decimals);\r\n  };\r\n\r\n  const holderDetail = async (values) => {\r\n    let [error, tns] = await Utils.parseResponse(\r\n      TokenData.getHolderDetailsUsingAddressforToken(values)\r\n    );\r\n    if (error || !tns) return;\r\n    setHolderDetail(tns);\r\n    setContractAddress(tns[0]?.Contract_address);\r\n  };\r\n\r\n  const toggleTab = (index) => {\r\n    setToggleState(index);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <DeskTopView>\r\n        <div style={{ backgroundColor: \"#fff\" }}>\r\n          <Tokensearchbar />\r\n          <Grid className=\"table-grid-block grid-block-table_11\">\r\n            <div\r\n              className=\"block_details_heading\"\r\n              style={{ display: \"flex\", flexDirection: \"row\" }}\r\n            >\r\n              <p className=\"block_details_heading_left\">Holder Details</p>\r\n            </div>\r\n            <Paper style={{ borderRadius: \"14px\" }} elevation={0}>\r\n              <TableContainer\r\n                className={classes.container}\r\n                id=\"container-table\"\r\n              >\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow >\r\n                      <TableCell\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          width: \"0px\",\r\n                          paddingRight: \"1px\",\r\n                        }}\r\n                        id=\"td\"\r\n                      />\r\n                      <TableCell className=\"first-row-table_address1\">\r\n                        Holder\r\n                      </TableCell>\r\n                      <TableCell className=\"second-row-table_address1\">\r\n                        {addr}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <CopyToClipboard\r\n                            text={addr}\r\n                            onCopy={() => setCopiedText(addr)}\r\n                          >\r\n                            <Tooltip\r\n                              title={\r\n                                copiedText === addr\r\n                                  ? \"Copied\"\r\n                                  : \"Copy To Clipboard\"\r\n                              }\r\n                              placement=\"top\"\r\n                            >\r\n                              <button\r\n                                style={{\r\n                                  color: \"blue\",\r\n                                  backgroundColor: \"white\",\r\n                                  fontSize: 14,\r\n                                  marginLeft: \"25px\",\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                <img alt=\"copy\" src={\"/images/copy.svg\"} />{\" \"}\r\n                              </button>\r\n                            </Tooltip>\r\n                          </CopyToClipboard>\r\n                          <Popup\r\n                            trigger={<ImQrcode className=\"imQrcode\" />}\r\n                            lockScroll\r\n                            modal\r\n                          >\r\n                            {(close) => (\r\n                              <div className=\"popup_qr\">\r\n                                <CloseIcon\r\n                                  isDesktop={false}\r\n                                  src=\"/images/XDC-Cross.svg\"\r\n                                  // className=\"qrClose\"\r\n                                  onClick={close}\r\n                                />\r\n                                <p>\r\n                                  <div>\r\n                                    <div className=\"header-popup\">\r\n                                      <Row alignItems=\"center\">{addr}</Row>\r\n                                      <CloseIcon\r\n                                        isDesktop={true}\r\n                                        src=\"/images/XDC-Cross.svg\"\r\n                                        // className=\"qrClose\"\r\n                                        onClick={close}\r\n                                      />\r\n                                      {/* &times; */}\r\n                                      {/* </img> */}\r\n                                    </div>\r\n                                    {window.innerWidth > 767 ? (\r\n                                      <QRCode\r\n                                        size={320}\r\n                                        style={{\r\n                                          height: 400,\r\n                                          width: 400,\r\n                                          marginTop: \"0.625rem\",\r\n                                        }}\r\n                                        value={addr}\r\n                                      />\r\n                                    ) : (\r\n                                      <QRCode\r\n                                        // style={{window.innerWidth > 768 ? '800px' : '400px'}}\r\n                                        size={320}\r\n                                        className=\"qrcode-label\"\r\n                                        //style={{ height: 400, width: 400, marginTop: '0.625rem' }}\r\n                                        value={addr}\r\n                                      />\r\n                                    )}\r\n                                  </div>\r\n                                </p>\r\n                              </div>\r\n\r\n                              // <div className=\"popup_qr\">\r\n                              //   <p>\r\n                              //     <div>\r\n                              //       <button style={{ outline: 'none', width: '0px', height: '0px', marginLeft: \"0px\", paddingTop: '1.5rem' }} className=\"close\" onClick={close}>\r\n                              //         &times;\r\n                              //       </button>\r\n                              //       <div className=\"header\" style={{ fontSize: '0.875rem', paddingTop: '1.563rem', paddingBottom: '60px' }}> {addr} </div>\r\n                              //       <QRCode size={320} style={{ height: 400, width: 400 }} value={addr} />\r\n                              //     </div>\r\n                              //   </p>\r\n                              // </div>\r\n                            )}\r\n                          </Popup>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell\r\n                        style={{\r\n                          width: \"0px\",\r\n                          paddingRight: \"1px\",\r\n                        }}\r\n                        id=\"td\"\r\n                      />\r\n                      <TableCell className=\"first-row-table_address-balance\">\r\n                        Balance\r\n                      </TableCell>\r\n                      <TableCell className=\"second-row-table_address-balance\">\r\n                        {format({})(holder[0]?.Holder_token_balance)} {tn}\r\n                        {/* ({ReactHtmlParser(convertCurrency)} {coinValue}) */}\r\n                      </TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell\r\n                        style={{\r\n                          width: \"0px\",\r\n                          paddingRight: \"1px\",\r\n                        }}\r\n                        id=\"td\"\r\n                      />\r\n                      <TableCell className=\"first-row-table_address-balance\">\r\n                        Transfers\r\n                      </TableCell>\r\n                      <TableCell className=\"second-row-table_address-balance\">\r\n                        {holder[0]?.Total_transfes_transactions_Count}\r\n                      </TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell\r\n                        style={{\r\n                          width: \"0px\",\r\n                          paddingRight: \"1px\",\r\n                          borderBottom: \"none\",\r\n                        }}\r\n                        id=\"td\"\r\n                      />\r\n                      <TableCell className=\"first-row-table_address\">\r\n                        Contract Address\r\n                      </TableCell>\r\n                      <TableCell className=\"second-row-table_address\">\r\n                        {holder[0]?.Contract_address}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n            <br />\r\n            <br />\r\n            <TabComponent\r\n              toggleTab={toggleTab}\r\n              toggleState={toggleState}\r\n              transactions={transactions}\r\n              decimal={decimal}\r\n              contractAddress={contractAddress}\r\n              addr={addr}\r\n            />\r\n          </Grid>\r\n          <FooterComponent />\r\n        </div>\r\n      </DeskTopView>\r\n      <MobileView>\r\n        <div style={{ backgroundColor: \"#fff\" }}>\r\n          <Tokensearchbar />\r\n          <Grid lg={8} className=\"table-grid-block\">\r\n            <div\r\n              className=\"holder-detail-table\"\r\n            >\r\n              <p className=\"block_details_heading_left  fs-15\">\r\n                Holder Details\r\n              </p>\r\n            </div>\r\n            <Paper\r\n              className=\"holder-detail-table\"\r\n              elevation={0}\r\n            >\r\n              <TableContainer\r\n                className={classes.container}\r\n                id=\"container-table-holder-mob\"\r\n              >\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      {/* <TableCell\r\n                    style={{\r\n                      width: \"0px\",\r\n                      paddingRight: \"1px\",\r\n\r\n                    }}\r\n                    id=\"td\"\r\n                  /> */}\r\n                      <TableCell className=\"first-row-table_address1\">\r\n                        Holder\r\n                        <div className=\"sec-row-table\">\r\n                          <div className=\"word-break\">\r\n                            {\" \"}\r\n                            {addr}\r\n                            <CopyToClipboard\r\n                              text={addr}\r\n                              onCopy={() => setCopiedText(addr)}\r\n                            >\r\n                              <Tooltip\r\n                                title={\r\n                                  copiedText === addr\r\n                                    ? \"Copied\"\r\n                                    : \"Copy To Clipboard\"\r\n                                }\r\n                                placement=\"top\"\r\n                              >\r\n                                <button\r\n                                  style={{\r\n                                    color: \"blue\",\r\n                                    backgroundColor: \"white\",\r\n                                    fontSize: 14,\r\n                                    marginLeft: \"25px\",\r\n                                  }}\r\n                                >\r\n                                  <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                              </Tooltip>\r\n                            </CopyToClipboard>\r\n                            <Popup\r\n                              trigger={<ImQrcode className=\"imQrcode\" />}\r\n                              lockScroll\r\n                              modal\r\n                            >\r\n                              {(close) => (\r\n                                <div className=\"popup_qr\">\r\n                                  <CloseIcon\r\n                                    isDesktop={false}\r\n                                    src=\"/images/XDC-Cross.svg\"\r\n                                    // className=\"qrClose\"\r\n                                    onClick={close}\r\n                                  />\r\n                                  <p>\r\n                                    <div>\r\n                                      <div className=\"header-popup\">\r\n                                        <Row alignItems=\"center\">{addr}</Row>\r\n                                        <CloseIcon\r\n                                          isDesktop={true}\r\n                                          src=\"/images/XDC-Cross.svg\"\r\n                                          // className=\"qrClose\"\r\n                                          onClick={close}\r\n                                        />\r\n                                        {/* &times; */}\r\n                                        {/* </img> */}\r\n                                      </div>\r\n                                      {window.innerWidth > 767 ? (\r\n                                        <QRCode\r\n                                          size={320}\r\n                                          style={{\r\n                                            height: 400,\r\n                                            width: 400,\r\n                                            marginTop: \"0.625rem\",\r\n                                          }}\r\n                                          value={addr}\r\n                                        />\r\n                                      ) : (\r\n                                        <QRCode\r\n                                          // style={{window.innerWidth > 768 ? '800px' : '400px'}}\r\n                                          size={320}\r\n                                          className=\"qrcode-label\"\r\n                                          //style={{ height: 400, width: 400, marginTop: '0.625rem' }}\r\n                                          value={addr}\r\n                                        />\r\n                                      )}\r\n                                    </div>\r\n                                  </p>\r\n                                </div>\r\n                              )}\r\n                            </Popup>\r\n                            {/* <Popup\r\n                              trigger={\r\n                                <ImQrcode\r\n                                  style={{\r\n                                    marginLeft: \"10px\",\r\n                                    marginBottom: \"2px\",\r\n                                    cursor: \"pointer\",\r\n                                  }}\r\n                                />\r\n                              }\r\n                              modal\r\n                            >\r\n                              {(close) => (\r\n                                <div className=\"popup_qr\">\r\n                                  <p>\r\n                                    <div>\r\n                                      <button\r\n                                        style={{\r\n                                          outline: \"none\",\r\n                                          width: \"0px\",\r\n                                          height: \"0px\",\r\n                                          marginLeft: \"0px\",\r\n                                        }}\r\n                                        className=\"close\"\r\n                                        onClick={close}\r\n                                      >\r\n                                        &times;\r\n                                      </button>\r\n                                      <div\r\n                                        className=\"header\"\r\n                                        style={{\r\n                                          fontSize: \"11.5px\",\r\n                                          paddingTop: \"5px\",\r\n                                          paddingBottom: \"22px\",\r\n                                        }}\r\n                                      >\r\n                                        {\" \"}\r\n                                        {addr}{\" \"}\r\n                                      </div>\r\n                                      <QRCode\r\n                                        size={320}\r\n                                        style={{ height: 320, width: 320 }}\r\n                                        value={addr}\r\n                                      />\r\n                                    </div>\r\n                                  </p>\r\n                                </div>\r\n                              )}\r\n                            </Popup> */}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow>\r\n                      <TableCell className=\"first-row-table_address-balance\">\r\n                        Balance\r\n                        <div className=\"sec-row-table\">\r\n                          {\" \"}\r\n                          {holder[0]?.Holder_token_balance} XDC\r\n                          {/* ({ReactHtmlParser(convertCurrency)} {coinValue}) */}\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow>\r\n                      <TableCell className=\"first-row-table_address-balance\">\r\n                        Transfers\r\n                        <div className=\"sec-row-table\">\r\n                          {\" \"}\r\n                          {holder[0]?.Total_transfes_transactions_Count}\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className=\"first-row-table_address\">\r\n                        Contract Address\r\n                        <div className=\"sec-row-table\">\r\n                          {holder[0]?.Contract_address}\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n            <br />\r\n            <br />\r\n            <TabComponent\r\n              toggleTab={toggleTab}\r\n              toggleState={toggleState}\r\n              transactions={transactions}\r\n              decimal={decimal}\r\n              contractAddress={contractAddress}\r\n              addr={addr}\r\n            />\r\n            {/* <div className=\"container_sec\">\r\n              <div className=\"block_sec\">\r\n                <div className=\"bloc-tabs_sec\">\r\n                  <button\r\n                    className={\r\n                      toggleState === 1\r\n                        ? \"tabs_sec active-tabs_sec\"\r\n                        : \"tabs_sec\"\r\n                    }\r\n                    onClick={() => toggleTab(1)}\r\n                  >\r\n                    Transfers\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"content-tabs_sec\">\r\n                <div\r\n                  className={\r\n                    toggleState === 1\r\n                      ? \"content_sec  active-content_sec\"\r\n                      : \"content_sec\"\r\n                  }\r\n                >\r\n                  <HolderTableComponent\r\n                    trans={transactions}\r\n                    decimal={decimal}\r\n                  />\r\n                </div> */}\r\n\r\n            {/* <div\r\n                  className={\r\n                    toggleState === 2\r\n                      ? \"content_sec  active-content_sec\"\r\n                      : \"content_sec\"\r\n                  }\r\n                >\r\n                  <HolderTableComponent  />\r\n                </div> */}\r\n            {/* </div>\r\n            </div> */}\r\n          </Grid>\r\n          <FooterComponent />\r\n        </div>\r\n      </MobileView>\r\n    </>\r\n  );\r\n}\r\n\r\nconst TabComponent = ({\r\n  toggleTab,\r\n  toggleState,\r\n  transactions,\r\n  decimal,\r\n  contractAddress,\r\n  addr,\r\n}) => {\r\n  return (\r\n    <div className=\"container_sec_holder\">\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          backgroundColor: \"transparent\",\r\n          height: \"25px\",\r\n          borderBottom: \"solid 1px #e3e7eb\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            backgroundColor: \"transparent\",\r\n          }}\r\n        >\r\n          <button\r\n            className={\r\n              toggleState === 1 ? \"tabs-data active-tabs-token\" : \"tabs-data\"\r\n            }\r\n            onClick={() => toggleTab(1)}\r\n          >\r\n            Transfers\r\n          </button>\r\n          <button\r\n            className={\r\n              toggleState === 2\r\n                ? \"tabs-data active-tabs-token-holder\"\r\n                : \"tabs-data\"\r\n            }\r\n            onClick={() => toggleTab(2)}\r\n          >\r\n            Analytics\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          toggleState === 1 ? \"content_sec  active-content_sec\" : \"content_sec\"\r\n        }\r\n      >\r\n        <HolderTableComponent trans={transactions} decimal={decimal} />\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          toggleState === 2 ? \"content_sec  active-content_sec\" : \"content_sec\"\r\n        }\r\n      >\r\n        <HolderAnalytics\r\n          walletAddress={addr}\r\n          contractAddress={contractAddress}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { httpService } from \"../managers/httpService\";\r\nimport { httpConstants } from \"../constants\";\r\n\r\nexport default {\r\n  getTotalAccount,\r\n  getSomeDaysAccount,\r\n  getLatestAccount,\r\n  getTokenBalance,\r\n  getTokenTransferCount,\r\n  getHistoryPrice,\r\n  getTokenOverview,\r\n  getTokenInfo,\r\n  getAccountList,\r\n  getAddressAnalytics,\r\n};\r\n\r\nfunction getHeaders() {\r\n  return {\r\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\r\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\r\n  };\r\n}\r\n\r\nasync function getTotalAccount() {\r\n  let url = process.env.REACT_APP_GET_TOTAL_ACCOUNTS;\r\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTokenInfo(symbol) {\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_TOKEN_INFO +\r\n    `/${symbol}`;\r\n  //   let url =\r\n  //     \"http://xdc-explorer-prod-srv-1145457985.us-east-2.elb.amazonaws.com:3008\" +\r\n  //     httpConstants.API_END_POINT.GET_TOKEN_INFO +\r\n  //     `/${symbol}`;\r\n\r\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getAccountList(requestData) {\r\n  let url = process.env.REACT_APP_GET_ACCOUNT_LIST;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.POST,\r\n    getHeaders(),\r\n    requestData,\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getSomeDaysAccount() {\r\n  let url = process.env.REACT_APP_GET_SOME_DAYS_ACCOUNTS;\r\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getLatestAccount(path, data) {\r\n  let url = process.env.REACT_APP_GET_LATEST_ACCOUNTS + path;\r\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTokenBalance(data) {\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_TOKEN_BALANCE;\r\n  // let url =\r\n  //     \"http://xdc-explorer-prod-srv-1145457985.us-east-2.elb.amazonaws.com:3008/get-token-balance\";\r\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getAddressAnalytics(data) {\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_ADDRESS_ANALYTICS;\r\n  // let url =\r\n  //   \"http://localhost:3007\" + httpConstants.API_END_POINT.GET_ADDRESS_ANALYTICS;\r\n  // let url =\r\n  //     \"http://xdc-explorer-prod-srv-1145457985.us-east-2.elb.amazonaws.com:3008/get-token-balance\";\r\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTokenTransferCount(data) {\r\n  // let url =\r\n  //   process.env.REACT_APP_GET_LATEST_ACCOUNTS +\r\n  //   httpConstants.API_END_POINT.GET_TOKEN_TRANSFER_COUNT;\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_TOKEN_TRANSFER_COUNT;\r\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTokenOverview(data) {\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_TOKEN_OVERVIEW;\r\n  // let url = \"http://xdc-explorer-prod-srv-1145457985.us-east-2.elb.amazonaws.com:3008\" +\r\n  //     httpConstants.API_END_POINT.GET_TOKEN_OVERVIEW;\r\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getHistoryPrice(data) {\r\n  let url =\r\n    process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL +\r\n    httpConstants.API_END_POINT.GET_HISTORY_PRICE;\r\n  // let url = \"http://xdc-explorer-prod-srv-1145457985.us-east-2.elb.amazonaws.com:3008\" + httpConstants.API_END_POINT.GET_HISTORY_PRICE;\r\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst options = {\r\n  title: {\r\n    text: \"My stock chart\",\r\n  },\r\n  series: [\r\n    {\r\n      data: [1, 2, 1, 4, 3, 6, 7, 3, 8, 6, 9, 15],\r\n    },\r\n  ],\r\n};\r\n\r\nconst toolTipElement = (props) => {\r\n  return (\r\n    <div>\r\n      hiii\r\n    </div>\r\n  );\r\n};\r\nexport default function Chart(props) {\r\n  Highcharts.setOptions({\r\n    lang: {\r\n      rangeSelectorFrom: \"From\",\r\n      rangeSelectorTo: \"To\",\r\n      rangeSelectorZoom: \"Show\",\r\n    },\r\n  });\r\n  return (\r\n    <HighchartsReact\r\n      highcharts={Highcharts}\r\n      constructorType={\"stockChart\"}\r\n      options={props.options}\r\n    />\r\n  );\r\n}\r\n","import { httpService } from \"../managers/httpService\";\r\nimport { httpConstants } from \"../constants\";\r\n\r\nexport default {\r\n  getContractLists,\r\n  getTotalContractList,\r\n  getContractSearch,\r\n  getContractDetails,\r\n  getContractDetailsUsingAddress,\r\n};\r\n\r\nfunction getHeaders() {\r\n  return {\r\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\r\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\r\n  };\r\n}\r\n\r\nasync function getContractDetails(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_CONTRACT_DETAILS +\r\n    data.addr\r\n\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      ) {\r\n        return Promise.reject();\r\n      }\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getContractLists(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_CONTRACT_LIST +\r\n    \"?skip=\" +\r\n    Math.ceil(data.pageNum) +\r\n    \"&limit=\" +\r\n    data.perpage;\r\n\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.POST,\r\n    getHeaders(),\r\n    data,\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      ) {\r\n        return Promise.reject();\r\n      }\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTotalContractList() {\r\n  let url = process.env.REACT_APP_GET_TOTAL_CONTRACT_LIST;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      ) {\r\n        return Promise.reject();\r\n      }\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\nasync function getContractSearch(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_CONTRACT_SEARCH +\r\n    \"?skip=\" +\r\n    Math.ceil(data.pageNum) +\r\n    \"&limit=\" +\r\n    data.perpage +\r\n    \"&keywords=\" +\r\n    data.keywords;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      ) {\r\n        return Promise.reject();\r\n      }\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\nasync function getContractDetailsUsingAddress(path, data) {\r\n  let url = process.env.REACT_APP_GET_CONTRACT_DETAIL_USING_ADDRESS + path\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    data,\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n","import { httpService } from \"../managers/httpService\";\r\nimport { httpConstants } from \"../constants\";\r\n\r\nexport default {\r\n  getAddressDetail,\r\n  getAddressDetailWithlimit,\r\n  getFilteredAddressDetailWithLimit,\r\n  getFiltersForAccountTransaction,\r\n  getTransactionSearch,\r\n  getTransactionsCountForAddress,\r\n  getAddressStats,\r\n};\r\nfunction getHeaders() {\r\n  return {\r\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\r\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\r\n  };\r\n}\r\nasync function getAddressDetail(address) {\r\n  let url = process.env.REACT_APP_GET_ADDRESS_DETAILS + address;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getTransactionSearch(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_TRANSACTION_SEARCH +\r\n    data.addrr +\r\n    \"/\" +\r\n    data.keywords +\r\n    \"?skip=\" +\r\n    Math.ceil(data.pageNum) +\r\n    \"&limit=\" +\r\n    data.perpage;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\nasync function getAddressDetailWithlimit(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_TRANSACTIONS_FOR_ADDRESS +\r\n    data.addrr +\r\n    \"?skip=\" +\r\n    Math.ceil(data.pageNum) +\r\n    \"&limit=\" +\r\n    data.perpage + \"&sortKey=\" + data?.sortKey + \"&sortType=\" + data?.sortType;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n\r\nasync function getFilteredAddressDetailWithLimit(requestData) {\r\n    let url = process.env.REACT_APP_GET_FILTERED_TRANSACTIONS_FOR_ADDRESS + requestData.address\r\n    return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), requestData, url)\r\n        .then((response) => {\r\n            if (\r\n                !response.success ||\r\n                response.responseCode !== 200 ||\r\n                !response.responseData ||\r\n                response.responseData.length === 0\r\n            )\r\n                return Promise.reject();\r\n            return Promise.resolve(response.responseData);\r\n        })\r\n        .catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n}\r\nasync function getFiltersForAccountTransaction(requestData) {\r\n    let url = process.env.REACT_APP_GET_FILTERS_FOR_ADDRESS_TXN + requestData.address\r\n    return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\r\n        .then((response) => {\r\n            if (\r\n                !response.success ||\r\n                response.responseCode !== 200 ||\r\n                !response.responseData ||\r\n                response.responseData.length === 0\r\n            )\r\n                return Promise.reject();\r\n            return Promise.resolve(response.responseData);\r\n        })\r\n        .catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n}\r\nasync function getTransactionsCountForAddress(data) {\r\n  let url =\r\n    process.env.REACT_APP_GET_TRANSACTIONS_COUNT_FOR_ADDRESS + data.address\r\n      + (data.searchValue ? \"?searchValue=\" + data.searchValue : \"\")\r\n      + (data.txnType ? (data.searchValue ? \"&txnType=\" : \"?txnType=\") + data.txnType : \"\")\r\n      + (data.status ? (data.searchValue || data.txnType ? \"&status=\" : \"?status=\") + data.status : \"\")\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\nasync function getAddressStats(address) {\r\n  let url = process.env.REACT_APP_GET_ADDRESS_STATS + address;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.GET,\r\n    getHeaders(),\r\n    {},\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}"],"sourceRoot":""}