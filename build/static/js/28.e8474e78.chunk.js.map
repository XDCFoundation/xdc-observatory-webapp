{"version":3,"sources":["modules/transaction/transactionComponent.js","modules/transaction/mainComponent.js","modules/transaction/index.js","assets/images/XDC-Alert.svg","modules/common/pageSelector.js","modules/common/configureColumnsPopOver.js","modules/common/configureColumnsModal.js","modules/common/transactionDetailTooltip.jsx","modules/common/index.js"],"names":["useStyles","makeStyles","container","borderRadius","boxShadow","borderBottom","background","containerDark","container1","containerDark1","customTooltip","fontSize","customTooltipDarkMode","color","height","styled","div","TransactionComponent","props","classes","React","useState","anchorEl","setAnchorEl","isColumnsModalOpen","setColumnsModal","isSettingColumnOpen","Boolean","hashTT","setHashTT","amountTT","setAmountTT","methodTT","setMethodTT","ageTT","setAgeTT","dateTT","setDateTT","blockTT","setBlockTT","fromTT","setFromTT","toTT","setToTT","toggleModal","shorten","b","amountL","stars","slice","repeat","length","state","NoDataFoundContainer","useParams","blockNumber","lastPage","transactionList","sort","a","Number","className","class","theme","tableName","onClick","event","currentTarget","src","isOpen","handleOnClose","tableColumns","toggleTableColumns","onModalClose","style","elevation","TableContainer","isData","id","Table","TableHead","TableRow","TableCell","align","window","innerWidth","Tooltip","placement","title","messages","HASH","tooltip","alt","open","onOpen","onClose","isActive","border","paddingLeft","AMOUNT","METHOD","AGE","DATE","BLOCK","FROM","TO","isLoading","TableBody","colspan","map","row","index","currentTime","Date","previousTime","timestamp","ti","utility","timeDiff","amt","decimalDivison","value","Hash","hash","animationClass","hashAnimation","key","name","width","margin","display","alignItems","transactionAddress","href","method","moment","format","from","paddingRight","to","require","Grid","marginTop","amount","handler","_handleChange","item","_FirstPage","_PrevPage","Math","round","totalTransaction","_NextPage","lastFrom","_LastPage","socket","socketClient","process","transports","LatestTransactionList","setState","target","getListOfTransactions","sortKey","columnName","columns","isLoader","pageParam","match","params","pageNo","Amount","toolTipText","toolTipMessages","Age","age","date","Block","blocknumber","this","off","getTotalTransaction","socketData","urlPath","Utils","parseResponse","TransactionService","getLatestTransaction","error","listOfTransactions","getMethodType","total","on","transactionData","transactions","findIndex","pop","unshift","hashAnimationClass","setTimeout","block","txnfee","type","create_data","create_url","BaseComponent","TransactionListMainComponent","currentTheme","connect","dispatchAction","module","exports","dropdownStyle","PageSelect","Select","PageSelectDark","PageSelector","onChange","displayEmpty","MenuProps","paper","disabled","paperWidthSm","maxWidth","ConfigureColumnsPopOver","openTT","setOpenTT","keyValue","setKeyValue","anchorOrigin","vertical","horizontal","transformOrigin","Object","keys","handleOpenTT","ConfigureColumnsModal","aria-labelledby","console","log","TransactionDetailTooltip","setOpen","transactionHash","setTransactionHash","setTransactionDetail","price","setPrice","timeStamp","setTimeStamp","setIsLoading","CurrencyValue","localStorage","getItem","menuRef","useRef","useEffect","document","addEventListener","current","contains","transactionDetail","getCoinMarketDetailForTransaction","getTransactionDetailsUsingHash","transactiondetailusinghash","currencySymbol","valueFetch","valueDiv","ValueMain","txfee","gasPrice","gasUsed","transactionFetch","fetchtxn","parseFloat","toFixed","gasP","trigger","interactive","offset","content","ref","status","replace","gasprovided","gas","gasprice","nounced","nonce","undefined","FooterComponent"],"mappings":"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","file":"static/js/28.e8474e78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../../src/assets/styles/blocksAndTransactionList.css\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Grid, TableContainer } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport VisibilityOutlinedIcon from \"@material-ui/icons/VisibilityOutlined\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../assets/loader\";\r\nimport ConfigureColumnPopOver from \"../common/configureColumnsPopOver\";\r\nimport ConfigureColumnsModal from \"../common/configureColumnsModal\";\r\nimport moment from \"moment\";\r\nimport { messages } from \"../../constants\";\r\nimport TransactionDetailTooltip from \"../common/transactionDetailTooltip\";\r\nimport format from \"format-number\";\r\nimport utility from \"../../utility\";\r\nimport PageSelector from \"../common/pageSelector\";\r\nimport { useParams } from \"react-router\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    borderRadius: \"14px\",\r\n    boxShadow: \"0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n    borderBottom: \"none\",\r\n    background: \"#fff\",\r\n  },\r\n  containerDark: {\r\n    borderRadius: \"14px\",\r\n    boxShadow: \"none\",\r\n    borderBottom: \"none\",\r\n    background: \"#192a59\",\r\n  },\r\n  container1: {\r\n    borderRadius: \"14px\",\r\n    boxShadow: \"0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n    borderBottom: \"none\",\r\n    background: \"#fff\",\r\n  },\r\n  containerDark1: {\r\n    borderRadius: \"14px\",\r\n    boxShadow: \"0 1px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n    borderBottom: \"none\",\r\n    background: \"#192a59\",\r\n  },\r\n  customTooltip: {\r\n    fontSize: \"13px\",\r\n  },\r\n  customTooltipDarkMode: {\r\n    background: \"#051440\",\r\n    color: \"#adc4e4\",\r\n    fontSize: \"13px\",\r\n  },\r\n  \"@media (min-width:0px) and (max-width: 767px)\": {\r\n    container: {\r\n      height: \"36.375rem\",\r\n    },\r\n    containerDark: {\r\n      height: \"36.375rem\",\r\n    },\r\n    container1: {\r\n      height: \"23.375rem\",\r\n    },\r\n    containerDark1: {\r\n      height: \"23.375rem\",\r\n    },\r\n  },\r\n  \"@media (min-width:768px) and (max-width: 1240px)\": {\r\n    container: {\r\n      height: \"43.375rem\",\r\n    },\r\n    containerDark: {\r\n      height: \"43.375rem\",\r\n    },\r\n    container1: {\r\n      height: \"23.375rem\",\r\n    },\r\n    containerDark1: {\r\n      height: \"23.375rem\",\r\n    },\r\n  },\r\n});\r\nconst Pagination = styled.div`\r\n  @media (min-width: 640px) {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n`;\r\n\r\nexport default function TransactionComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  let [anchorEl, setAnchorEl] = React.useState();\r\n  let [isColumnsModalOpen, setColumnsModal] = React.useState(false);\r\n  let isSettingColumnOpen = Boolean(anchorEl);\r\n  const [hashTT, setHashTT] = React.useState(false);\r\n  const [amountTT, setAmountTT] = React.useState(false);\r\n  const [methodTT, setMethodTT] = React.useState(false);\r\n  const [ageTT, setAgeTT] = React.useState(false);\r\n  const [dateTT, setDateTT] = React.useState(false);\r\n  const [blockTT, setBlockTT] = React.useState(false);\r\n  const [fromTT, setFromTT] = React.useState(false);\r\n  const [toTT, setToTT] = React.useState(false);\r\n\r\n  function handleSettingsClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function toggleModal() {\r\n    setColumnsModal(!isColumnsModalOpen);\r\n  }\r\n\r\n  function handleOnClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function shorten(b, amountL = 10, amountR = 3, stars = 3) {\r\n    return `${b?.slice(0, amountL)}${\".\".repeat(stars)}${b?.slice(\r\n      b.length - 3,\r\n      b.length\r\n    )}`;\r\n  }\r\n\r\n  const { state } = props;\r\n\r\n  const NoDataFoundContainer = styled.div`\r\n    display: flex;\r\n    flex-flow: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top: 100px;\r\n    gap: 10px;\r\n    color: #c6cbcf;\r\n    @media (min-width: 767px) {\r\n      margin: 100px 0 !important;\r\n    }\r\n  `;\r\n\r\n  const tableColumns = { \"Transaction Hash\": { isActive: true } };\r\n  const { blockNumber } = useParams();\r\n\r\n  if (props.state.lastPage === true) {\r\n    props.state.transactionList.sort(function (a, b) {\r\n      return Number(b.blockNumber) - Number(a.blockNumber);\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"responsive-table-width-transactions-list contact-list-tab \">\r\n      <div className=\"display-flex justify-content-between p-t-30 p-b-15\">\r\n        <div\r\n          class={\r\n            props.theme === \"dark\"\r\n              ? \"latestTransactionHeadingDark\"\r\n              : \"latestTransactionHeading\"\r\n          }\r\n        >\r\n          {state.tableName}\r\n        </div>\r\n        <div class=\" display-none-mobile display-flex flex-direction-column justify-content-center\">\r\n          <img\r\n            onClick={handleSettingsClick}\r\n            className=\"m-r-9 h-20 w-20-px cursor-pointer\"\r\n            src=\"/images/settings.svg\"\r\n          />\r\n          <ConfigureColumnPopOver\r\n            isOpen={isSettingColumnOpen}\r\n            anchorEl={anchorEl}\r\n            handleOnClose={handleOnClose}\r\n            tableColumns={props.state.tableColumns}\r\n            toggleTableColumns={props.toggleTableColumns}\r\n            theme={props.theme}\r\n          />\r\n        </div>\r\n        <div className=\"display-none-tab display-none-desktop display-flex flex-direction-column justify-content-center\">\r\n          <img\r\n            onClick={toggleModal}\r\n            className=\"p-r-5 h-20 w-20-px cursor-pointer\"\r\n            src=\"/images/settings.svg\"\r\n          />\r\n          <ConfigureColumnsModal\r\n            isOpen={isColumnsModalOpen}\r\n            onModalClose={toggleModal}\r\n            tableColumns={props.state.tableColumns}\r\n            toggleTableColumns={props.toggleTableColumns}\r\n            theme={props.theme}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ borderRadius: \"14px\" }} elevation={0}>\r\n        <TableContainer\r\n          className={\r\n            !props.state.isData\r\n              ? props.theme === \"dark\"\r\n                ? classes.containerDark1\r\n                : classes.container1\r\n              : props.theme === \"dark\"\r\n              ? classes.containerDark\r\n              : classes.container\r\n          }\r\n          id=\"container-table-transaction-list\"\r\n        >\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell\r\n                  className=\"table-head-hash hash-transaction-list-all\"\r\n                  align=\"left\"\r\n                >\r\n                  <span\r\n                    className={\r\n                      props.theme === \"dark\"\r\n                        ? \"tableheaders-hash-dark TableHeadersTransactionDark\"\r\n                        : (\"tableheaders-hash\", \"tableheaders\")\r\n                    }\r\n                  >\r\n                    Hash\r\n                    {window.innerWidth > 1024 ? (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.HASH}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                        />\r\n                      </Tooltip>\r\n                    ) : (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.HASH}\r\n                        open={hashTT}\r\n                        onOpen={() => setHashTT(true)}\r\n                        onClose={() => setHashTT(false)}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                          onClick={() => setHashTT(!hashTT)}\r\n                        />\r\n                      </Tooltip>\r\n                    )}\r\n                  </span>\r\n                </TableCell>\r\n                {props.state.tableColumns[\"Amount\"].isActive && (\r\n                  <TableCell\r\n                    style={{ border: \"none\", paddingLeft: \"2rem\" }}\r\n                    className=\"table-head-all\"\r\n                    align=\"left\"\r\n                  >\r\n                    <span\r\n                      className={\r\n                        props.theme === \"dark\"\r\n                          ? \"TableHeadersTransactionDark tableheaders-all-dark\"\r\n                          : (\"tableheaders\", \"tableheaders-all\")\r\n                      }\r\n                    >\r\n                      Amount\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.AMOUNT}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                          />\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.AMOUNT}\r\n                          open={amountTT}\r\n                          onOpen={() => setAmountTT(true)}\r\n                          onClose={() => setAmountTT(false)}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                            onClick={() => setAmountTT(!amountTT)}\r\n                          />\r\n                        </Tooltip>\r\n                      )}\r\n                    </span>\r\n                  </TableCell>\r\n                )}\r\n                {/* {props.state.tableColumns[\"Age\"].isActive && ( */}\r\n                <TableCell\r\n                  style={{ border: \"none\", paddingLeft: \"2rem\" }}\r\n                  className=\"table-head-all\"\r\n                  align=\"left\"\r\n                >\r\n                  <span\r\n                    className={\r\n                      props.theme === \"dark\"\r\n                        ? \"TableHeadersTransactionDark tableheaders-all-dark\"\r\n                        : (\"tableheaders\", \"tableheaders-all\")\r\n                    }\r\n                  >\r\n                    Method\r\n                    {window.innerWidth > 1024 ? (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.METHOD}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                        />\r\n                      </Tooltip>\r\n                    ) : (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.METHOD}\r\n                        open={methodTT}\r\n                        onOpen={() => setMethodTT(true)}\r\n                        onClose={() => setMethodTT(false)}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                          onClick={() => setMethodTT(!methodTT)}\r\n                        />\r\n                      </Tooltip>\r\n                    )}\r\n                  </span>\r\n                </TableCell>\r\n                {/* )} */}\r\n                {props.state.tableColumns[\"Age\"].isActive && (\r\n                  <TableCell\r\n                    style={{ border: \"none\", paddingLeft: \"2rem\" }}\r\n                    className=\"table-head-all\"\r\n                    align=\"left\"\r\n                  >\r\n                    <span\r\n                      className={\r\n                        props.theme === \"dark\"\r\n                          ? \"TableHeadersTransactionDark tableheaders-age-dark\"\r\n                          : (\"tableheaders\", \"tableheaders-age\")\r\n                      }\r\n                    >\r\n                      Age\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.AGE}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                          />\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.AGE}\r\n                          open={ageTT}\r\n                          onOpen={() => setAgeTT(true)}\r\n                          onClose={() => setAgeTT(false)}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                            onClick={() => setAgeTT(!ageTT)}\r\n                          />\r\n                        </Tooltip>\r\n                      )}\r\n                    </span>\r\n                  </TableCell>\r\n                )}\r\n                {props.state.tableColumns[\"Date\"].isActive && (\r\n                  <TableCell\r\n                    style={{ border: \"none\", paddingLeft: \"2rem\" }}\r\n                    className=\"table-head-all\"\r\n                    align=\"left\"\r\n                  >\r\n                    <span\r\n                      className={\r\n                        props.theme === \"dark\"\r\n                          ? \"TableHeadersTransactionDark tableheaders-age-dark\"\r\n                          : (\"tableheaders\", \"tableheaders-age\")\r\n                      }\r\n                    >\r\n                      Date\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.DATE}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                          />\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.DATE}\r\n                          open={dateTT}\r\n                          onOpen={() => setDateTT(true)}\r\n                          onClose={() => setDateTT(false)}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                            onClick={() => setDateTT(!dateTT)}\r\n                          />\r\n                        </Tooltip>\r\n                      )}\r\n                    </span>\r\n                  </TableCell>\r\n                )}\r\n                {props.state.tableColumns[\"Block\"].isActive && (\r\n                  <TableCell\r\n                    style={{ border: \"none\", paddingLeft: \"3rem\" }}\r\n                    className=\"table-head-all\"\r\n                    align=\"left\"\r\n                  >\r\n                    <span\r\n                      className={\r\n                        props.theme === \"dark\"\r\n                          ? \"TableHeadersTransactionDark tableheaders-all-dark\"\r\n                          : (\"tableheaders\", \"tableheaders-all\")\r\n                      }\r\n                    >\r\n                      Block\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.BLOCK}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                          />\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          placement=\"top\"\r\n                          title={messages.BLOCK}\r\n                          open={blockTT}\r\n                          onOpen={() => setBlockTT(true)}\r\n                          onClose={() => setBlockTT(false)}\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            alt=\"question-mark\"\r\n                            src=\"/images/info.svg\"\r\n                            height={\"14px\"}\r\n                            className=\"tooltipInfoIcon\"\r\n                            onClick={() => setBlockTT(!blockTT)}\r\n                          />\r\n                        </Tooltip>\r\n                      )}\r\n                    </span>\r\n                  </TableCell>\r\n                )}\r\n                <TableCell\r\n                  style={{ border: \"none\", paddingLeft: \"1.25rem\" }}\r\n                  className=\"table-head-all\"\r\n                  align=\"left\"\r\n                >\r\n                  <span\r\n                    className={\r\n                      props.theme === \"dark\"\r\n                        ? \"TableHeadersTransactionDark tableheaders-all-dark\"\r\n                        : (\"tableheaders\", \"tableheaders-all\")\r\n                    }\r\n                  >\r\n                    From\r\n                    {window.innerWidth > 1024 ? (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.FROM}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                        />\r\n                      </Tooltip>\r\n                    ) : (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.FROM}\r\n                        open={fromTT}\r\n                        onOpen={() => setFromTT(true)}\r\n                        onClose={() => setFromTT(false)}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                          onClick={() => setFromTT(!fromTT)}\r\n                        />\r\n                      </Tooltip>\r\n                    )}\r\n                  </span>\r\n                </TableCell>\r\n                <TableCell\r\n                  style={{ border: \"none\", paddingLeft: \"1.813rem\" }}\r\n                  className=\"table-head-all\"\r\n                  align=\"left\"\r\n                >\r\n                  <span\r\n                    className={\r\n                      props.theme === \"dark\"\r\n                        ? \"TableHeadersTransactionDark tableheaders-all-dark\"\r\n                        : (\"tableheaders\", \"tableheaders-all\")\r\n                    }\r\n                  >\r\n                    To\r\n                    {window.innerWidth > 1024 ? (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.TO}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                        />\r\n                      </Tooltip>\r\n                    ) : (\r\n                      <Tooltip\r\n                        placement=\"top\"\r\n                        title={messages.TO}\r\n                        open={toTT}\r\n                        onOpen={() => setToTT(true)}\r\n                        onClose={() => setToTT(false)}\r\n                        classes={{\r\n                          tooltip:\r\n                            props.theme === \"dark\"\r\n                              ? classes.customTooltipDarkMode\r\n                              : classes.customTooltip,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"question-mark\"\r\n                          src=\"/images/info.svg\"\r\n                          height={\"14px\"}\r\n                          className=\"tooltipInfoIcon\"\r\n                          onClick={() => setToTT(!toTT)}\r\n                        />\r\n                      </Tooltip>\r\n                    )}\r\n                  </span>\r\n                </TableCell>\r\n                {/* <TableCell\r\n                  style={{ border: \"none\", paddingLeft: \"3rem\" }}\r\n                  className=\"table-head-all\"\r\n                  align=\"left\"\r\n                >\r\n                  <span className={(\"tableheaders\", \"tableheaders-txn-fee\")}>\r\n                    Txn Fee\r\n                  </span>\r\n                </TableCell> */}\r\n              </TableRow>\r\n            </TableHead>\r\n            {props.state.isLoading == true ? (\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell style={{ border: \"none\" }} colspan=\"7\">\r\n                    <div className=\"loader-block-list\">\r\n                      <Loader />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            ) : (\r\n              <TableBody>\r\n                {props.state.transactionList &&\r\n                  props.state.transactionList.length >= 1 &&\r\n                  props.state.transactionList.map((row, index) => {\r\n                    const currentTime = new Date();\r\n                    const previousTime = new Date(row.timestamp * 1000);\r\n                    const ti = utility.timeDiff(currentTime, previousTime);\r\n                    // const txFee = (\r\n                    //   (row?.gasUsed * row?.gasPrice) /\r\n                    //   100000000000000000\r\n                    // ).toFixed(9);\r\n                    let amt = utility.decimalDivison(row.value, 8);\r\n                    const Hash = row.hash;\r\n                    let animationClass = props.state.hashAnimation?.[Hash];\r\n\r\n                    return (\r\n                      <TableRow\r\n                        key={row.name}\r\n                        style={\r\n                          index % 2 !== 1\r\n                            ? props.theme === \"dark\"\r\n                              ? { background: \"#192a59\" }\r\n                              : { background: \"#f9f9f9\" }\r\n                            : props.theme === \"dark\"\r\n                            ? { background: \"#192a59\" }\r\n                            : { background: \"white\" }\r\n                        }\r\n                      >\r\n                        <TableCell\r\n                          style={{\r\n                            border: \"none\",\r\n                            width: \"190px\",\r\n                            margin: 0,\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <div>\r\n                            <TransactionDetailTooltip\r\n                              transactionAddress={row.hash}\r\n                            />\r\n                          </div>\r\n                          <a\r\n                            className=\"linkTable\"\r\n                            href={\"/transaction-details/\" + row.hash}\r\n                          >\r\n                            {\" \"}\r\n                            <span\r\n                              className={\r\n                                animationClass\r\n                                  ? props.theme === \"dark\"\r\n                                    ? `${animationClass} connect-wallet-dark-xdc-url`\r\n                                    : animationClass\r\n                                  : props.theme === \"dark\"\r\n                                  ? \"connect-wallet-dark-xdc-url tabledata\"\r\n                                  : \"tabledata\"\r\n                              }\r\n                            >\r\n                              {\" \"}\r\n                              {shorten(row.hash)}\r\n                            </span>{\" \"}\r\n                          </a>\r\n                        </TableCell>\r\n                        {props.state.tableColumns[\"Amount\"].isActive && (\r\n                          <TableCell\r\n                            style={{\r\n                              border: \"none\",\r\n                              width: \"100px\",\r\n                              paddingLeft: \"1.813rem\",\r\n                            }}\r\n                            align=\"left\"\r\n                          >\r\n                            <span\r\n                              className={\r\n                                animationClass\r\n                                  ? props.theme === \"dark\"\r\n                                    ? `${animationClass} latest-blocks-tabledata-dark`\r\n                                    : animationClass\r\n                                  : props.theme === \"dark\"\r\n                                  ? \"latest-blocks-tabledata-dark\"\r\n                                  : \"tabledata\"\r\n                              }\r\n                            >\r\n                              {amt}\r\n                            </span>\r\n                          </TableCell>\r\n                        )}\r\n                        <TableCell\r\n                          style={{\r\n                            border: \"none\",\r\n                            width: \"120px\",\r\n                            paddingLeft: \"2.813rem\",\r\n                          }}\r\n                          align=\"left\"\r\n                        >\r\n                          <span\r\n                            className={\r\n                              animationClass\r\n                                ? props.theme === \"dark\"\r\n                                  ? `${animationClass} latest-blocks-tabledata-dark`\r\n                                  : animationClass\r\n                                : props.theme === \"dark\"\r\n                                ? \"latest-blocks-tabledata-dark\"\r\n                                : \"tabledata\"\r\n                            }\r\n                          >\r\n                            {row.method ? row.method : \"\"}\r\n                          </span>\r\n                        </TableCell>\r\n                        {props.state.tableColumns[\"Age\"].isActive && (\r\n                          <TableCell\r\n                            style={{\r\n                              border: \"none\",\r\n                              width: \"120px\",\r\n                              paddingLeft: \"1.813rem\",\r\n                            }}\r\n                            align=\"left\"\r\n                          >\r\n                            <span\r\n                              className={\r\n                                animationClass\r\n                                  ? props.theme === \"dark\"\r\n                                    ? `${animationClass} latest-blocks-tabledata-dark`\r\n                                    : animationClass\r\n                                  : props.theme === \"dark\"\r\n                                  ? \"latest-blocks-tabledata-dark\"\r\n                                  : \"tabledata\"\r\n                              }\r\n                            >\r\n                              {ti}\r\n                            </span>\r\n                          </TableCell>\r\n                        )}\r\n                        {props.state.tableColumns[\"Date\"].isActive && (\r\n                          <TableCell\r\n                            style={{\r\n                              border: \"none\",\r\n                              width: \"120px\",\r\n                              paddingLeft: \"1.813rem\",\r\n                            }}\r\n                            align=\"left\"\r\n                          >\r\n                            <span\r\n                              className={\r\n                                animationClass\r\n                                  ? props.theme === \"dark\"\r\n                                    ? `${animationClass} latest-blocks-tabledata-dark`\r\n                                    : animationClass\r\n                                  : props.theme === \"dark\"\r\n                                  ? \"latest-blocks-tabledata-dark\"\r\n                                  : \"tabledata\"\r\n                              }\r\n                            >\r\n                              {moment(row.timestamp * 1000).format(\r\n                                \"MMM DD, YYYY h:mm A\"\r\n                              )}\r\n                            </span>\r\n                          </TableCell>\r\n                        )}\r\n                        {props.state.tableColumns[\"Block\"].isActive && (\r\n                          <TableCell\r\n                            style={{\r\n                              border: \"none\",\r\n                              width: \"120px\",\r\n                              paddingLeft: \"2.813rem\",\r\n                            }}\r\n                            align=\"left\"\r\n                          >\r\n                            {\" \"}\r\n                            <a\r\n                              className=\"linkTable\"\r\n                              href={\"/block-details/\" + row.blockNumber}\r\n                            >\r\n                              {\" \"}\r\n                              <span\r\n                                className={\r\n                                  animationClass\r\n                                    ? props.theme === \"dark\"\r\n                                      ? `${animationClass} connect-wallet-dark-xdc-url`\r\n                                      : animationClass\r\n                                    : props.theme === \"dark\"\r\n                                    ? \"connect-wallet-dark-xdc-url tabledata\"\r\n                                    : \"tabledata\"\r\n                                }\r\n                              >\r\n                                {\" \"}\r\n                                {row.blockNumber}\r\n                              </span>{\" \"}\r\n                            </a>\r\n                          </TableCell>\r\n                        )}\r\n                        <TableCell\r\n                          style={{\r\n                            border: \"none\",\r\n                            width: \"160px\",\r\n                            paddingLeft: \"1rem\",\r\n                          }}\r\n                          align=\"left\"\r\n                        >\r\n                          {\" \"}\r\n                          <a\r\n                            className=\"linkTable\"\r\n                            href={\"/address-details/\" + row.from}\r\n                          >\r\n                            <Tooltip placement=\"top\" title={row.from}>\r\n                              <span\r\n                                className={\r\n                                  animationClass\r\n                                    ? props.theme === \"dark\"\r\n                                      ? `${animationClass} connect-wallet-dark-xdc-url`\r\n                                      : animationClass\r\n                                    : props.theme === \"dark\"\r\n                                    ? \"connect-wallet-dark-xdc-url tabledata\"\r\n                                    : \"tabledata\"\r\n                                }\r\n                              >\r\n                                {shorten(row.from)}\r\n                              </span>\r\n                            </Tooltip>\r\n                          </a>\r\n                        </TableCell>\r\n                        <TableCell\r\n                          style={{\r\n                            border: \"none\",\r\n                            width: \"155px\",\r\n                            paddingLeft: \"1.813rem\",\r\n                            paddingRight: \"15px\",\r\n                          }}\r\n                          align=\"left\"\r\n                        >\r\n                          {\" \"}\r\n                          <a\r\n                            className=\"linkTable\"\r\n                            href={\"/address-details/\" + row.to}\r\n                          >\r\n                            <Tooltip placement=\"top\" title={row.to}>\r\n                              <span\r\n                                className={\r\n                                  animationClass\r\n                                    ? props.theme === \"dark\"\r\n                                      ? `${animationClass} connect-wallet-dark-xdc-url`\r\n                                      : animationClass\r\n                                    : props.theme === \"dark\"\r\n                                    ? \"connect-wallet-dark-xdc-url tabledata\"\r\n                                    : \"tabledata\"\r\n                                }\r\n                              >\r\n                                {!row.to\r\n                                  ? \"------------------\"\r\n                                  : shorten(row.to)}\r\n                              </span>\r\n                            </Tooltip>\r\n                          </a>\r\n                        </TableCell>\r\n                        {/* <TableCell\r\n                          style={{ border: \"none\", paddingLeft: \"2.813rem\" }}\r\n                          align=\"left\"\r\n                        >\r\n                          <span\r\n                            className={\r\n                              animationClass ? animationClass : \"tabledata\"\r\n                            }\r\n                          >\r\n                            {txFee == 0 ? 0 : txFee} XDC\r\n                          </span>\r\n                        </TableCell> */}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            )}\r\n          </Table>\r\n          {!props.state.isData && !props.state.isLoading ? (\r\n            <NoDataFoundContainer>\r\n              <img\r\n                src={require(\"../../../src/assets/images/XDC-Alert.svg\")}\r\n              ></img>\r\n\r\n              <div>No transactions found</div>\r\n            </NoDataFoundContainer>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </TableContainer>\r\n      </div>\r\n\r\n      <Grid container style={{ marginTop: \"1.75rem\" }} className=\"Pagination\">\r\n        {/* <Pagination> */}\r\n        <Grid className=\"Pagination_1\">\r\n          {!props.state.isLoading && props.state.isData ? (\r\n            <>\r\n              <span className={props.theme === \"dark\" ? \"text-dark\" : \"text\"}>\r\n                Show\r\n              </span>\r\n              <PageSelector\r\n                value={props.state.amount}\r\n                height={35}\r\n                handler={props._handleChange}\r\n                theme={props.theme}\r\n              />\r\n              <span className={props.theme === \"dark\" ? \"text-dark\" : \"text\"}>\r\n                Records\r\n              </span>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid item className=\"Pagination_2\">\r\n          <button\r\n            onClick={(event) => props._FirstPage(event)}\r\n            className={\r\n              props.state.from === 0\r\n                ? props.theme === \"dark\"\r\n                  ? \"btn-latest-block-dark disabled-dark btn-first\"\r\n                  : \"btn disabled btn-first\"\r\n                : props.theme === \"dark\"\r\n                ? \"btn-latest-block-dark btn-first\"\r\n                : \"btn btn-first\"\r\n            }\r\n          >\r\n            First\r\n          </button>\r\n          <button\r\n            onClick={(event) => props._PrevPage(event)}\r\n            className={\r\n              props.state.from === 0\r\n                ? props.theme === \"dark\"\r\n                  ? \"btn-latest-block-dark disabled-dark btn-back\"\r\n                  : \"btn disabled btn-back\"\r\n                : props.theme === \"dark\"\r\n                ? \"btn-latest-block-dark  btn-back\"\r\n                : \"btn btn-back\"\r\n            }\r\n          >\r\n            <img className=\"rotate-180\" alt=\"back\" src={\"/images/next.svg\"} />{\" \"}\r\n          </button>\r\n          <button\r\n            className={\r\n              props.theme === \"dark\"\r\n                ? \"btn-latest-block-dark  btn-page\"\r\n                : \"btn btn-page\"\r\n            }\r\n          >\r\n            Page{\" \"}\r\n            {Math.round(state.totalTransaction / state.amount) +\r\n              1 -\r\n              Math.round(\r\n                (state.totalTransaction - state.from) / state.amount\r\n              )}{\" \"}\r\n            of {Math.round(state.totalTransaction / state.amount)}\r\n          </button>\r\n          <button\r\n            onClick={(event) => props._NextPage(event)}\r\n            className={\r\n              props.state.lastPage === false\r\n                ? props.state.from + props.state.amount ===\r\n                  props.state.totalTransaction\r\n                  ? props.theme === \"dark\"\r\n                    ? \"btn-latest-block-dark disabled-dark\"\r\n                    : \"btn disabled\"\r\n                  : props.theme === \"dark\"\r\n                  ? \"btn-latest-block-dark  btn-next\"\r\n                  : \"btn btn-next\"\r\n                : props.state.lastFrom - props.state.amount < 0\r\n                ? props.theme === \"dark\"\r\n                  ? \"btn-latest-block-dark disabled-dark\"\r\n                  : \"btn disabled\"\r\n                : props.theme === \"dark\"\r\n                ? \"btn-latest-block-dark  btn-next\"\r\n                : \"btn btn-next\"\r\n            }\r\n          >\r\n            <img alt=\"next\" src={\"/images/next.svg\"} />\r\n          </button>\r\n          <button\r\n            onClick={(event) => props._LastPage(event)}\r\n            className={\r\n              props.state.from + props.state.amount ===\r\n              props.state.totalTransaction\r\n                ? props.theme === \"dark\"\r\n                  ? \"btn-latest-block-dark disabled-dark\"\r\n                  : \"btn disabled\"\r\n                : props.theme === \"dark\"\r\n                ? \"btn-latest-block-dark  btn-last\"\r\n                : \"btn btn-last\"\r\n            }\r\n          >\r\n            Last\r\n          </button>\r\n        </Grid>\r\n        {/* </Pagination> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport BaseComponent from \"../baseComponent\";\r\nimport TransactionComponent from \"./transactionComponent\";\r\nimport Utils from \"../../utility\";\r\nimport { TransactionService } from \"../../services\";\r\nimport TokenSearchComponent from \"../explorer/tokensearchBar\";\r\nimport FooterComponent from \"../common/footerComponent\";\r\nimport { MethodFromByte, toolTipMessages } from \"../../constants\";\r\nimport socketClient from \"socket.io-client\";\r\nimport { withRouter } from \"react-router\";\r\nlet socket = socketClient(process.env.REACT_APP_WEB_SOCKECT_URL, {\r\n  transports: [\"websocket\"],\r\n});\r\n\r\nexport default class LatestTransactionList extends BaseComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      from: 0,\r\n      amount: 10,\r\n      sortKey: -1,\r\n      lastFrom: 0,\r\n      tableName: \"Latest Transactions\",\r\n      transactionList: [],\r\n      totalTransaction: 0,\r\n      isLoader: false,\r\n      hashAnimation: {},\r\n      isLoading: true,\r\n      isData: false,\r\n      lastPage: false,\r\n      pageParam: this.props?.match?.params?.pageNo,\r\n      tableColumns: {\r\n        // \"Transaction Hash\": {isActive: true, toolTipText: toolTipMessages.hashid},\r\n        Amount: { isActive: true, toolTipText: toolTipMessages.value },\r\n        Age: { isActive: true, toolTipText: toolTipMessages.age },\r\n        Date: { isActive: true, toolTipText: toolTipMessages.date },\r\n        // \"Date and Time\": {isActive: true},\r\n        Block: { isActive: true, toolTipText: toolTipMessages.blocknumber },\r\n        // \"From Address\": {isActive: true, toolTipText: toolTipMessages.from},\r\n        // \"To Address\": {isActive: true, toolTipText: toolTipMessages.to},\r\n      },\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.socket.off(\"block-socket\");\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getListOfTransactions();\r\n    await this.getTotalTransaction();\r\n    await this.socketData(socket);\r\n    // if(this.state.lastPage === false){\r\n    //   await this.setGetListOfTransactionsInterval();\r\n    // }\r\n  }\r\n\r\n  // async setGetListOfTransactionsInterval() {\r\n  //   setInterval(() => {\r\n  //     this.getListOfTransactions();\r\n  //   }, 90000);\r\n  // }\r\n\r\n  async getListOfTransactions(from, amount, sortKey) {\r\n    // debugger;\r\n    from = from || from === 0 ? from : this.state.from;\r\n    amount = amount ? amount : this.state.amount;\r\n    sortKey = sortKey ? sortKey : this.state.sortKey;\r\n    let urlPath = `?skip=${from}&limit=${amount}&sortKey=${sortKey}`;\r\n    let [error, listOfTransactions] = await Utils.parseResponse(\r\n      TransactionService.getLatestTransaction(urlPath, {})\r\n    );\r\n    if (error || !listOfTransactions)\r\n      return this.setState({ isLoader: false, isData: false });\r\n    listOfTransactions = listOfTransactions.map((item) => {\r\n      return {\r\n        ...item,\r\n        method: Utils.getMethodType(item),\r\n      };\r\n    });\r\n    this.setState({\r\n      transactionList: listOfTransactions,\r\n      isLoading: false,\r\n      isData: listOfTransactions.length > 0,\r\n    });\r\n  }\r\n\r\n  // async increment() {\r\n  //   setLoading(true);\r\n  //   let updatedCount = Number(count) + 1;\r\n  //   setcount(updatedCount);\r\n  //   window.history.pushState(\"\", \"\", `//${updatedCount}`);\r\n  //   getLatestaccount(updatedCount);\r\n  // }\r\n\r\n  // async decrement() {\r\n  //   setLoading(true);\r\n  //   let updatedCount = Number(count) - 1;\r\n  //   setcount(updatedCount);\r\n  //   window.history.pushState(\"\", \"\", `/block-details/${updatedCount}`);\r\n  //   getLatestaccount(updatedCount);\r\n  // }\r\n\r\n  async getTotalTransaction() {\r\n    let [error, total] = await Utils.parseResponse(\r\n      TransactionService.getTotalTransaction()\r\n    );\r\n\r\n    if (error || !total) return;\r\n    this.setState({ totalTransaction: total });\r\n  }\r\n\r\n  socketData(socket) {\r\n    socket.on(\"transaction-socket\", (transactionData, error) => {\r\n      // this.setState({ transactionSocketConnected: true })\r\n      transactionData[\"method\"] = Utils.getMethodType(transactionData);\r\n      let transactions = this.state.transactionList;\r\n\r\n      let transactionDataExist = transactions.findIndex((item) => {\r\n        return item.hash === transactionData.hash;\r\n      });\r\n\r\n      if (\r\n        transactionDataExist === -1 &&\r\n        this.state.from === 0 &&\r\n        this.state.lastPage === false\r\n      ) {\r\n        if (transactions.length >= 10) transactions.pop();\r\n        transactions.unshift(transactionData);\r\n        let hashAnimationClass = {\r\n          [transactionData.hash]: \"first-block-details\",\r\n        };\r\n        this.setState({ hashAnimation: hashAnimationClass });\r\n        setTimeout(() => {\r\n          this.setState({ hashAnimation: {} });\r\n        }, 800);\r\n        this.setState({\r\n          transactionList: transactions,\r\n          isData: transactions.length > 0,\r\n        });\r\n\r\n        if (error) {\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _handleChange = (event) => {\r\n    this.setState({ amount: event.target.value });\r\n    if (this.state.lastPage === true) {\r\n      this.getListOfTransactions(this.state.lastFrom, event.target.value, 1);\r\n    } else {\r\n      this.getListOfTransactions(this.state.from, event.target.value, -1);\r\n    }\r\n  };\r\n\r\n  // _handleChange = (value, name) => {\r\n  //     this.setState({ [name]: value })\r\n\r\n  // }\r\n\r\n  _FirstPage = (event) => {\r\n    this.setState({ from: 0 });\r\n    this.setState({ lastPage: false });\r\n    this.getListOfTransactions(0, this.state.amount, -1);\r\n  };\r\n  _LastPage = (event) => {\r\n    let from = this.state.totalTransaction - this.state.amount;\r\n    this.setState({ from });\r\n    this.setState({ sortKey: 1 });\r\n    this.setState({ lastFrom: 0 });\r\n    let lastFrom = 0;\r\n    this.getListOfTransactions(lastFrom, this.state.amount, 1);\r\n    this.setState({ lastPage: true });\r\n  };\r\n  _NextPage = async (event) => {\r\n    let from = +this.state.amount + +this.state.from;\r\n    this.setState({ from });\r\n    if (this.state.lastPage === true) {\r\n      if (this.state.lastFrom - this.state.amount >= 0) {\r\n        let from = this.state.lastFrom - this.state.amount;\r\n        this.setState({ lastFrom: from });\r\n        this.getListOfTransactions(from, this.state.amount, 1);\r\n      }\r\n    } else {\r\n      if (+this.state.amount + +this.state.from < this.state.totalTransaction) {\r\n        let from = +this.state.amount + +this.state.from;\r\n        this.setState({ from });\r\n        this.setState({ sortKey: -1 });\r\n        this.getListOfTransactions(from, this.state.amount, -1);\r\n      }\r\n    }\r\n  };\r\n  _PrevPage = (event) => {\r\n    let from = this.state.from - this.state.amount;\r\n    this.setState({ from });\r\n    if (this.state.lastPage === true) {\r\n      let from = +this.state.amount + +this.state.lastFrom;\r\n      this.setState({ lastFrom: from });\r\n      this.getListOfTransactions(from, this.state.amount, 1);\r\n    } else {\r\n      if (this.state.from - this.state.amount >= 0) {\r\n        let from = this.state.from - this.state.amount;\r\n        this.setState({ from });\r\n        this.getListOfTransactions(from, this.state.amount, -1);\r\n      }\r\n    }\r\n  };\r\n\r\n  create_data(hash, amount, age, block, from, to, txnfee) {\r\n    return { hash, amount, age, block, from, to, txnfee };\r\n  }\r\n\r\n  shorten(b, amountL = 10, amountR = 3, stars = 3) {\r\n    return `${b?.slice(0, amountL)}${\".\".repeat(stars)}${b?.slice(\r\n      b?.length - 3,\r\n      b?.length\r\n    )}`;\r\n  }\r\n\r\n  create_url(item, type) {\r\n    // Thisn is to create URL for table items. changing it can affect whole table.\r\n    if (!item || !item.length) {\r\n      return \"...\";\r\n    }\r\n    return `#${item}-#{type}`;\r\n  }\r\n\r\n  toggleTableColumns = (columnName) => {\r\n    const columns = this.state.tableColumns;\r\n    columns[columnName].isActive = !columns[columnName].isActive;\r\n    this.setState({ tableColumns: columns });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.theme === \"dark\" ? \"dark-theme-bg\" : \"\"}>\r\n        <TransactionComponent\r\n          create_data={this.create_data}\r\n          toggleTableColumns={this.toggleTableColumns}\r\n          state={this.state}\r\n          shorten={this.shorten}\r\n          create_url={this.create_url}\r\n          _PrevPage={this._PrevPage}\r\n          _NextPage={this._NextPage}\r\n          _LastPage={this._LastPage}\r\n          _FirstPage={this._FirstPage}\r\n          _handleChange={this._handleChange}\r\n          theme={this.props.theme}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import BaseComponent from \"../baseComponent\";\r\nimport React from \"react\";\r\nimport FooterComponent from \"../common/index\";\r\nimport TokenSearchComponent from \"../explorer/tokensearchBar\";\r\nimport TransactionComponent from \"./mainComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport { dispatchAction } from \"../../utility\"\r\n\r\nclass TransactionListMainComponent extends BaseComponent {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TokenSearchComponent theme={this.props.theme.currentTheme}/>\r\n        <TransactionComponent theme={this.props.theme.currentTheme}/>\r\n        <FooterComponent />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { theme: state.theme };\r\n};\r\nexport default connect(mapStateToProps, { dispatchAction })(TransactionListMainComponent);","module.exports = __webpack_public_path__ + \"static/media/XDC-Alert.86b69beb.svg\";","import Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  dropdownStyle: {\r\n    background: '#283966 !important',\r\n    color: \"#ffffff !important\",\r\n  }\r\n});\r\n\r\nconst PageSelect = styled(Select)`\r\n  width: 100%;\r\n  height: ${({ height }) => height}px;\r\n  margin: 0 10px;\r\n\r\n  legend {\r\n    float: left;\r\n  }\r\n`;\r\nconst PageSelectDark = styled(Select)`\r\n  width: 100%;\r\n  height: ${({ height }) => height}px;\r\n  margin: 0 10px;\r\n  background-color: #283966;\r\n  border: solid 1px #3552a5;\r\n  legend {\r\n    float: left;\r\n  }\r\n`;\r\nconst PageSelector = ({ value, handler, height = 35, theme }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      {theme === \"dark\" ? (\r\n        <PageSelectDark\r\n          value={value}\r\n          onChange={(event) => handler(event)}\r\n          displayEmpty\r\n          height={height}\r\n          MenuProps={{ classes: { paper: classes.dropdownStyle } }}\r\n        >\r\n          <MenuItem disabled value=\"\">\r\n            <em>Select</em>\r\n          </MenuItem>\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={25}>25</MenuItem>\r\n          <MenuItem value={50}>50</MenuItem>\r\n          <MenuItem value={75}>75</MenuItem>\r\n          <MenuItem value={100}>100</MenuItem>\r\n        </PageSelectDark>\r\n      ) : (\r\n        <PageSelect\r\n          value={value}\r\n          onChange={(event) => handler(event)}\r\n          displayEmpty\r\n          height={height}\r\n        >\r\n          <MenuItem disabled value=\"\">\r\n            <em>Select</em>\r\n          </MenuItem>\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={25}>25</MenuItem>\r\n          <MenuItem value={50}>50</MenuItem>\r\n          <MenuItem value={75}>75</MenuItem>\r\n          <MenuItem value={100}>100</MenuItem>\r\n        </PageSelect>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default PageSelector;\r\n","import React, { useState } from \"react\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { SettingsInputComponentTwoTone } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paperWidthSm: {\r\n    maxWidth: \"320px\",\r\n    width: \"100%\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  customTooltip: {\r\n    fontSize: \"13px\",\r\n  },\r\n  customTooltipDarkMode: {\r\n    background: \"#051440\",\r\n    color: \"#adc4e4\",\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\nfunction ConfigureColumnsPopOver(props) {\r\n  const classes = useStyles();\r\n  const [openTT, setOpenTT] = useState(false);\r\n  const [keyValue, setKeyValue] = useState(\"\");\r\n\r\n  const handleOpenTT = (key) => {\r\n    setKeyValue(key);\r\n    setOpenTT(true);\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      classes={{ paperWidthSm: classes.paperWidthSm }}\r\n      open={props.isOpen}\r\n      anchorEl={props.anchorEl}\r\n      onClose={props.handleOnClose}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n    >\r\n      <div\r\n        className={props.theme === \"dark\" ? \"w-320 table-btn-bg-dark\" : \"w-320\"}\r\n      >\r\n        <div\r\n          className={\r\n            props.theme === \"dark\"\r\n              ? \"fs-16 fw-bold p-t-15 p-b-15 display-flex justify-content-center fc-white\"\r\n              : \"fs-16 fw-bold p-t-15 p-b-15 display-flex justify-content-center\"\r\n          }\r\n        >\r\n          Configure Columns\r\n        </div>\r\n        <div className=\"margin-0 m-b-15 b-t-1\" />\r\n        <div className=\"p-l-15 p-r-15\">\r\n          {props.tableColumns &&\r\n            Object.keys(props.tableColumns).map((key) => {\r\n              if (key !== \"Balance\")\r\n                return (\r\n                  <div className=\"display-flex justify-content-between p-b-25\">\r\n                    <div className=\"display-flex\">\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          align=\"right\"\r\n                          title={props.tableColumns[key].toolTipText}\r\n                          placement=\"top\"\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"tooltipInfoIconConfigDesk\"\r\n                            src=\"/images/info.svg\"\r\n                          ></img>\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          open={openTT && key === keyValue}\r\n                          onOpen={() => setOpenTT(true)}\r\n                          onClose={() => setOpenTT(false)}\r\n                          align=\"right\"\r\n                          title={props.tableColumns[key].toolTipText}\r\n                          placement=\"top\"\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"tooltipInfoIconConfigDesk\"\r\n                            src=\"/images/info.svg\"\r\n                            onClick={() => handleOpenTT(key)}\r\n                          ></img>\r\n                        </Tooltip>\r\n                      )}\r\n                      <div\r\n                        className={\r\n                          props.theme === \"dark\" ? \"p-l-5 fc-white\" : \"p-l-5\"\r\n                        }\r\n                      >\r\n                        {key}\r\n                      </div>\r\n                    </div>\r\n                    <div onClick={() => props.toggleTableColumns(key)}>\r\n                      {props.tableColumns[key].isActive ? (\r\n                        <img className=\"\" src=\"/images/active-switch.svg\" />\r\n                      ) : (\r\n                        <img className=\"\" src=\"/images/inactive-switch.svg\" />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n            })}\r\n        </div>\r\n      </div>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default ConfigureColumnsPopOver;\r\n","import React, { useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paperWidthSm: {\r\n    maxWidth: \"320px\",\r\n    width: \"100%\",\r\n    borderRadius: \"8px\",\r\n    margin: \"20px\",\r\n  },\r\n  customTooltip: {\r\n    fontSize: \"13px\",\r\n  },\r\n  customTooltipDarkMode: {\r\n    background: \"#051440\",\r\n    color: \"#adc4e4\",\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nfunction ConfigureColumnsModal(props) {\r\n  const classes = useStyles();\r\n  const [openTT, setOpenTT] = useState(false);\r\n  const [keyValue, setKeyValue] = useState(\"\");\r\n\r\n  const handleOpenTT = (key) => {\r\n    setKeyValue(key);\r\n    setOpenTT(true);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      className=\"\"\r\n      classes={{ paperWidthSm: classes.paperWidthSm }}\r\n      open={props.isOpen}\r\n      onClose={props.onModalClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <div\r\n        className={props.theme === \"dark\" ? \"w-320 table-btn-bg-dark\" : \"w-320\"}\r\n      >\r\n        <div\r\n          className={\r\n            props.theme\r\n              ? \"fs-14 fw-bold p-t-15 p-b-15 display-flex justify-content-center fc-white\"\r\n              : \"fs-14 fw-bold p-t-15 p-b-15 display-flex justify-content-center\"\r\n          }\r\n        >\r\n          Configure Columns\r\n        </div>\r\n        <div className=\"margin-0 m-b-15 b-t-1\" />\r\n        <div className=\"p-l-15 p-r-15\">\r\n          {props.tableColumns &&\r\n            Object.keys(props.tableColumns).map((key) => {\r\n              if (key !== \"Balance\")\r\n                return (\r\n                  <div className=\"display-flex justify-content-between p-b-25\">\r\n                    <div className=\"display-flex\">\r\n                      {window.innerWidth > 1024 ? (\r\n                        <Tooltip\r\n                          align=\"right\"\r\n                          title={props.tableColumns[key].toolTipText}\r\n                          placement=\"top\"\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          {console.log(\"value\", props.tableColumns[key])}\r\n                          <img\r\n                            className=\"tooltipInfoIconConfigMob\"\r\n                            src=\"/images/info.svg\"\r\n                          ></img>\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <Tooltip\r\n                          open={openTT && key === keyValue}\r\n                          onOpen={() => setOpenTT(true)}\r\n                          onClose={() => setOpenTT(false)}\r\n                          align=\"right\"\r\n                          title={props.tableColumns[key].toolTipText}\r\n                          placement=\"top\"\r\n                          classes={{\r\n                            tooltip:\r\n                              props.theme === \"dark\"\r\n                                ? classes.customTooltipDarkMode\r\n                                : classes.customTooltip,\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"tooltipInfoIconConfigMob\"\r\n                            src=\"/images/info.svg\"\r\n                            onClick={() => handleOpenTT(key)}\r\n                          ></img>\r\n                        </Tooltip>\r\n                      )}\r\n                      <div\r\n                        className={props.theme ? \"p-l-12 fc-white\" : \"p-l-12\"}\r\n                      >\r\n                        {key}\r\n                      </div>\r\n                    </div>\r\n                    <div onClick={() => props.toggleTableColumns(key)}>\r\n                      {props.tableColumns[key].isActive ? (\r\n                        <img className=\"\" src=\"/images/active-switch.svg\" />\r\n                      ) : (\r\n                        <img className=\"\" src=\"/images/inactive-switch.svg\" />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n            })}\r\n        </div>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default ConfigureColumnsModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nimport \"tippy.js/dist/tippy.css\";\r\nimport \"tippy.js/themes/light.css\";\r\nimport { TransactionService } from \"../../services\";\r\nimport Utils from \"../../utility\";\r\nimport format from \"format-number\";\r\nimport { toolTipMessages } from \"../../constants\";\r\nimport Loader from \"../../assets/loader\";\r\n\r\nfunction TransactionDetailTooltip(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [transactionHash, setTransactionHash] = useState(0);\r\n  const [transactions, setTransactionDetail] = useState(0);\r\n  const [price, setPrice] = useState(0);\r\n  const [timeStamp, setTimeStamp] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  let CurrencyValue = window.localStorage.getItem(\"currency\");\r\n  let menuRef = useRef();\r\n\r\n  const openTootltip = () => {\r\n    if (props.transactionAddress !== undefined) {\r\n      setTransactionHash(0);\r\n      setTransactionHash(props.transactionAddress);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", (event) => {\r\n      if (!menuRef?.current?.contains(event.target)) {\r\n        setOpen(false);\r\n      }\r\n    });\r\n    if (transactionHash !== 0) {\r\n      transactionDetail();\r\n    }\r\n    if (timeStamp !== 0) {\r\n      getCoinMarketDetailForTransaction();\r\n    }\r\n  }, [transactionHash, timeStamp, CurrencyValue]);\r\n\r\n  const transactionDetail = async () => {\r\n    let urlPath = `${transactionHash}`;\r\n    let [error, transactiondetailusinghash] = await Utils.parseResponse(\r\n      TransactionService.getTransactionDetailsUsingHash(urlPath, {})\r\n    );\r\n    if (error || !transactiondetailusinghash) return;\r\n    setTransactionDetail(transactiondetailusinghash);\r\n    setTimeStamp(transactiondetailusinghash?.timestamp);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const getCoinMarketDetailForTransaction = async () => {\r\n    let urlPath =\r\n      \"?transactionTime=\" + timeStamp + \"&fiatValue=\" + CurrencyValue;\r\n    let [error, transactiondetailusinghash] = await Utils.parseResponse(\r\n      TransactionService.getCoinMarketDetailForTransaction(urlPath, {})\r\n    );\r\n    if (error || !transactiondetailusinghash) return;\r\n    setPrice(transactiondetailusinghash[0]?.price);\r\n  };\r\n\r\n  const currencySymbol =\r\n    CurrencyValue === \"INR\" ? \"₹\" : CurrencyValue === \"USD\" ? \"$\" : \"€\";\r\n  const valueFetch =\r\n    CurrencyValue === \"INR\" ? price : CurrencyValue === \"USD\" ? price : price;\r\n  const valueDiv = !valueFetch\r\n    ? 0\r\n    : Utils.decimalDivison(valueFetch * transactions.value, 8);\r\n  const ValueMain = !transactions?.value\r\n    ? 0\r\n    : Utils.decimalDivison(transactions?.value, 8);\r\n  const txfee = !transactions\r\n    ? 0\r\n    : Utils.decimalDivison(transactions?.gasPrice * transactions?.gasUsed, 8);\r\n\r\n  const transactionFetch =\r\n    CurrencyValue === \"INR\"\r\n      ? txfee * price\r\n      : CurrencyValue === \"USD\"\r\n      ? txfee * price\r\n      : txfee * price;\r\n  const fetchtxn = !transactionFetch\r\n    ? 0\r\n    : parseFloat(transactionFetch)?.toFixed(8);\r\n\r\n  const gasP = !transactions.gasPrice\r\n    ? 0\r\n    : Utils.decimalDivison(transactions.gasPrice, 12);\r\n\r\n  return (\r\n    <div>\r\n      <Tippy\r\n        trigger=\"click\"\r\n        theme={\"light\"}\r\n        interactive={true}\r\n        placement={window.innerWidth > 768 ? \"right\" : \"bottom\"}\r\n        offset={[0, 0]}\r\n        content={\r\n          <div ref={menuRef} className={\"transaction-detail-tooltip\"}>\r\n            {isLoading == true ? (\r\n              <div className=\"tooltip-loader-div\">\r\n                <Loader />\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <p className=\"fs-14 additional-details\">Additional Details</p>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"right\" content={\"Status of the transaction.\"}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>\r\n                  <div className=\"detail-heading\">Status</div>\r\n                </div>\r\n                {transactions && transactions.status == true ? (\r\n                  <div className=\"success-text\">Success</div>\r\n                ) : (\r\n                  <div className=\"failed-text\">Failed</div>\r\n                )}\r\n                <hr className=\"line-detail-tooltip\"></hr>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"left\" content={toolTipMessages.value}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>{\" \"}\r\n                  <div className=\"detail-heading\">Value</div>\r\n                </div>\r\n                <div className=\"detail-heading-text\">\r\n                  {ValueMain}&nbsp; XDC ({currencySymbol}\r\n                  {valueDiv})\r\n                </div>\r\n                <hr className=\"line-detail-tooltip\"></hr>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"left\" content={toolTipMessages.txnfee}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>{\" \"}\r\n                  <div className=\"detail-heading\">Txn Free</div>\r\n                </div>\r\n                <div className=\"detail-heading-text\">\r\n                  {txfee == 0\r\n                    ? 0\r\n                    : parseFloat(txfee)?.toFixed(8).replace(/0+$/, \"\")}{\" \"}\r\n                  XDC ({currencySymbol}\r\n                  {fetchtxn})\r\n                </div>\r\n                <hr className=\"line-detail-tooltip\"></hr>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"left\" content={toolTipMessages.gasprovided}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>{\" \"}\r\n                  <div className=\"detail-heading\">Gas Provided</div>\r\n                </div>\r\n                <div className=\"detail-heading-text\">\r\n                  {format({})(transactions.gas)}\r\n                </div>\r\n                <hr className=\"line-detail-tooltip\"></hr>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"left\" content={toolTipMessages.gasprice}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>{\" \"}\r\n                  <div className=\"detail-heading\">Avg Transaction Fee</div>\r\n                </div>\r\n                <div className=\"detail-heading-text\">\r\n                  {gasP == 0\r\n                    ? 0\r\n                    : parseFloat(gasP)?.toFixed(12).replace(/0+$/, \"\")}\r\n                </div>\r\n                <hr className=\"line-detail-tooltip\"></hr>\r\n                <div className=\"display-flex\">\r\n                  <Tippy align=\"left\" content={toolTipMessages.nounced}>\r\n                    <img\r\n                      className=\"w-14-px h-14 m-r-10\"\r\n                      src=\"/images/question_mark_tooltip.svg\"\r\n                    ></img>\r\n                  </Tippy>{\" \"}\r\n                  <div className=\"detail-heading\">Nonce</div>\r\n                </div>\r\n                <div className=\"detail-heading-text\">{transactions?.nonce}</div>\r\n                <div className=\"tooltip-link-div\">\r\n                  <div>\r\n                    <a\r\n                      href={\"/transaction-details/\" + transactionHash}\r\n                      className=\"tooltip-link\"\r\n                    >\r\n                      Transaction Details\r\n                    </a>\r\n                  </div>\r\n                  <div>\r\n                    <a\r\n                      href={\"/transaction-details/\" + transactionHash}\r\n                      className=\"tooltip-link\"\r\n                    >\r\n                      <img className={\"show-arrow\"} src={\"/images/arrow.svg\"} />\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        }\r\n      >\r\n        <button\r\n          onClick={() => setOpen(true)}\r\n          className={open ? \"eye-button\" : \"eye-button-inactive\"}\r\n        >\r\n          <img\r\n            className={\"show-tooltip\"}\r\n            src={open ? \"/images/show-icon-white.svg\" : \"/images/show-icon.svg\"}\r\n            onClick={openTootltip}\r\n          />\r\n        </button>\r\n      </Tippy>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionDetailTooltip;\r\n","import React from \"react\";\r\nimport BaseComponent from \"../baseComponent\";\r\nimport Footer from \"./footerComponent\"\r\nimport { connect } from \"react-redux\";\r\nimport { dispatchAction } from \"../../utility\";\r\nimport { eventConstants } from \"../../constants\"\r\n\r\n\r\n\r\nclass FooterComponent extends BaseComponent {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <Footer\r\n                    _handleChange={this.props._handleChange}\r\n                    theme={this.props.theme.currentTheme}\r\n                />\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { theme: state.theme };\r\n};\r\n\r\nexport default connect(mapStateToProps, { dispatchAction })(FooterComponent);"],"sourceRoot":""}