{"version":3,"sources":["modules/Transfertransactiondetails/transferTransactionDetails.js","services/token.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","marginRight","marginLeft","marginBottom","width","paddingLeft","paddingRight","rowDiv","alignItems","height","background","borderRadius","justifyContent","mainContainer","TransferTransaction","_handleChange","classes","window","innerWidth","decimalValue","CurrencyValue","localStorage","getItem","address","useParams","useState","transactions","setTransactions","latestBlocks","setLatestBlocks","coinmarketcap","setCoinmarketcap","amount","setAmount","copiedText","setCopiedText","isLoading","setLoading","tokenTransferValue","setTokenTransferValue","isSeeMore","setSeeMore","useEffect","transferTransactionDetail","getLatestBlocks","getcoinMarketCapData","a","urlPath","Utils","parseResponse","coinMarketService","getCoinMarketData","error","coinMarket","BlockService","getLatestBlock","latestBlock","number","TokenData","getTransferTransactionDetailsUsingHash","transactiondetailusinghash","setFromAddress","from","setToAddress","to","undefined","decimals","Math","pow","parseInt","value","transferToken","currencySymbol","valueFetch","price","transactionFetch","transactionFeeINR","transactionFeeUSD","transactionFeeEUR","txfee","toFixed","gasPrice","decimalDivison","gasUsed","gasP","avgTxnFeeConverted","avgTxnFeeFetch","parseFloat","avgTxnFeeFetch1","toString","split","avgTxnFeeFetch2","userInfo","sessionManager","getDataFromCookies","React","dialogPvtTagIsOpen","setDialogPvtTagIsOpen","dialogValue","setDailogValue","dialogValue2","setDailogValue2","dialogPvtTagIsOpen2","setDialogPvtTagIsOpen2","dialogPvtNoteIsOpen","setDialogPvtNoteIsOpen","loginDialogIsOpen","setLoginDialogIsOpen","fromAddress","toAddress","privateNote","setPrivateNote","openDialogPvtTag","scrollTo","closeDialogPvtTag","openDialogPvtTag2","closeDialogPvtTag2","privateNoteUsingHash","data","transactionHash","userId","transactionLabel","cookiesConstants","USER_TRASACTION_LABELS","JSON","parse","length","existingTransactionLabel","find","item","addrTagFrom","addrTagTo","taggedAddress","USER_TAGGED_ADDRESS","tags","tagValueFrom","filter","obj","sub","tagValueTo","pvtNotehash","pvtNoteLocal","pvtNote","pvtNoteValue","className","Container","Heading","Div","status","StatusContainer","StatusContainerInside","StatusImgContainer","StatusImg","src","StatusTextSuccess","StatusTextFailed","TxnDetailsRightContainer","TxnDetailsRightTopContainer","align","title","ImageView","Hash","DetailsMiddleContainer","isTextArea","ContentHash","text","onCopy","placement","TxnDetailsRightBottomContainer","DetailsContainer","transactionValue","timestamp","isNaN","Number","moment","utc","format","Content","href","blockNumber","BlockConfirmation","DivMiddleContainer","DivMiddle","style","display","TabTag","open","onClose","fromAddr","hash","Tag","tagName","AddTagContainer","onClick","ImgAddTag","AddTagtext","MobileDesktopTag","DivCircle","ImgNextArrow","contractAddress","toAddr","Div__","Spacing","MiddleContainer","gas","color","ContentInteractedWith","contract","nonce","SpacingInputData","ImageViewInputData","HashInputData","MiddleContainerInputData","readOnly","input","SeeMoreContainer","SeeMoreText","ImgSeeLess","ImgSeeMore","SpacingPrivateNode","MiddleContainerPrivateNote","trxLable","AddLabel","AddLabelText","getListOfTxnLabel","getTotalCountTxnLabel","require","PrivateText","dataHashOrAddress","cursor","event","target","setItem","currency","styled","div","textarea","p","props","span","img","getHeaders","httpConstants","CONTENT_TYPE","APPLICATION_JSON","process","url","httpService","METHOD_TYPE","GET","then","response","success","responseCode","responseData","Promise","resolve","reject","catch","err","API_END_POINT","GET_TOKEN_LIST","POST","path","ceil","pageNum","perpage","searchkey","addr","searchValue","startDate","CoinMarketExchangeForToken","getTokenLists","getTotalToken","getSomeDaysHolders","getTokenSearch","getHolderDetailsUsingAddressforToken","getTotalTransferTransactionsForToken","getListOfTransferTransactionsForToken","getListOfHoldersForToken"],"mappings":"2kBAuBMA,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,YAEVC,YAAa,OAEbC,WAAY,OACZC,aAAc,OAEdC,MAAO,OAEP,iDAAkD,CAChDJ,SAAU,YACVK,YAAa,MACbC,aAAc,OAEhB,oDAAqD,CAEnDN,SAAU,YAGdO,OAAQ,CACNH,MAAO,OACPI,WAAY,SACZC,OAAQ,OACRC,WAAY,sCACZC,aAAc,MAEdC,eAAgB,iBAGlBC,cAAe,CACbT,MAAO,YAII,SAASU,GAAT,KAA+BC,cAA/B,mBAAiD,IAAD,YACvDC,EAAUpB,KAOhB,IAAMQ,EAAQa,OAAOC,WAEjBC,EAAe,EAEfC,EAAgBH,OAAOI,aAAaC,QAAQ,YACxCC,EAAYC,eAAZD,QACR,EAAwCE,qBAAS,GAAjD,oBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,oBAAS,GAAjD,oBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0CJ,oBAAS,IAAnD,oBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA4BN,oBAAS,IAArC,oBAAOO,EAAP,KAAeC,EAAf,KACA,EAAoCR,oBAAS,IAA7C,oBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAgCV,qBAAS,GAAzC,oBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAoDZ,oBAAS,GAA7D,oBAAOa,EAAP,KAA2BC,EAA3B,KACA,EAAgCd,qBAAS,GAAzC,oBAAOe,EAAP,KAAkBC,EAAlB,KACAC,sBAAU,WACRC,IACAC,IACAC,MACC,CAACb,IAEJ,IAAMa,EAAoB,yCAAG,qCAAAC,EAAA,6DACvBC,EADuB,UACV3B,GADU,SAEK4B,KAAMC,cACpCC,KAAkBC,kBAAkBJ,EAAS,KAHpB,uCAEtBK,EAFsB,KAEfC,EAFe,MAKvBD,GAAUC,EALa,iDAM3BtB,EAAiBsB,EAAW,IAND,4CAAH,qDASpBT,EAAe,yCAAG,mCAAAE,EAAA,4DACR,kBADQ,SAEWE,KAAMC,cACrCK,KAAaC,eAFD,kBAEyB,KAHjB,uCAEjBH,EAFiB,KAEVI,EAFU,MAKlBJ,GAAUI,EALQ,iDAMtB3B,EAAgB2B,EAAY,GAAGC,QANT,4CAAH,qDAUfd,EAAyB,yCAAG,qCAAAG,EAAA,6DAC5BC,EAD4B,WACdxB,GADc,SAEgByB,KAAMC,cACpDS,KAAUC,uCAAuCZ,EAAS,KAH5B,uCAE3BK,EAF2B,KAEpBQ,EAFoB,MAK5BR,GAAUQ,EALkB,iDAMhCjC,EAAgBiC,GAChBC,GAAeD,EAA2BE,MAC1CC,GAAaH,EAA2BI,IACxC3B,GAAW,QACiC4B,IAAxCL,EAA2BM,WAC7B/C,EAAegD,KAAKC,IAAI,GAAIR,EAA2BM,UACvD3B,EAAsB8B,SAASA,SAAST,EAA2BU,OAASnD,KAE/DyC,EAA2BH,OAdV,4CAAH,qDA6BzBc,EAAa,0JASnB,IAAMC,EAAmC,QAAlBpD,EAA0B,UAAyB,QAAlBA,EAA0B,KAAO,UACnFqD,EAAa3C,EAAc4C,MAE3BC,EAAqC,QAAlBvD,EAA0BM,EAAakD,kBAAsC,QAAlBxD,EAA0BM,EAAamD,kBAAoBnD,EAAaoD,kBAKxJC,GAHcJ,IAAwBA,EAAmB,MAAqBK,QAAQ,IAG7EtD,EAAauD,SAAejC,KAAMkC,eAAexD,EAAauD,SAAU,GAAhD,GACrCF,GAAgBrD,EAAayD,QAG7B,IAAMC,EAAQ1D,EAAauD,SAAejC,KAAMkC,eAAexD,EAAauD,SAAU,GAAhD,EAChCI,GAEAD,EAAOtD,EAAc4C,MAIrBY,GAAkBD,GAAD,UAEnBE,WAAWF,WAFQ,aAEnB,EAAgCL,QAAQ,IADxC,EAEAQ,GAAkBF,GAAeG,WAAWC,MAAM,KAAK,GACvDC,GAAkBL,GAAeG,WAAWC,MAAM,KAAK,GAKrDE,IAFYnB,GAAiBzB,KAAMkC,eAAeT,EAAY,GAEnDoB,KAAeC,mBAAmB,aACnD,GAAoDC,KAAMtE,UAAS,GAAnE,sBAAOuE,GAAP,MAA2BC,GAA3B,MACA,GAAsCF,KAAMtE,SAAS,GAArD,sBAAOyE,GAAP,MAAoBC,GAApB,MACA,GAAwCJ,KAAMtE,SAAS,GAAvD,sBAAO2E,GAAP,MAAqBC,GAArB,MACA,GAAsDN,KAAMtE,UAAS,GAArE,sBAAO6E,GAAP,MAA4BC,GAA5B,MACA,GAAsDR,KAAMtE,UAAS,GAArE,sBAAO+E,GAAP,MAA4BC,GAA5B,MACA,GAAkDV,KAAMtE,UAAS,GAAjE,sBAAOiF,GAAP,MAA0BC,GAA1B,MACA,GAAsClF,oBAAS,IAA/C,sBAAOmF,GAAP,MAAoB/C,GAApB,MACA,GAAkCpC,oBAAS,IAA3C,sBAAOoF,GAAP,MAAkB9C,GAAlB,MACA,GAAsCtC,oBAAS,IAA/C,sBAAOqF,GAAP,MAAoBC,GAApB,MAEMC,GAAmB,WACvB/F,OAAOgG,SAAS,EAAG,GACnBhB,IAAsB,GACtBE,GAAe,IAEXe,GAAoB,WACxBjB,IAAsB,GACtBE,GAAe,IAEXgB,GAAoB,WACxBlG,OAAOgG,SAAS,EAAG,GACnBV,IAAuB,GACvBF,GAAgB,IAEZe,GAAqB,WACzBb,IAAuB,GACvBF,GAAgB,IAaZgB,GAAoB,yCAAG,iCAAAvE,EAAA,yDACrBwE,EAAO,CACXC,gBAAgB,GAAD,OAAKhG,GACpBiG,OAAQ3B,KAAeC,mBAAmB,WAExC2B,EAAmBpG,aAAaC,QAClCgG,EAAKE,OAASE,KAAiBC,yBAEjCF,EAAmBG,KAAKC,MAAMJ,KACJA,EAAiBK,OAThB,kDAWrBC,EAA2BN,EAAiBO,MAChD,SAACC,GAAD,OACEA,EAAKV,iBAAmBD,EAAKC,iBAC7BU,EAAKT,QAAUF,EAAKE,YAGtBT,GAAegB,GAjBU,2CAAH,qDAyBtBG,GAActB,GACduB,GAAYtB,GAEZuB,GAAgB/G,aAAaC,QAC/BuE,KAAeC,mBAAmB,UAChC4B,KAAiBW,qBAEjBC,GACFF,IAAiBA,GAAcN,OAAS,EAAIF,KAAKC,MAAMO,IAAiB,GACtEG,GACFD,IAAQA,GAAKR,OAAS,EAAtB,OACIQ,SADJ,IACIA,QADJ,EACIA,GAAME,QACJ,SAACC,GAAD,OAASA,EAAIlH,UAAY2G,IAAeO,EAAIjB,SAAW5B,GAAS8C,OAElE,GACFC,GACFL,IAAQA,GAAKR,OAAS,EAAtB,OACIQ,SADJ,IACIA,QADJ,EACIA,GAAME,QACJ,SAACC,GAAD,OAASA,EAAIlH,UAAY4G,IAAaM,EAAIjB,SAAW5B,GAAS8C,OAEhE,GAIFE,GAAW,UAAMrH,GACjBsH,GAAexH,aAAaC,QAC9BoG,KAAiBC,wBAGfmB,GACFD,IAAgBA,GAAaf,OAAS,EAAIF,KAAKC,MAAMgB,IAAgB,GACnEE,GACFD,IAAWA,GAAQhB,OAAS,EAA5B,OACIgB,SADJ,IACIA,QADJ,EACIA,GAASN,QACP,SAACC,GAAD,OACEA,EAAIlB,kBAAoBqB,IAAeH,EAAIjB,SAAW5B,GAAS8C,OAEnE,GAGN,OACE,0BAAKM,UAAWhI,EAAQH,eACtB,mBAAC,KAAD,MACA,0BAAKmI,UAAWhI,EAAQjB,MACtB,mBAAC,KAAD,KACE,0BAAKiJ,WAAyB,IAAd5G,EAAqB,eAAiB,IACpD,0BAAK4G,WAAyB,IAAd5G,EAAqB,aAAe,IAClD,mBAAC6G,GAAD,KACE,mBAACC,GAAD,6BAGF,mBAACC,GAAD,KACCzH,EAC0B,GAAvBA,EAAa0H,OACX,mBAACC,GAAD,KACE,mBAACC,GAAD,KACE,mBAACC,GAAD,KACE,mBAACC,GAAD,CAAWC,IAAI,yBAEjB,mBAACC,GAAD,kBAIJ,mBAACL,GAAD,KACE,mBAACE,GAAD,KACE,mBAACC,GAAD,CAAWC,IAAI,wBAEjB,mBAACE,GAAD,gBAGF,KACJ,mBAACC,GAAD,KACE,mBAACC,GAAD,KACE,mBAACZ,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MA5L/B,gHA6LU,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,0BAEF,mBAACC,GAAD,CAAwBC,YAAY,GAClC,mBAACC,GAAD,KACG7I,GAEH,2BACEyH,UACE5I,GAAS,IACL,qBACA,2BAGN,mBAAC,mBAAD,CACEiK,KAAM9I,EACN+I,OAAQ,kBAAMnI,EAAcZ,KAE5B,mBAAC,KAAD,CACEwI,MACE7H,IAAeX,EACX,SACA,oBAENgJ,UAAU,OAEV,6BACEvB,UACE5I,EAAQ,KACJ,sBACA,6BAGN,0BACE4I,UACE5I,EAAQ,KACJ,YACAA,EAAQ,IACR,qBACA,eAENqJ,IAAK,gCAQnB,mBAACe,GAAD,KACE,mBAACC,GAAD,KACE,mBAACxB,GAAD,KACE,mBAAC,KAAD,CAASc,MA9OpB,2JA+Oa,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,2BAEF,mBAAC,KAAD,CAASF,MAAK,OAAErI,QAAF,IAAEA,OAAF,EAAEA,EAAc4C,OAC5B,mBAAC4F,GAAD,CAAwBC,YAAY,IACjC,OAACzI,QAAD,IAACA,OAAD,EAACA,EAAcgJ,kBAEZ1H,KAAMkC,eAAN,OAAqBxD,QAArB,IAAqBA,OAArB,EAAqBA,EAAcgJ,iBAAkB,GADrD,EACyD,IAH/D,QAIUlG,EACP1C,IAA8B,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAe4C,OAAQ,EAAI1B,KAAMkC,eAAepD,EAAc4C,OAAd,OAAsBhD,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAcgJ,kBAAkB,GAAK,EAL/H,OAyBJ,mBAACD,GAAD,CAAkBzB,UAAU,mBAC1B,mBAACC,GAAD,KACE,mBAAC,KAAD,CAASc,MAlRhB,wDAmRS,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,+BAEF,mBAACC,GAAD,CAAwBC,YAAY,GAUjCzI,EAAaiJ,YACfC,MAAMC,OAAOnJ,EAAaiJ,YACzBG,KAAwC,IAAjCD,OAAOnJ,EAAaiJ,YAAmBI,MAAMC,OACpD,2BACE,QACF,KAsBJ,mBAACP,GAAD,KACE,mBAACxB,GAAD,KACE,mBAAC,KAAD,CAASc,MAhUd,yIAiUO,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,sBAEF,mBAACC,GAAD,CAAwBC,YAAY,GAClC,mBAACc,GAAD,KACE,wBACEjC,UAAU,+BACVkC,KAAM,kBAAoBxJ,EAAayJ,aAEtC,IACAzJ,EAAayJ,YACVzJ,EAAayJ,YACb,IARR,OAUS,IACP,mBAACC,GAAD,KACCxJ,GAAgBA,EAAe,EAAIA,EAAeyC,SAAQ,OAAC3C,QAAD,IAACA,OAAD,EAACA,EAAcyJ,aAAe,EADzF,8BAkCZ,mBAACE,GAAD,KA4CE,mBAACC,GAAD,KACE,mBAACrC,GAAD,KACE,mBAAC,KAAD,CAASc,MAhajB,4EAiaU,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,cAEF,mBAACC,GAAD,CAAwBC,YAAY,GAClC,mBAACc,GAAD,KACG,IACD,0BAAKM,MAAO,CAAEC,QAASpL,GAAS,IAAM,OAAS,UAC7C,wBACE4I,UAAU,+BACVkC,KAAM,oBAAsBxJ,EAAaoC,MAExCpC,EAAaoC,MAEhB,0BACEkF,UACE5I,EAAQ,IACJ,sBACA,iBAGN,mBAAC,mBAAD,CACEiK,KAAM3I,EAAaoC,KACnBwG,OAAQ,kBAAMnI,EAAcT,EAAaoC,QAEzC,mBAAC,KAAD,CACEiG,MACE7H,IAAeR,EAAaoC,KACxB,SACA,oBAENyG,UAAU,OAEV,6BACEvB,UACE5I,EAAQ,KACJ,sBACA,6BAGN,0BACE4I,UACE5I,EAAQ,KACJ,YACAA,EAAQ,IACR,iBACA,qBAENqJ,IAAK,gCAQnB,mBAACgC,GAAD,KACGrL,GAAS,KAAOA,GAAS,MACxBwF,GACE,sCAEI,mBAAC,KAAD,CACE8F,KAAM1F,GACN2F,QAASzE,GACT0E,SAAUlK,EAAaoC,KACvBQ,MAAO4B,GACP2F,KAAMtK,IAITgH,KAA4B,OAAZA,SAAY,IAAZA,QAAA,EAAAA,GAAcT,QAAS,EACtC,mBAACgE,GAAD,eAEIvD,IAAyB,OAAZA,SAAY,IAAZA,QAAA,EAAAA,GAAcT,QAAS,UAFxC,aAEI,EACIiE,SAIR,mBAAC,KAAD,CACEhC,MAAM,wBACNQ,UAAU,OAEV,mBAACyB,GAAD,CAAiBC,QAASjF,IACxB,mBAACkF,GAAD,KACE,0BAAKzC,IAAI,+BAEX,mBAAC0C,GAAD,mBASV,KAIN,mBAACC,GAAD,MACGhM,EAAQ,KAAOA,EAAQ,OACtBwF,GACE,sCAEI,mBAAC,KAAD,CACE8F,KAAM1F,GACN2F,QAASzE,GACT0E,SAAUlK,EAAaoC,KACvBQ,MAAO4B,GACP2F,KAAMtK,IAITgH,KAAY,OAAIA,SAAJ,IAAIA,QAAJ,EAAIA,GAAcT,QAC7B,mBAACgE,GAAD,eACGvD,IAAyB,OAAZA,SAAY,IAAZA,QAAA,EAAAA,GAAcT,QAAS,UADvC,aACG,EAAwCiE,SAG3C,mBAAC,KAAD,CACEhC,MAAM,wBACNQ,UAAU,OAEV,mBAACyB,GAAD,CAAiBC,QAASjF,IACxB,mBAACkF,GAAD,KACE,0BAAKzC,IAAI,+BAEX,mBAAC0C,GAAD,mBASV,KAIN,mBAACE,GAAD,KACE,mBAACC,GAAD,KACE,0BAAK7C,IAAI,6BAIb,mBAAC6B,GAAD,KA2CE,mBAACrC,GAAD,KACE,mBAAC,KAAD,CAASc,MA9lBnB,6EA+lBY,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,YAEF,mBAACC,GAAD,CAAwBC,YAAY,GAClC,mBAACc,GAAD,KACE,2BACEM,MAAO,CAAEC,QAASpL,GAAS,IAAM,OAAS,UAE1C,wBACE4I,UAAU,+BACVkC,KAAM,oBAAsBxJ,EAAasC,IAExCtC,EAAasC,GACVtC,EAAasC,GACbtC,EAAa6K,iBAEnB,0BACEvD,UACE5I,EAAQ,IACJ,sBACA,iBAGN,mBAAC,mBAAD,CACEiK,KAAM3I,EAAasC,GACnBsG,OAAQ,kBAAMnI,EAAcT,EAAasC,MAEzC,mBAAC,KAAD,CACE+F,MACE7H,IAAeR,EAAasC,GACxB,SACA,oBAENuG,UAAU,OAEV,6BACEvB,UACE5I,EAAQ,KACJ,sBACA,6BAGN,0BACE4I,UACE5I,EAAQ,KACJ,YACAA,EAAQ,IACR,iBACA,qBAENqJ,IAAK,gCAQnB,mBAACgC,GAAD,KACGrL,GAAS,KAAOA,GAAS,MACxBwF,GACE,sCAEI,mBAAC,KAAD,CACE8F,KAAMpF,GACNqF,QAASvE,GACToF,OAAQ9K,EAAasC,GACrBM,MAAO8B,GACPyF,KAAMtK,IAGToH,KAAU,OAAIA,SAAJ,IAAIA,QAAJ,EAAIA,GAAYb,QACzB,mBAACgE,GAAD,eACGnD,IAAqB,OAAVA,SAAU,IAAVA,QAAA,EAAAA,GAAYb,QAAS,UADnC,aACG,EAAoCiE,SAGvC,mBAAC,KAAD,CACEhC,MAAM,wBACNQ,UAAU,OAEV,mBAACyB,GAAD,CAAiBC,QAAS9E,IACxB,mBAAC+E,GAAD,KACE,0BAAKzC,IAAI,+BAEX,mBAAC0C,GAAD,mBASV,KAIN,mBAACC,GAAD,MACGhM,EAAQ,KAAOA,EAAQ,OACtBwF,GACE,sCAEI,mBAAC,KAAD,CACE8F,KAAMpF,GACNqF,QAASvE,GACToF,OAAQ9K,EAAasC,GACrBM,MAAO8B,GACPyF,KAAMtK,IAGToH,KAAU,OAAIA,SAAJ,IAAIA,QAAJ,EAAIA,GAAYb,QACzB,mBAACgE,GAAD,eACGnD,IAAqB,OAAVA,SAAU,IAAVA,QAAA,EAAAA,GAAYb,QAAS,UADnC,aACG,EAAoCiE,SAGvC,mBAAC,KAAD,CACEhC,MAAM,wBACNQ,UAAU,OAEV,mBAACyB,GAAD,CAAiBC,QAAS9E,IACxB,mBAAC+E,GAAD,KACE,0BAAKzC,IAAI,+BAEX,mBAAC0C,GAAD,mBASV,MAMR,mBAACM,GAAD,KAkBE,mBAACC,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASc,MA7vBf,2JA8vBQ,mBAACC,GAAD,CAAWP,IAAK,sBAGlB,mBAACQ,GAAD,yBAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAACc,GAAD,KAsBGlG,GAASA,EAAQ,EAAIA,EAAQ,EAtBhC,UAsB0CP,EACvCO,GAASA,EAAQ,EAAI/B,KAAMkC,eAAepD,EAAc4C,MAAQK,EAAO,GAAK,EAvB/E,OA4CJ,mBAAC2H,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MAjzBxB,qKAkzBG,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,sBAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC1Ba,KAAO,GAAPA,CAAWtJ,EAAakL,OAmB7B,mBAACF,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MA30B3B,mJA40BM,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,6BAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAACc,GAAD,KAUC7F,EAVD,YAUkBZ,EACI,MAAnBmB,GACC,+BAAOH,IAEP,+BACGA,GACA,IACD,2BAAM+F,MAAO,CAAEsB,MAAO,YAAclH,KAjB1C,OAwCJ,mBAAC+G,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MA13B5B,+DA23BO,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,kBAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAACc,GAAD,KAAUD,KAAO,GAAPA,CAAA,OAAWtJ,QAAX,IAAWA,OAAX,EAAWA,EAAcyD,YAKrC3C,EAQA,sCACA,mBAACkK,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASc,MAAOxF,GACd,mBAACyF,GAAD,CAAWP,IAAK,sBAEpB,mBAACQ,GAAD,+BAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAAC2C,GAAD,KACE,0CADF,OAGE,mCAAO,wBAAG9D,UAAU,+BAA+BkC,KAAM,oBAAcxJ,QAAd,IAAcA,OAAd,EAAcA,EAAcqL,WAA9E,OACJrL,QADI,IACJA,OADI,EACJA,EAAcqL,UADjB,QAMJ,mBAACL,GAAD,KACA,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASc,MAAOxF,GACd,mBAACyF,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,yBAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAACc,GAAD,KACG3I,KAKH,mBAACoK,GAAD,KACE,mBAACzD,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MA96BhC,0MA+6BW,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,eAEF,mBAAC0C,GAAD,CAAiBxC,YAAY,GAC3B,mBAACc,GAAD,SAAWvJ,EAAasL,SAG5B,mBAACC,GAAD,KACE,mBAAChE,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MAx7BlC,gEAy7Ba,mBAACmD,GAAD,CAAoBzD,IAAK,sBAE3B,mBAAC0D,GAAD,oBAEF,mBAACC,GAAD,CAA0BjD,YAAY,GACpC,0BAAKnB,UAAU,kCACb,+BACEA,UAAU,wBACVqE,UAAQ,EACR/I,MAAO5C,EAAa4L,WAK5B,mBAACZ,GAAD,KACE,mBAACa,GAAD,CAAkBtB,QA93BhB,WACpBxJ,GAAW,KA83BS,mBAAC+K,GAAD,iBACA,mBAACC,GAAD,CAAYhE,IAAI,4BAtEtB,mBAACiD,GAAD,KACE,mBAACa,GAAD,CAAkBtB,QA9zBd,WACpBxJ,GAAW,KA8zBO,mBAAC+K,GAAD,iBACA,mBAACE,GAAD,CAAYjE,IAAI,2BAwEtB,mBAACkE,GAAD,KACE,mBAAC1E,GAAD,KACE,mBAAC,KAAD,CAASa,MAAM,QAAQC,MA/8BxB,mHAg9BG,mBAACC,GAAD,CAAWP,IAAK,sBAElB,mBAACQ,GAAD,sBAEF,mBAAC2D,GAAD,KACIhI,GAkBEkB,GACF,sCAAOA,SAAP,IAAOA,QAAP,EAAOA,GAAa+G,UAEpB,mBAACC,GAAD,KACE,mBAACC,GAAD,kDAIE,mBAAC,KAAD,CACErC,KAAMlF,GACNwH,kBAj5BA,WACxB3G,MAi5BwB4G,sBAAuB,aACvBtC,QAj7BC,kBAAMlF,IAAuB,IAk7B9BoF,KAAMtK,EACNuH,QAAO,UACLC,IAAyB,OAAZA,SAAY,IAAZA,QAAA,EAAAA,GAAcjB,QAAS,UAD/B,aACL,EAAwC+F,WAK5C,mBAAC,KAAD,CACE9D,MAAM,wBACNQ,UAAU,OAEV,0BACEvB,UACE5I,EAAQ,KAAO,aAAe,eAEhC6L,QAl8BF,kBAAMxF,IAAuB,IAm8B3BgD,IAAKyE,EAAQ,UA9CrB,mBAACC,GAAD,KAEI,mBAAC,KAAD,CACEzC,KAAMhF,GACNiF,QAt5BD,kBAAMhF,IAAqB,IAu5B1ByH,kBAAmB7M,IALzB,kDASE,wBACEyH,UAAU,+BACVuC,MAAO,CAAErL,WAAY,MAAOmO,OAAQ,WACpCpC,QA/5BA,kBAAMtF,IAAqB,KA45B7B,iBA8CV,8BACA,kCAMR,mBAAC,KAAD,CAAiB5F,cAlhCrB,SAAuBuN,GAAQ,IAAD,IAC5BrM,EAAS,OAACqM,QAAD,IAACA,GAAD,UAACA,EAAOC,cAAR,aAAC,EAAejK,OACzBrD,OAAOI,aAAamN,QAAQ,WAA5B,OAAwCF,QAAxC,IAAwCA,GAAxC,UAAwCA,EAAOC,cAA/C,aAAwC,EAAejK,QAghCNmK,SAAUzM,KAjmChD,GAqmCD0M,WAAOpB,MAAV,kMAAX,IAUMrC,GAAUyD,WAAOC,IAAV,olBA4BPvE,GAAcsE,WAAOC,IAAV,umBA6BX7B,GAAwB4B,WAAOC,IAAV,qoBA4CrBR,IAfWO,WAAOE,SAAV,kUAeMF,WAAOG,EAAV,gPAUXpC,GAAQiC,WAAOC,IAAV,wjBAuBLf,GAA6Bc,WAAOC,IAAV,4qBAgC1BvB,GAA2BsB,WAAOC,IAAV,ogBA0BxBhC,GAAkB+B,WAAOC,IAAV,gsBAkBP,SAACG,GAAD,OAAYA,EAAM3E,WAAN,mBAmDpBgD,IAnCmBuB,WAAOC,IAAV,suBAkBR,SAACG,GAAD,OAAYA,EAAM3E,WAAN,mBAiBJuE,WAAOK,KAAV,spBA8Bb9E,GAAOyE,WAAOK,KAAV,4iBA0BJ9B,GAAmByB,WAAOC,IAAV,uWAgBhBhB,GAAqBe,WAAOC,IAAV,6WAiBlBjC,GAAUgC,WAAOC,IAAV,sRA+CP1F,IAjCcyF,WAAOC,IAAV,kSAeDD,WAAOC,IAAV,kYAkBKD,WAAOC,IAAV,+GAcTxF,IAPkBuF,WAAOC,IAAV,2GAOTD,WAAOC,IAAV,6aAiBHtD,GAAqBqD,WAAOC,IAAV,sTAYlBrD,GAAYoD,WAAOC,IAAV,6YAiBTzF,GAAUwF,WAAOK,KAAV,smBA0BP7B,GAAqBwB,WAAOM,IAAV,ySAalBhF,GAAY0E,WAAOM,IAAV,8QAYT3F,GAAkBqF,WAAOC,IAAV,mZAgBfpF,GAAqBmF,WAAOC,IAAV,0OAUlBrF,GAAwBoF,WAAOC,IAAV,iNAUrBnF,GAAYkF,WAAOM,IAAV,oEAITtF,GAAoBgF,WAAOC,IAAV,oHAOjBhF,GAAmB+E,WAAOC,IAAV,gHAOhBpB,GAAmBmB,WAAOC,IAAV,mEAIhBnB,GAAckB,WAAOC,IAAV,4OAYXjB,GAAagB,WAAOM,IAAV,iJAOVvB,GAAaiB,WAAOM,IAAV,+KAQVpF,GAA2B8E,WAAOC,IAAV,wMASxBnE,GAAiCkE,WAAOC,IAAV,mXAe9B9E,GAA8B6E,WAAOC,IAAV,sGAK3BlE,GAAmBiE,WAAOC,IAAV,mMAShBzE,GAAyBwE,WAAOC,IAAV,2aAmBtBvD,GAAoBsD,WAAOC,IAAV,oRAejBtC,GAAYqC,WAAOC,IAAV,8ZAmBTrC,GAAeoC,WAAOC,IAAV,2UAcZ3C,GAAkB0C,WAAOC,IAAV,kWAgBfzC,GAAYwC,WAAOC,IAAV,mDAGTxC,GAAauC,WAAOC,IAAV,gDAIV7C,GAAM4C,WAAOC,IAAV,kSAcHlD,GAASiD,WAAOC,IAAV,8CAGNvC,GAAmBsC,WAAOC,IAAV,mDAGhBb,GAAWY,WAAOC,IAAV,+CAGRZ,GAAeW,WAAOC,IAAV,sD,+ECn4DlB,SAASM,IACP,MAAO,CACL,eAAgBC,IAAcC,aAAaC,iBAC3C,YAAaC,4C,4CAIjB,WAA0C/H,GAA1C,eAAAxE,EAAA,6DACMwM,EAAMD,6FAAkD/H,EAD9D,kBAGSiI,YAAYL,IAAcM,YAAYC,IAAKR,IAAc,GAAIK,GACjEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAIjBiI,QAAQC,QAAQL,EAASG,cAFvBC,QAAQE,YAIlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAhB5B,4C,kEAoBA,WAA6B7I,GAA7B,eAAAxE,EAAA,6DACMwM,EAAMD,8DAAgDH,IAAckB,cAAcC,eADxF,kBAGSd,YAAYL,IAAcM,YAAYc,KAAMrB,IAAc3H,EAAMgI,GACpEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAIjBiI,QAAQC,QAAQL,EAASG,cAFvBC,QAAQE,YAIlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAhB5B,4C,kEAmBA,WAAkCI,EAAMjJ,GAAxC,eAAAxE,EAAA,6DACMwM,EAAMD,qFAA8CkB,EAD1D,kBAEShB,YAAYL,IAAcM,YAAYC,IAAKR,IAAc3H,EAAMgI,GACnEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,EAASG,cADvBC,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAd5B,4C,kEAkBA,WAA8B7I,GAA9B,eAAAxE,EAAA,6DACMwM,EACFD,qGAEAlL,KAAKqM,KAAKlJ,EAAKmJ,SACf,UACAnJ,EAAKoJ,QACL,SACApJ,EAAKqJ,UART,kBAUSpB,YAAYL,IAAcM,YAAYC,IAAKR,IAAc,GAAIK,GACjEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAIjBiI,QAAQC,QAAQL,EAASG,cAFvBC,QAAQE,YAIlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAvB5B,4C,kEA2BA,sBAAArN,EAAA,4DACYuM,6EADZ,kBAESE,YAAYL,IAAcM,YAAYC,IAAKR,IAAc,GADtDI,8EAEPK,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAIjBiI,QAAQC,QAAQL,EAASG,cAFvBC,QAAQE,YAIlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAf5B,4C,kEAmBA,WAAqD7I,GAArD,eAAAxE,EAAA,6DAEMwM,EAAMD,qGAAuD/H,EAAKsJ,YAC/DtJ,EAAKsJ,KAHd,kBAMSrB,YAAYL,IAAcM,YAAYc,KAAMrB,IAAc3H,EAAMgI,GACpEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,EAASG,cADvBC,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAlB5B,4C,kEAqBA,WAAoD7I,GAApD,eAAAxE,EAAA,6DACQwM,EAAMD,mGAAqD/H,EAAKsJ,MAAQtJ,EAAKuJ,YAAc,gBAAkBvJ,EAAKuJ,YAAc,KAC7HvJ,EAAKwJ,WAAaxJ,EAAKuJ,YAAc,cAAgB,eAAiBvJ,EAAKwJ,UAAY,IAFlG,kBAISvB,YAAYL,IAAcM,YAAYC,IAAKR,IAAc,GAAIK,GACjEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,GADdI,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAhB5B,4C,kEAmBA,WAAwC7I,GAAxC,eAAAxE,EAAA,6DACOwM,EAAMD,wFAAsD/H,EAAK/F,eAE7D+F,EAAK/F,QAHhB,kBAISgO,YAAYL,IAAcM,YAAYc,KAAMrB,IAAc3H,EAAMgI,GACpEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,EAASG,cADvBC,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAhB5B,4C,kEAmBA,WAAsDI,EAAMjJ,GAA5D,eAAAxE,EAAA,6DACMwM,EACFD,oGAAsEkB,EAF1E,kBAGShB,YAAYL,IAAcM,YAAYC,IAAKR,IAAc3H,EAAMgI,GACnEI,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,EAASG,cADvBC,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAf5B,4C,kEAkBA,WAAoD7I,GAApD,SAAAxE,EAAA,4DACYuM,oGADZ,kBAGSE,YAAYL,IAAcM,YAAYc,KAAMrB,IAAc3H,EAFvD+H,qGAGPK,MAAK,SAACC,GACL,OACGA,EAASC,SACgB,MAA1BD,EAASE,cACRF,EAASG,cACuB,IAAjCH,EAASG,aAAahI,OAGjBiI,QAAQC,QAAQL,EAASG,cADvBC,QAAQE,YAGlBC,OAAM,SAAUC,GACf,OAAOJ,QAAQE,OAAOE,OAf5B,4C,sBAvMe,KACbY,2B,4CACAC,c,4CACAC,c,2CACAC,mB,8CACAC,e,4CACAC,qC,4CACAzN,uC,8CACA0N,qC,4CACAC,sC,4CACAC,yB","file":"static/js/31.135d0416.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n// import \"tippy.js/dist/tippy.css\";\nimport \"../../assets/styles/custom.css\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Tokensearchbar from \"../explorer/tokensearchBar\";\nimport { useParams } from \"react-router\";\nimport Utils from \"../../utility\";\nimport FooterComponent from \"../common/footerComponent\";\nimport moment from \"moment\";\nimport TokenData from \"../../services/token\";\nimport BlockService from \"../../services/blocks\";\nimport coinMarketService from \"../../services/coinMarket\";\nimport format from \"format-number\";\nimport { sessionManager } from \"../../managers/sessionManager\";\nimport PrivateAddressTag from \"../../modules/common/dialog/privateAddressTag\";\nimport PrivateNote from \"../../modules/common/dialog/privateNote\";\nimport { cookiesConstants } from \"../../constants\";\nimport LoginDialog from \"../explorer/loginDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: \"75.125rem\",\n\n    marginRight: \"auto\",\n    // marginTop: \"90px\",\n    marginLeft: \"auto\",\n    marginBottom: \"auto\",\n\n    width: \"100%\",\n\n    \"@media (min-width: 0px) and (max-width: 767px)\": {\n      maxWidth: \"22.563rem\",\n      paddingLeft: \"7px\",\n      paddingRight: \"7px\",\n    },\n    \"@media (min-width: 768px) and (max-width: 1239px)\": {\n      // marginTop: \"130px\",\n      maxWidth: \"41.5rem\",\n    },\n  },\n  rowDiv: {\n    width: \"100%\",\n    alignItems: \"center\",\n    height: \"53px\",\n    background: \"#FFFFFF 0% 0% no-repeat padding-box\",\n    borderRadius: \"7px\",\n\n    justifyContent: \"space-between\",\n  },\n\n  mainContainer: {\n    width: \"100%\",\n  },\n}));\n\nexport default function TransferTransaction({ _handleChange }) {\n  const classes = useStyles();\n  function shorten(b, amountL = 25, amountR = 0, stars = 3) {\n    return `${b?.slice(0, amountL)} ${\".\".repeat(stars)} ${b?.slice(\n      b.length\n    )} `;\n  }\n\n  const width = window.innerWidth;\n\n  let decimalValue = 0\n  let currentBlock = 0\n  let CurrencyValue = window.localStorage.getItem(\"currency\");\n  const { address } = useParams();\n  const [transactions, setTransactions] = useState(false);\n  const [latestBlocks, setLatestBlocks] = useState(0);\n  const [coinmarketcap, setCoinmarketcap] = useState([]);\n  const [amount, setAmount] = useState(\"\");\n  const [copiedText, setCopiedText] = useState(\"\");\n  const [isLoading, setLoading] = useState(true);\n  const [tokenTransferValue, setTokenTransferValue] = useState(0)\n  const [isSeeMore, setSeeMore] = useState(false);\n  useEffect(() => {\n    transferTransactionDetail();\n    getLatestBlocks();\n    getcoinMarketCapData()\n  }, [amount]);\n\n  const getcoinMarketCapData = async () => {\n    let urlPath = `${CurrencyValue}`;\n    let [error, coinMarket] = await Utils.parseResponse(\n      coinMarketService.getCoinMarketData(urlPath, {})\n    );\n    if (error || !coinMarket) return;\n    setCoinmarketcap(coinMarket[0])\n  };\n\n  const getLatestBlocks = async () => {\n    let urlPath = \"?skip=0&limit=1\";\n    let [error, latestBlock] = await Utils.parseResponse(\n      BlockService.getLatestBlock(urlPath, {})\n    );\n    if (error || !latestBlock) return;\n    setLatestBlocks(latestBlock[0].number);\n\n  };\n\n  const transferTransactionDetail = async () => {\n    let urlPath = `/${address}`;\n    let [error, transactiondetailusinghash] = await Utils.parseResponse(\n      TokenData.getTransferTransactionDetailsUsingHash(urlPath, {})\n    );\n    if (error || !transactiondetailusinghash) return;\n    setTransactions(transactiondetailusinghash);\n    setFromAddress(transactiondetailusinghash.from);\n    setToAddress(transactiondetailusinghash.to);\n    setLoading(false);\n    if (transactiondetailusinghash.decimals !== undefined) {\n      decimalValue = Math.pow(10, transactiondetailusinghash.decimals)\n      setTokenTransferValue(parseInt(parseInt(transactiondetailusinghash.value) / decimalValue))\n    }\n    currentBlock = transactiondetailusinghash.number\n  };\n\n  const hashid = `A transaction hash is a unique character identifier that is generated whenever the transaction is executed. `;\n  const blocknumber = ` The number of block in which transaction was recorded. Block confirmation indicate how many blocks since the transaction is mined.  `;\n  const timestamp = ` The date and time at which a transaction is mined. `;\n  const from = ` The sending party of the transaction(could be from a contact address)  `;\n  const to = ` The receiving party of the transaction(could be from a contact address) `;\n  const value = ` The value being transacted in XDC and fiat value. Note: You can click the fiat value(if available) to see historical value at the time of Transaction `;\n  const txnfee = ` The value being transacted in XDC and fiat value. Note: You can click the fiat value(if available) to see historical value at the time of Transaction `;\n  const gasprovided = `Maximum amount of gas provided for the transaction. For normal XDC transfers the value is 21,000. For contract this value is higher an bound by block gas limit. `;\n  const gasprice = ` Cost per unit of gas specified for the transaction, in XDC and Gwei. The higher the gas price the higher hance of getting included in a block `;\n  const gasused = ` The exact unit of gas that was used for the transactions. `;\n  const nounced = ` Sequential running number for an address, beginning with 0 for the first transaction. For example, if the nonce of a transaction is 10, it would be 11th transaction sent from the sender's address. `;\n  const input = `Additional information that is required for the transaction `;\n  const transferToken = `The value being transacted in XDC and fiat value. Note: You can click the fiat value (if available) to see historical value at the time of transaction.`;\n  const privatenote = `User can add a private note to the transaction. Private note is being saved in the local storage of the device.`;\n\n  function _handleChange(event) {\n    setAmount(event?.target?.value);\n    window.localStorage.setItem(\"currency\", event?.target?.value);\n  }\n\n\n  const currencySymbol = CurrencyValue === \"INR\" ? \"₹ \" : CurrencyValue === \"USD\" ? \"$ \" : \"€ \";\n  const valueFetch = coinmarketcap.price\n\n  const transactionFetch = CurrencyValue === \"INR\" ? transactions.transactionFeeINR : CurrencyValue === \"USD\" ? transactions.transactionFeeUSD : transactions.transactionFeeEUR;\n\n  const fetchtxn = !transactionFetch ? 0 : (transactionFetch / 1000000000000000000).toFixed(12);\n\n\n  let txfee = !transactions.gasPrice ? 0 : Utils.decimalDivison(transactions.gasPrice, 2);\n  txfee = txfee * transactions.gasUsed\n\n\n  const gasP = !transactions.gasPrice ? 0 : Utils.decimalDivison(transactions.gasPrice, 2);\n  const avgTxnFeeConverted =\n    CurrencyValue === \"INR\"\n      ? gasP * coinmarketcap.price\n      : CurrencyValue === \"USD\"\n      ? gasP * coinmarketcap.price\n      : gasP * coinmarketcap.price;\n  const avgTxnFeeFetch = !avgTxnFeeConverted\n    ? 0\n    : parseFloat(avgTxnFeeConverted)?.toFixed(14);\n  let avgTxnFeeFetch1 = avgTxnFeeFetch.toString().split(\".\")[0];\n  let avgTxnFeeFetch2 = avgTxnFeeFetch.toString().split(\".\")[1];\n\n\n  const valueDiv = !valueFetch ? 0 : Utils.decimalDivison(valueFetch, 2);\n\n  const userInfo = sessionManager.getDataFromCookies(\"userInfo\");\n  const [dialogPvtTagIsOpen, setDialogPvtTagIsOpen] = React.useState(false);\n  const [dialogValue, setDailogValue] = React.useState(0);\n  const [dialogValue2, setDailogValue2] = React.useState(0);\n  const [dialogPvtTagIsOpen2, setDialogPvtTagIsOpen2] = React.useState(false);\n  const [dialogPvtNoteIsOpen, setDialogPvtNoteIsOpen] = React.useState(false);\n  const [loginDialogIsOpen, setLoginDialogIsOpen] = React.useState(false);\n  const [fromAddress, setFromAddress] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [privateNote, setPrivateNote] = useState(\"\");\n\n  const openDialogPvtTag = () => {\n    window.scrollTo(0, 0);\n    setDialogPvtTagIsOpen(true);\n    setDailogValue(1);\n  };\n  const closeDialogPvtTag = () => {\n    setDialogPvtTagIsOpen(false);\n    setDailogValue(0);\n  };\n  const openDialogPvtTag2 = () => {\n    window.scrollTo(0, 0);\n    setDialogPvtTagIsOpen2(true);\n    setDailogValue2(1);\n  };\n  const closeDialogPvtTag2 = () => {\n    setDialogPvtTagIsOpen2(false);\n    setDailogValue2(0);\n  };\n  const openDialogPvtNote = () => setDialogPvtNoteIsOpen(true);\n  const closeDialogPvtNote = () => setDialogPvtNoteIsOpen(false);\n  const openLoginDialog = () => setLoginDialogIsOpen(true);\n  const closeLoginDialog = () => setLoginDialogIsOpen(false);\n  const handleSeeMore = () => {\n    setSeeMore(true);\n  };\n  const handleSeeLess = () => {\n    setSeeMore(false);\n  };\n\n  const privateNoteUsingHash = async () => {\n    const data = {\n      transactionHash: `${address}`,\n      userId: sessionManager.getDataFromCookies(\"userId\"),\n    };\n    let transactionLabel = localStorage.getItem(\n      data.userId + cookiesConstants.USER_TRASACTION_LABELS\n    );\n    transactionLabel = JSON.parse(transactionLabel);\n    if (!transactionLabel || !transactionLabel.length) return;\n\n    const existingTransactionLabel = transactionLabel.find(\n      (item) =>\n        item.transactionHash == data.transactionHash &&\n        item.userId == data.userId\n    );\n    if (existingTransactionLabel) {\n      setPrivateNote(existingTransactionLabel);\n    }\n  };\n  const getListOfTxnLabel = () => {\n    privateNoteUsingHash();\n  };\n\n  // ---------------------------------------> fetch from/to address tag (local-storage) <------------------------------------//\n  var addrTagFrom = fromAddress;\n  var addrTagTo = toAddress;\n\n  let taggedAddress = localStorage.getItem(\n    sessionManager.getDataFromCookies(\"userId\") +\n      cookiesConstants.USER_TAGGED_ADDRESS\n  );\n  let tags =\n    taggedAddress && taggedAddress.length > 0 ? JSON.parse(taggedAddress) : \"\";\n  var tagValueFrom =\n    tags && tags.length > 0\n      ? tags?.filter(\n          (obj) => obj.address === addrTagFrom && obj.userId === userInfo.sub\n        )\n      : \"\";\n  var tagValueTo =\n    tags && tags.length > 0\n      ? tags?.filter(\n          (obj) => obj.address === addrTagTo && obj.userId === userInfo.sub\n        )\n      : \"\";\n\n  // ---------------------------------------> fetch pvt note from (local-storage) <--------------------------------------------//\n\n  var pvtNotehash = `${address}`;\n  let pvtNoteLocal = localStorage.getItem(\n    cookiesConstants.USER_TRASACTION_LABELS\n  );\n\n  let pvtNote =\n    pvtNoteLocal && pvtNoteLocal.length > 0 ? JSON.parse(pvtNoteLocal) : \"\";\n  var pvtNoteValue =\n    pvtNote && pvtNote.length > 0\n      ? pvtNote?.filter(\n          (obj) =>\n            obj.transactionHash === pvtNotehash && obj.userId === userInfo.sub\n        )\n      : \"\";\n  \n\n  return (\n    <div className={classes.mainContainer}>\n      <Tokensearchbar />\n      <div className={classes.root}>\n        <Grid>\n          <div className={isLoading === true ? \"cover-spin-2\" : \"\"}>\n            <div className={isLoading === true ? \"cover-spin\" : \"\"}>\n              <Container>\n                <Heading>Transaction Details</Heading>\n              </Container>\n\n              <Div>\n              {transactions ? (\n                  transactions.status == true ? (\n                    <StatusContainer>\n                      <StatusContainerInside>\n                        <StatusImgContainer>\n                          <StatusImg src=\"/images/success.svg\"></StatusImg>\n                        </StatusImgContainer>\n                        <StatusTextSuccess>Success</StatusTextSuccess>\n                      </StatusContainerInside>\n                    </StatusContainer>\n                  ) : (\n                    <StatusContainer>\n                      <StatusImgContainer>\n                        <StatusImg src=\"/images/failed.svg\"></StatusImg>\n                      </StatusImgContainer>\n                      <StatusTextFailed>Failed</StatusTextFailed>\n                    </StatusContainer>\n                  )\n                ) : null}\n                <TxnDetailsRightContainer>\n                  <TxnDetailsRightTopContainer>\n                    <Container>\n                      <Tooltip align=\"right\" title={hashid}>\n                        <ImageView src={\"/images/info.svg\"} />\n                      </Tooltip>\n\n                      <Hash>Transaction Hash</Hash>\n                    </Container>\n                    <DetailsMiddleContainer isTextArea={false}>\n                      <ContentHash>\n                        {address}\n                      </ContentHash>\n                      <span\n                        className={\n                          width >= 768\n                            ? \"copyEditContainer2\"\n                            : \"copyEditContainerMobile\"\n                        }\n                      >\n                        <CopyToClipboard\n                          text={address}\n                          onCopy={() => setCopiedText(address)}\n                        >\n                          <Tooltip\n                            title={\n                              copiedText === address\n                                ? \"Copied\"\n                                : \"Copy To Clipboard\"\n                            }\n                            placement=\"top\"\n                          >\n                            <button\n                              className={\n                                width > 1240\n                                  ? \"copyToClipboardHash\"\n                                  : \"copyToClipboardHashMobile\"\n                              }\n                            >\n                              <img\n                                className={\n                                  width > 1240\n                                    ? \"copy-icon\"\n                                    : width < 768\n                                    ? \"copyIconHashMobile\"\n                                    : \"copyIconHash\"\n                                }\n                                src={\"/images/copy-grey.svg\"}\n                              />\n                            </button>\n                          </Tooltip>\n                        </CopyToClipboard>\n                      </span>\n                    </DetailsMiddleContainer>\n                  </TxnDetailsRightTopContainer>\n                  <TxnDetailsRightBottomContainer>\n                    <DetailsContainer>\n                      <Container>\n                        <Tooltip title={value}>\n                          <ImageView src={\"/images/info.svg\"} />\n                        </Tooltip>\n                        <Hash>Transaction Value</Hash>\n                      </Container>\n                      <Tooltip title={transactions?.value}>\n                        <DetailsMiddleContainer isTextArea={false}>\n                          {!transactions?.transactionValue\n                            ? 0\n                            : Utils.decimalDivison(transactions?.transactionValue, 2)}{\" \"}\n                            XDC ({currencySymbol}\n                          {coinmarketcap && coinmarketcap?.price > 0 ? Utils.decimalDivison(coinmarketcap.price * transactions?.transactionValue, 2) : 0})\n                        </DetailsMiddleContainer>\n                      </Tooltip>\n                    </DetailsContainer>\n                    {/* <Spacing>\n                  <Container>\n                    <Tooltip title={value} style={{ cursor: \"pointer\" }}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n                    <Hash>Value</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    {!transactions?.transactionValue\n                      ? 0\n                      : Utils.decimalDivison(transactions?.transactionValue, 2)}{\" \"}\n                    XDC ({currencySymbol}\n                    {coinmarketcap && coinmarketcap?.price > 0 ? Utils.decimalDivison(coinmarketcap.price * transactions?.transactionValue, 2) : 0})\n                  </MiddleContainer>\n                </Spacing> */}\n                    {/* ------------------------------------------------time stamp------------------------------------- */}\n                    <DetailsContainer className=\"mobileTimeStamp\">\n                      <Container>\n                        <Tooltip title={timestamp}>\n                          <ImageView src={\"/images/info.svg\"} />\n                        </Tooltip>\n\n                        <Hash>Transaction Timestamp</Hash>\n                      </Container>\n                      <DetailsMiddleContainer isTextArea={false}>\n                        {/* {`${\n                          (transactions?.timestamp &&\n                            moment(transactions.timestamp * 1000)\n                              .tz(timezone)\n                              .format(\"MMM DD, YYYY, hh:mm A\")) ||\n                          \"\"\n                        } ${\n                          (timezone && Utility.getUtcOffset(timezone)) || \"\"\n                        }`} */}\n                        {transactions.timestamp &&\n                      !isNaN(Number(transactions.timestamp))\n                      ? moment(Number(transactions.timestamp) * 1000).utc().format(\n                        \"MMMM Do YYYY, h:mm:ss A\"\n                      ) + \"  UTC\"\n                      : \"\"}\n                        {/*============================================================================({getHoursAgo(transactions.timestamp * 1000)})==================================*/}\n                      </DetailsMiddleContainer>\n                    </DetailsContainer>\n                    {/* <Spacing>\n                  <Container>\n                    <Tooltip title={timestamp}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n\n                    <Hash>Timestamp</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    {transactions.timestamp &&\n                      !isNaN(Number(transactions.timestamp))\n                      ? moment(Number(transactions.timestamp) * 1000).utc().format(\n                        \"MMMM Do YYYY, h:mm:ss A\"\n                      ) + \"  UTC\"\n                      : \"\"}\n                  </MiddleContainer>\n                </Spacing> */}\n                    {/* ------------------------------------------------------block-------------------------------  */}\n                    <DetailsContainer>\n                      <Container>\n                        <Tooltip title={blocknumber}>\n                          <ImageView src={\"/images/info.svg\"} />\n                        </Tooltip>\n\n                        <Hash>Block Number</Hash>\n                      </Container>\n                      <DetailsMiddleContainer isTextArea={false}>\n                        <Content>\n                          <a\n                            className=\"linkTableDetails-transaction\"\n                            href={\"/block-details/\" + transactions.blockNumber}\n                          >\n                            {\" \"}\n                            {transactions.blockNumber\n                              ? transactions.blockNumber\n                              : \"\"}\n                          </a>\n                          &nbsp;{\" \"}\n                          <BlockConfirmation>\n                          {latestBlocks && latestBlocks > 0 ? latestBlocks - parseInt(transactions?.blockNumber) : 0} Blocks Confirmation\n                          </BlockConfirmation>\n                        </Content>\n                      </DetailsMiddleContainer>\n                    </DetailsContainer>\n                    {/* <Spacing>\n                  <Container>\n                    <Tooltip title={blocknumber}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n\n                    <Hash>Block Number</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      <a\n                        className=\"linkTableDetails\"\n                        href={\"/block-details/\" + transactions.blockNumber}\n                      >\n                        {transactions.blockNumber}\n                      </a>\n                      - {latestBlocks && latestBlocks > 0 ? latestBlocks - parseInt(transactions?.blockNumber) : 0}  Blocks Confirmation\n                    </Content>\n                  </MiddleContainer>\n                </Spacing> */}\n                  </TxnDetailsRightBottomContainer>\n                </TxnDetailsRightContainer>\n\n              </Div>\n\n\n\n\n              <DivMiddleContainer>\n                {/* -----------------------------------------------from---------------------------- */}\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip title={from}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n\n                    <Hash>From</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      <a\n                        className=\"linkTableDetails\"\n                        href={\"/address-details/\" + transactions.from}\n                      >\n                        {transactions.from}\n                      </a>\n                      <CopyToClipboard\n                        text={transactions.from}\n                        onCopy={() => setCopiedText(transactions.from)}\n                      >\n                        <Tooltip\n                          title={\n                            copiedText === transactions.from\n                              ? \"Copied\"\n                              : \"Copy To Clipboard\"\n                          }\n                          placement=\"top\"\n                        >\n                          <button\n                            style={{\n                              color: \"blue\",\n                              backgroundColor: \"white\",\n                              fontSize: 14,\n                            }}\n                          >\n                            <ImgView src={\"/images/copy.svg\"} />\n                          </button>\n                        </Tooltip>\n                      </CopyToClipboard>\n                    </Content>\n                  </MiddleContainer>\n                </Spacing> */}\n                <DivMiddle>\n                  <Container>\n                    <Tooltip title={from}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n\n                    <Hash>From</Hash>\n                  </Container>\n                  <DetailsMiddleContainer isTextArea={false}>\n                    <Content>\n                      {\" \"}\n                      <div style={{ display: width >= 768 ? \"flex\" : \"block\" }}>\n                        <a\n                          className=\"linkTableDetails-transaction\"\n                          href={\"/address-details/\" + transactions.from}\n                        >\n                          {transactions.from}\n                        </a>\n                        <div\n                          className={\n                            width < 768\n                              ? \"fromContainerMobile\"\n                              : \"fromContainer\"\n                          }\n                        >\n                          <CopyToClipboard\n                            text={transactions.from}\n                            onCopy={() => setCopiedText(transactions.from)}\n                          >\n                            <Tooltip\n                              title={\n                                copiedText === transactions.from\n                                  ? \"Copied\"\n                                  : \"Copy To Clipboard\"\n                              }\n                              placement=\"top\"\n                            >\n                              <button\n                                className={\n                                  width > 1240\n                                    ? \"copyToClipboardHash\"\n                                    : \"copyToClipboardFromMobile\"\n                                }\n                              >\n                                <img\n                                  className={\n                                    width > 1240\n                                      ? \"copy-icon\"\n                                      : width < 768\n                                      ? \"copy-icon-from\"\n                                      : \"copy-icon-from-tab\"\n                                  }\n                                  src={\"/images/copy-grey.svg\"}\n                                />\n                              </button>\n                            </Tooltip>\n                          </CopyToClipboard>\n                        </div>\n                      </div>\n                    </Content>\n                    <TabTag>\n                      {width >= 768 && width <= 1240 ? (\n                        userInfo ? (\n                          <>\n                            {\n                              <PrivateAddressTag\n                                open={dialogPvtTagIsOpen}\n                                onClose={closeDialogPvtTag}\n                                fromAddr={transactions.from}\n                                value={dialogValue}\n                                hash={address}\n                              />\n                            }\n\n                            {tagValueFrom && tagValueFrom?.length > 0 ? (\n                              <Tag>\n                                {\n                                  tagValueFrom[tagValueFrom?.length - 1]\n                                    ?.tagName\n                                }\n                              </Tag>\n                            ) : (\n                              <Tooltip\n                                title=\"Add a new Address Tag\"\n                                placement=\"top\"\n                              >\n                                <AddTagContainer onClick={openDialogPvtTag}>\n                                  <ImgAddTag>\n                                    <img src=\"/images/add-tag-white.svg\" />\n                                  </ImgAddTag>\n                                  <AddTagtext>Add Tag</AddTagtext>\n                                </AddTagContainer>\n                              </Tooltip>\n                            )}\n                          </>\n                        ) : (\n                          \"\"\n                        )\n                      ) : (\n                        \"\"\n                      )}\n                    </TabTag>\n                  </DetailsMiddleContainer>\n                  <MobileDesktopTag>\n                    {width < 768 || width > 1240 ? (\n                      userInfo ? (\n                        <>\n                          {\n                            <PrivateAddressTag\n                              open={dialogPvtTagIsOpen}\n                              onClose={closeDialogPvtTag}\n                              fromAddr={transactions.from}\n                              value={dialogValue}\n                              hash={address}\n                            />\n                          }\n\n                          {tagValueFrom && tagValueFrom?.length ? (\n                            <Tag>\n                              {tagValueFrom[tagValueFrom?.length - 1]?.tagName}\n                            </Tag>\n                          ) : (\n                            <Tooltip\n                              title=\"Add a new Address Tag\"\n                              placement=\"top\"\n                            >\n                              <AddTagContainer onClick={openDialogPvtTag}>\n                                <ImgAddTag>\n                                  <img src=\"/images/add-tag-white.svg\" />\n                                </ImgAddTag>\n                                <AddTagtext>Add Tag</AddTagtext>\n                              </AddTagContainer>\n                            </Tooltip>\n                          )}\n                        </>\n                      ) : (\n                        \"\"\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </MobileDesktopTag>\n                </DivMiddle>\n                <DivCircle>\n                  <ImgNextArrow>\n                    <img src=\"/images/next-arrow.svg\" />\n                  </ImgNextArrow>\n                </DivCircle>\n                {/* --------------------------------------------------------------------to--------------------- */}\n                <DivMiddle>\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip title={to}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n\n                    <Hash>To</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      <a\n                        className=\"linkTableDetails\"\n                        href={\"/address-details/\" + transactions.to}\n                      >\n                        {transactions.to}\n                      </a>\n                      <CopyToClipboard\n                        text={transactions.to}\n                        onCopy={() => setCopiedText(transactions.to)}\n                      >\n                        <Tooltip\n                          title={\n                            copiedText === transactions.to\n                              ? \"Copied\"\n                              : \"Copy To Clipboard\"\n                          }\n                          placement=\"top\"\n                        >\n                          <button\n                            style={{\n                              color: \"blue\",\n                              backgroundColor: \"white\",\n                              fontSize: 14,\n                            }}\n                          >\n                            <ImgView src={\"/images/copy.svg\"} />\n                          </button>\n                        </Tooltip>\n                      </CopyToClipboard>\n                    </Content>\n                  </MiddleContainer>\n                </Spacing> */}\n                  <Container>\n                    <Tooltip title={to}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n\n                    <Hash>To</Hash>\n                  </Container>\n                  <DetailsMiddleContainer isTextArea={false}>\n                    <Content>\n                      <span\n                        style={{ display: width >= 768 ? \"flex\" : \"block\" }}\n                      >\n                        <a\n                          className=\"linkTableDetails-transaction\"\n                          href={\"/address-details/\" + transactions.to}\n                        >\n                          {transactions.to\n                            ? transactions.to\n                            : transactions.contractAddress}\n                        </a>\n                        <div\n                          className={\n                            width < 768\n                              ? \"fromContainerMobile\"\n                              : \"fromContainer\"\n                          }\n                        >\n                          <CopyToClipboard\n                            text={transactions.to}\n                            onCopy={() => setCopiedText(transactions.to)}\n                          >\n                            <Tooltip\n                              title={\n                                copiedText === transactions.to\n                                  ? \"Copied\"\n                                  : \"Copy To Clipboard\"\n                              }\n                              placement=\"top\"\n                            >\n                              <button\n                                className={\n                                  width > 1240\n                                    ? \"copyToClipboardHash\"\n                                    : \"copyToClipboardFromMobile\"\n                                }\n                              >\n                                <img\n                                  className={\n                                    width > 1240\n                                      ? \"copy-icon\"\n                                      : width < 768\n                                      ? \"copy-icon-from\"\n                                      : \"copy-icon-from-tab\"\n                                  }\n                                  src={\"/images/copy-grey.svg\"}\n                                />\n                              </button>\n                            </Tooltip>\n                          </CopyToClipboard>\n                        </div>\n                      </span>\n                    </Content>\n                    <TabTag>\n                      {width >= 768 && width <= 1240 ? (\n                        userInfo ? (\n                          <>\n                            {\n                              <PrivateAddressTag\n                                open={dialogPvtTagIsOpen2}\n                                onClose={closeDialogPvtTag2}\n                                toAddr={transactions.to}\n                                value={dialogValue2}\n                                hash={address}\n                              />\n                            }\n                            {tagValueTo && tagValueTo?.length ? (\n                              <Tag>\n                                {tagValueTo[tagValueTo?.length - 1]?.tagName}\n                              </Tag>\n                            ) : (\n                              <Tooltip\n                                title=\"Add a new Address Tag\"\n                                placement=\"top\"\n                              >\n                                <AddTagContainer onClick={openDialogPvtTag2}>\n                                  <ImgAddTag>\n                                    <img src=\"/images/add-tag-white.svg\" />\n                                  </ImgAddTag>\n                                  <AddTagtext>Add Tag</AddTagtext>\n                                </AddTagContainer>\n                              </Tooltip>\n                            )}\n                          </>\n                        ) : (\n                          \"\"\n                        )\n                      ) : (\n                        \"\"\n                      )}\n                    </TabTag>\n                  </DetailsMiddleContainer>\n                  <MobileDesktopTag>\n                    {width < 768 || width > 1240 ? (\n                      userInfo ? (\n                        <>\n                          {\n                            <PrivateAddressTag\n                              open={dialogPvtTagIsOpen2}\n                              onClose={closeDialogPvtTag2}\n                              toAddr={transactions.to}\n                              value={dialogValue2}\n                              hash={address}\n                            />\n                          }\n                          {tagValueTo && tagValueTo?.length ? (\n                            <Tag>\n                              {tagValueTo[tagValueTo?.length - 1]?.tagName}\n                            </Tag>\n                          ) : (\n                            <Tooltip\n                              title=\"Add a new Address Tag\"\n                              placement=\"top\"\n                            >\n                              <AddTagContainer onClick={openDialogPvtTag2}>\n                                <ImgAddTag>\n                                  <img src=\"/images/add-tag-white.svg\" />\n                                </ImgAddTag>\n                                <AddTagtext>Add Tag</AddTagtext>\n                              </AddTagContainer>\n                            </Tooltip>\n                          )}\n                        </>\n                      ) : (\n                        \"\"\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </MobileDesktopTag>\n                </DivMiddle>\n              </DivMiddleContainer>\n\n              <Div__>\n                {/* -------------------------------------------------------------txn fee----------------------- */}\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip title={txnfee} style={{ cursor: \"pointer\" }}>\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n\n                    <Hash>Txn Fee</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      {txfee && txfee > 0 ? txfee : 0}  XDC ({currencySymbol}\n                      {txfee && txfee > 0 ? Utils.decimalDivison(coinmarketcap.price * txfee, 2) : 0}\n                      )\n                    </Content>\n                  </MiddleContainer>\n                </Spacing> */}\n                <Spacing>\n                  <Container>\n                    <Tooltip title={txnfee}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n\n                    <Hash>Transaction Fee</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      {/* {\" \"}\n                      {txnFee2 == 0 ? (\n                        <span>{txnFee1}</span>\n                      ) : (\n                        <span>\n                          {txnFee1}\n                          {\".\"}\n                          <span style={{ color: \"#9FA9BA\" }}>{txnFee2}</span>\n                        </span>\n                      )}\n                      &nbsp;XDC ({currencySymbol}\n                      {fetchtxn2 == null ? (\n                        <span>{fetchtxn1}</span>\n                      ) : (\n                        <span>\n                          {fetchtxn1}\n                          {\".\"}\n                          <span style={{ color: \"#9FA9BA\" }}>{fetchtxn2}</span>\n                        </span>\n                      )}\n                      ) */}\n                      {txfee && txfee > 0 ? txfee : 0}  XDC ({currencySymbol}\n                      {txfee && txfee > 0 ? Utils.decimalDivison(coinmarketcap.price * txfee, 2) : 0}\n                      )\n                    </Content>\n                  </MiddleContainer>\n                </Spacing>\n                {/* --------------------------------gas provided-------------------------------- */}\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip\n                      align=\"right\"\n                      title={gasprovided}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n                    <Hash>Gas Provided</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    {transactions.gas}\n                  </MiddleContainer>\n                </Spacing> */}\n                <Spacing>\n                  <Container>\n                    <Tooltip align=\"right\" title={gasprovided}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n                    <Hash>Gas Provided</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    {format({})(transactions.gas)}\n                  </MiddleContainer>\n                </Spacing>\n                {/* ---------------------------------------avg txn fee --------------------- */}\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip\n                      align=\"right\"\n                      title={gasprice}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n                    <Hash>Gas Price</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    {gasP}\n                  </MiddleContainer>\n                </Spacing> */}\n                <Spacing>\n                  <Container>\n                    <Tooltip align=\"right\" title={gasprice}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n                    <Hash>Avg Transaction Fee</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                    {/* {gasPrice2 == 0 ? (\n                      <span>{gasPrice1}</span>\n                    ) : (\n                      <span>\n                        {gasPrice1}\n                        {\".\"}\n                        <span style={{ color: \"#9FA9BA\" }}>{gasPrice2}</span>\n                      </span>\n                    )} */}\n                    {gasP}&nbsp;XDC ({currencySymbol}\n                      {avgTxnFeeFetch2 == null ? (\n                        <span>{avgTxnFeeFetch1}</span>\n                      ) : (\n                        <span>\n                          {avgTxnFeeFetch1}\n                          {\".\"}\n                          <span style={{ color: \"#9FA9BA\" }}>{avgTxnFeeFetch2}</span>\n                        </span>\n                      )}\n                      )\n                      </Content>\n                  </MiddleContainer>\n                </Spacing>\n                {/* --------------------------------------------gas used--------------------------- */}\n                {/* <Spacing>\n                  <Container>\n                    <Tooltip\n                      align=\"right\"\n                      title={gasused}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <ImageView src={\"/images/questionmark.svg\"} />\n                    </Tooltip>\n                    <Hash>Gas Used</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>{transactions.gasUsed}</Content>\n                  </MiddleContainer>\n                </Spacing> */}\n                <Spacing>\n                  <Container>\n                    <Tooltip align=\"right\" title={gasused}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n                    <Hash>Gas Used</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>{format({})(transactions?.gasUsed)}</Content>\n                  </MiddleContainer>\n                </Spacing>\n\n                {/* --------------------------------------------see more------------------------------------ */}\n                {!isSeeMore ? (\n                  <Spacing>\n                    <SeeMoreContainer onClick={handleSeeMore}>\n                      <SeeMoreText>See more</SeeMoreText>\n                      <ImgSeeMore src=\"/images/see-more.svg\"></ImgSeeMore>\n                    </SeeMoreContainer>\n                  </Spacing>\n                ) : (\n                  <>\n                  <Spacing>\n                    <Container>\n                      <Tooltip title={transferToken}>\n                        <ImageView src={\"/images/info.svg\"} />\n                      </Tooltip>\n                    <Hash> Interacted With (To)</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <ContentInteractedWith>\n                      <div>Contract</div>\n                      &nbsp;\n                      <span>(<a className=\"linkTableDetails-transaction\" href={\"/address/\" + transactions?.contract}>\n                        {transactions?.contract}\n                      </a>)</span>\n                    </ContentInteractedWith>\n                  </MiddleContainer>\n                  </Spacing>\n                  <Spacing>\n                  <Container>\n                    <Tooltip title={transferToken}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>            \n                    <Hash> Token Transfer</Hash>\n                  </Container>\n                  <MiddleContainer isTextArea={false}>\n                    <Content>\n                      {tokenTransferValue}\n\n                    </Content>\n                  </MiddleContainer>\n                </Spacing>\n                    <Spacing>\n                      <Container>\n                        <Tooltip align=\"right\" title={nounced}>\n                          <ImageView src={\"/images/info.svg\"} />\n                        </Tooltip>\n                        <Hash>Nonce</Hash>\n                      </Container>\n                      <MiddleContainer isTextArea={false}>\n                        <Content> {transactions.nonce}</Content>\n                      </MiddleContainer>\n                    </Spacing>\n                    <SpacingInputData>\n                      <Container>\n                        <Tooltip align=\"right\" title={input}>\n                          <ImageViewInputData src={\"/images/info.svg\"} />\n                        </Tooltip>\n                        <HashInputData>Input Data</HashInputData>\n                      </Container>\n                      <MiddleContainerInputData isTextArea={true}>\n                        <div className=\"transaction-details-input-data\">\n                          <textarea\n                            className=\"text-area-transaction\"\n                            readOnly\n                            value={transactions.input}\n                          />\n                        </div>\n                      </MiddleContainerInputData>\n                    </SpacingInputData>\n                    <Spacing>\n                      <SeeMoreContainer onClick={handleSeeLess}>\n                        <SeeMoreText>See Less</SeeMoreText>\n                        <ImgSeeLess src=\"/images/see-more.svg\"></ImgSeeLess>\n                      </SeeMoreContainer>\n                    </Spacing>\n                  </>\n                )}\n                <SpacingPrivateNode>\n                  <Container>\n                    <Tooltip align=\"right\" title={privatenote}>\n                      <ImageView src={\"/images/info.svg\"} />\n                    </Tooltip>\n                    <Hash>Private Note</Hash>\n                  </Container>\n                  <MiddleContainerPrivateNote>\n                    {!userInfo ? (\n                      <PrivateText>\n                        {\n                          <LoginDialog\n                            open={loginDialogIsOpen}\n                            onClose={closeLoginDialog}\n                            dataHashOrAddress={address}\n                          />\n                        }\n                        To access the private note feature, you must be\n                        <a\n                          className=\"linkTableDetails-transaction\"\n                          style={{ marginLeft: \"5px\", cursor: \"pointer\" }}\n                          onClick={openLoginDialog}\n                        >\n                          Logged In\n                        </a>\n                      </PrivateText>\n                    ) : privateNote ? (\n                      <span>{privateNote?.trxLable}</span>\n                    ) : (\n                      <AddLabel>\n                        <AddLabelText>\n                          Add private note by clicking on this icon\n                        </AddLabelText>\n                        {\n                          <PrivateNote\n                            open={dialogPvtNoteIsOpen}\n                            getListOfTxnLabel={getListOfTxnLabel}\n                            getTotalCountTxnLabel={() => {}}\n                            onClose={closeDialogPvtNote}\n                            hash={address}\n                            pvtNote={\n                              pvtNoteValue[pvtNoteValue?.length - 1]?.trxLable\n                            }\n                          />\n                        }\n                        {\n                          <Tooltip\n                            title=\"Add Transaction Label\"\n                            placement=\"top\"\n                          >\n                            <img\n                              className={\n                                width > 1240 ? \"edit-icon1\" : \"editIconHash\"\n                              }\n                              onClick={openDialogPvtNote}\n                              src={require(\"../../../src/assets/images/label.svg\")}\n                            />\n                          </Tooltip>\n                        }\n                      </AddLabel>\n                    )}\n                  </MiddleContainerPrivateNote>\n                </SpacingPrivateNode>\n              </Div__>\n              <br />\n              <br />\n            </div>\n          </div>\n        </Grid>\n      </div>\n\n      <FooterComponent _handleChange={_handleChange} currency={amount} />\n    </div>\n  );\n}\nconst Input = styled.input`\n  border-radius: 5px;\n  border: solid 1px #e3e7eb;\n  background-color: #fff;\n  font-family: Inter;\n  font-size: 14px;\n\n  text-align: left;\n  color: #2a2a2a;\n`;\nconst Content = styled.div`\n  font-family: Inter;\n  font-size: 0.935rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  line-height: 22px;\n  display: flex;\n  align-items: center;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n    line-height: 18px !important;\n    word-break: break-all;\n  }\n  @media (min-width: 768px) and (max-width: 1241px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n  }\n`;\nconst ContentHash = styled.div`\n  font-family: Inter;\n  font-size: 0.935rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  line-height: 22px;\n  display: flex;\n  align-items: center;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #2a2a2a;\n    opacity: 1;\n    line-height: 18px !important;\n    word-break: break-all;\n  }\n  @media (min-width: 768px) and (max-width: 1241px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n    width: 33rem;\n  }\n`;\nconst ContentInteractedWith = styled.div`\n  font-family: Inter;\n  font-size: 0.935rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  line-height: 22px;\n  display: flex;\n  align-items: center;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    text-align: left;\n    color: #3a3a3a;\n    opacity: 1;\n    line-height: 7px !important;\n    flex-direction: column;\n    align-items: flex-start;\n    padding-right: 10px;\n    padding-top: 5px;\n  }\n  @media (min-width: 768px) and (max-width: 1241px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n  }\n`;\nconst TextArea = styled.textarea`\n  opacity: 0.33;\n  border-radius: 4px;\n  border: solid 1px #9fa9ba;\n  background-color: #dee0e3;\n  width: 100%;\n  font-family: Inter;\n  font-size: 14px;\n  float: left;\n  padding: 14px;\n  overflow-y: auto;\n  @media (min-width: 768px) and (max-width: 1240px) {\n    width: 110%;\n  }\n`;\nconst PrivateText = styled.p`\n  display: contents;\n  @media (min-width: 0px) and (max-width: 767px) {\n    display: contents;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    display: block;\n    margin-bottom: -5px;\n  }\n`;\nconst Div__ = styled.div`\n  width: 75.125rem;\n  border-radius: 12px;\n  box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  padding: 0.563rem;\n  padding-left: 27px;\n  padding-right: 25px;\n  margin-top: 35px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    max-width: 22.563rem;\n    width: 100%;\n    // height: 61rem;\n    padding-left: 10px;\n    padding-right: 10px;\n    margin-bottom: 35px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    width: 41.5rem;\n    height: unset;\n    margin-bottom: 54px;\n  }\n`;\nconst MiddleContainerPrivateNote = styled.div`\n  font-family: Inter;\n  font-size: 0.938rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  margin-left: 100px;\n  width: 100%;\n  border-radius: 4px;\n  border: solid 1px #9fa9ba;\n  height: auto;\n  padding: 1px 9px 1px 18px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    margin-top: 10px;\n    font-size: 0.875rem;\n    text-align: left;\n\n    opacity: 1;\n    word-break: break-all;\n    margin-left: unset;\n    line-height: 1.5;\n    height: auto;\n    padding: 1px 6px 1px 6px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-size: 0.875rem;\n    text-align: left;\n\n    opacity: 1;\n    margin-left: 100px;\n  }\n`;\nconst MiddleContainerInputData = styled.div`\n  font-family: Inter;\n  font-size: 0.938rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  margin-left: 100px;\n  width: 100%;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    text-align: left;\n\n    opacity: 1;\n    word-break: break-all;\n    margin-left: unset;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    opacity: 1;\n    margin-left: 100px;\n  }\n`;\n\nconst MiddleContainer = styled.div`\n  font-family: Inter;\n  font-size: 0.938rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  margin-left: 100px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n    word-break: break-all;\n    height: ${(props) => (props.isTextArea ? `100px` : `unset`)};\n    margin-left: unset;\n    margin-top: 10px;\n    padding-left: 5px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n    margin-left: 100px;\n  }\n`;\n\nconst MiddleContainer1 = styled.div`\n  font-family: Inter;\n  font-size: 0.938rem;\n\n  text-align: left;\n  color: #3a3a3a;\n  margin-left: 100px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 0.875rem;\n    word-break: break-all;\n    text-align: left;\n\n    color: #3a3a3a;\n    opacity: 1;\n    word-break: break-all;\n    height: ${(props) => (props.isTextArea ? `100px` : `unset`)};\n    margin-left: unset;\n    margin-top: 10px;\n    display: block;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-size: 0.875rem;\n    // word-break: break-all;\n    // text-align: left;\n    //\n    // color: #3a3a3a;\n    // opacity: 1;\n    // display: block;\n    margin-left: 64px;\n  }\n`;\n\nconst HashInputData = styled.span`\n  color: var(--unnamed-color-2a2a2a);\n  white-space: nowrap;\n  font-family: \"Inter\", sans-serif;\n  font-weight: 600;\n  font-size: 15px;\n\n  color: #2a2a2a;\n  padding-bottom: 30px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-family: \"Inter\", sans-serif;\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-align: left;\n\n    color: #2a2a2a;\n    opacity: 1;\n    padding-bottom: 20px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-family: \"Inter\", sans-serif;\n    font-weight: 600;\n    font-size: 0.875rem;\n    text-align: left;\n\n    color: #2a2a2a;\n    opacity: 1;\n  }\n`;\n\nconst Hash = styled.span`\n  white-space: nowrap;\n  font-family: Inter;\n  font-weight: 600;\n  font-size: 15px;\n\n  color: #252525;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-family: \"Inter\", sans-serif;\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-align: left;\n\n    color: #252525;\n    opacity: 1;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-family: \"Inter\", sans-serif;\n    font-weight: 600;\n    font-size: 0.875rem;\n    text-align: left;\n\n    color: #2a2a2a;\n    opacity: 1;\n  }\n`;\nconst SpacingInputData = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  height: auto;\n  align-items: center;\n  border-bottom: solid 1px #e3e7eb;\n  padding: 13px 0 8px 0;\n  @media (max-width: 767px) {\n    display: block;\n    padding: 11px 6px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    // height: 6.25rem;\n  }\n`;\nconst SpacingPrivateNode = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  height: auto;\n  align-items: center;\n  // border-bottom: solid 1px #e3e7eb;\n  padding: 15px 0 6px 0;\n\n  @media (max-width: 767px) {\n    display: block;\n    padding: 11px 6px;\n    border-bottom: none;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n  }\n`;\nconst Spacing = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  align-items: center;\n  border-bottom: solid 1px #e3e7eb;\n  height: 4.063rem;\n\n  @media (max-width: 767px) {\n    display: block;\n    height: auto;\n    padding: 12px 0 17px 0;\n  }\n`;\nconst SpacingHash = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  height: auto;\n  align-items: center;\n  border-bottom: solid 1px #e3e7eb;\n  height: 4.063rem;\n\n  @media (max-width: 767px) {\n    display: block;\n    padding: 11px 6px;\n    height: auto;\n  }\n`;\nconst HashDiv = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  width: 100%;\n  height: auto;\n  align-items: center;\n  padding: 16px 33px;\n\n  @media (max-width: 767px) {\n    display: block;\n    padding-left: 10px;\n    // padding-right: 85px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    padding: 14px 30px;\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n\n  width: 100%;\n  align-items: center;\n  max-width: 165px;\n`;\nconst SecondContainer = styled.div`\n  display: flex;\n  align-items: center;\n  @media (max-width: 767px) {\n  }\n`;\n\nconst Div = styled.div`\n  display: flex;\n  width: 75.125rem;\n  border-radius: 12px;\n  box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  margin-bottom: 15px;\n  // @media (min-width: 0px) and (max-width: 767px) {\n  //   width: 22.563rem;\n  //   height: 6.813rem;\n  // }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    max-width: 41.5rem;\n    width: 100%;\n    display: block;\n  }\n`;\nconst DivMiddleContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 35px;\n  margin-bottom: 36px @media (min-width: 0 px) and (max-width: 767 px) {\n    margin-top: 25px;\n    margin-bottom: 25px;\n  }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    display: block;\n  }\n`;\nconst DivMiddle = styled.div`\n  max-width: 35.625rem;\n  width: 100%;\n  padding: 15px 25px;\n  border-radius: 12px;\n  box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  // margin-bottom: 15px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    padding: 10px;\n  }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    max-width: 41.5rem;\n    width: 100%;\n  }\n`;\n\nconst Heading = styled.span`\n  white-space: nowrap;\n  color: #2a2a2a;\n  box-shadow: none;\n  font-family: \"Inter\", sans-serif;\n  font-weight: 600;\n  font-size: 1.5rem;\n  margin-top: 46px;\n  margin-bottom: 12px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-family: Inter;\n    font-size: 14px;\n    text-align: left;\n    color: #252525;\n    margin-top: 12px;\n    margin-bottom: 17px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    font-family: Inter;\n    font-size: 18px\n    text-align: left;\n    color: #2a2a2a;\n    margin-top: 19px;\n    margin-bottom: 28px;\n  }\n`;\nconst ImageViewInputData = styled.img`\n  width: 22px;\n  margin-right: 15px;\n  padding-bottom: 30px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    width: 22px;\n    padding-bottom: 17px;\n    margin-left: -4px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    width: 22px;\n  }\n`;\nconst ImageView = styled.img`\n  width: 22px;\n  margin-right: 15px;\n  cursor: pointer;\n  // @media (min-width: 0px) and (max-width: 767px) {\n\n  // }\n  // @media (min-width: 768px) and (max-width: 1240px) {\n  //   width: 0.875rem;\n  //   height: 0.875rem;\n  // }\n`;\nconst StatusContainer = styled.div`\n  max-width: 10.75rem;\n  width: 100%;\n  border-right: 1px solid #e3e7eb;\n  // @media (min-width: 0px) and (max-width: 767px) {\n  //   width: 14px;\n  //   height: 14px;\n  // }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    max-width: 41.5rem;\n    width: 100%;\n    border-right: none;\n    border-bottom: 1px solid #e3e7eb;\n    padding-bottom: 30px;\n  }\n`;\nconst StatusImgContainer = styled.div`\n  width: 58px;\n  margin: 44px auto 10px auto;\n  // @media (min-width: 0px) and (max-width: 767px) {\n\n  // }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    margin: 21px auto 10px auto;\n  }\n`;\nconst StatusContainerInside = styled.div`\n  width: 100px;\n  margin: auto;\n  // @media (min-width: 0px) and (max-width: 767px) {\n\n  // }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    padding-top: 1px;\n  }\n`;\nconst StatusImg = styled.img`\n  width: 58px;\n  align-item: center;\n`;\nconst StatusTextSuccess = styled.div`\n  font-family: Inter;\n  font-size: 14px;\n\n  text-align: center;\n  color: #03be46;\n`;\nconst StatusTextFailed = styled.div`\n  font-family: Inter;\n  font-size: 14px;\n\n  text-align: center;\n  color: red;\n`;\nconst SeeMoreContainer = styled.div`\n  display: flex;\n  cursor: pointer;\n`;\nconst SeeMoreText = styled.div`\n  font-family: Inter;\n  font-size: 15px;\n  font-weight: 600;\n\n  color: #4878ff;\n  margin-left: 4px;\n  margin-right: 5px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    font-size: 13px;\n  }\n`;\nconst ImgSeeMore = styled.img`\n  display: flex;\n  @media (min-width: 0px) and (max-width: 767px) {\n    height: 15px;\n    margin-top: 2px;\n  }\n`;\nconst ImgSeeLess = styled.img`\n  display: flex;\n  transform: rotate(180deg);\n  @media (min-width: 0px) and (max-width: 767px) {\n    height: 15px;\n    margin-top: 2px;\n  }\n`;\nconst TxnDetailsRightContainer = styled.div`\n  width: 100%;\n  padding-left: 21px;\n  padding-right: 25px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n`;\nconst TxnDetailsRightBottomContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  padding-top: 32px;\n  padding-bottom: 25px;\n  @media (min-width: 0px) and (max-width: 767px) {\n    flex-flow: row wrap;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    flex-flow: row wrap;\n    padding-top: 0px;\n    justify-content: flex-start;\n  }\n`;\nconst TxnDetailsRightTopContainer = styled.div`\n  width: 100%;\n  justify-content: space-between;\n  padding-top: 22px;\n`;\nconst DetailsContainer = styled.div`\n  display: block;\n  // @media (min-width: 0px) and (max-width: 767px) {\n\n  // }\n  @media (min-width: 0px) and (max-width: 1240px) {\n    padding-top: 29px;\n  }\n`;\nconst DetailsMiddleContainer = styled.div`\n  margin-left: 4px;\n  display: flex;\n  font-family: Inter;\n  font-size: 15px;\n\n  color: #3a3a3a;\n  @media (min-width: 768px) and (max-width: 1240px) {\n    justify-content: space-between;\n    padding-top: 10px;\n    margin-right: 22px;\n  }\n  @media (min-width: 0px) and (max-width: 767px) {\n    display: block;\n    padding-top: 10px;\n    color: #2a2a2a;\n    padding-right: 15px;\n  }\n`;\nconst BlockConfirmation = styled.div`\n  margin-left: 4px;\n  display: flex;\n  font-family: Inter;\n  font-size: 13px;\n\n  color: #2149b9;\n  background-color: #e2eaff;\n  padding-left: 8px;\n  padding-right: 10px;\n  border-radius: 4px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n`;\n\nconst DivCircle = styled.div`\n  max-width: 36px;\n  height: 36px;\n  width: 100%;\n  border-radius: 50%;\n  box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  margin: auto;\n\n  @media (min-width: 0px) and (max-width: 767px) {\n    margin-top: 15px;\n    margin-bottom: 15px;\n  }\n  @media (min-width: 768px) and (max-width: 1240px) {\n    margin-top: 34px;\n    margin-bottom: 33px;\n  }\n`;\n\nconst ImgNextArrow = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 12px;\n  @media (min-width: 0px) and (max-width: 1240px) {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding-top: 0px;\n    transform: rotate(90deg);\n    padding-left: 17px;\n  }\n`;\nconst AddTagContainer = styled.div`\n  background-color: #4878ff;\n  display: flex;\n  width: 95px;\n  padding: 3px 0 2px 6px;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  margin-top: 2px;\n  margin-left: 4px;\n  cursor: pointer;\n  @media (min-width: 768px) and (max-width: 1240px) {\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\nconst ImgAddTag = styled.div`\n  margin-right: 4px;\n`;\nconst AddTagtext = styled.div`\n  color: #ffffff;\n`;\n\nconst Tag = styled.div`\n  padding: 2px 5px 3px 5px;\n  border-radius: 4px;\n  border: solid 1px #d2deff;\n  background-color: #eaf0ff;\n  font-size: 14px;\n  font-weight: 500;\n\n  text-align: center;\n  color: #4878ff;\n  width: fit-content;\n  margin-top: 2px;\n  margin-left: 4px;\n`;\nconst TabTag = styled.div`\n  width: 180px;\n`;\nconst MobileDesktopTag = styled.div`\n  padding-top: 10px;\n`;\nconst AddLabel = styled.div`\n  display: flex;\n`;\nconst AddLabelText = styled.div`\n  margin-right: 8px;\n`;\n","import { httpService } from \"../managers/httpService\";\nimport { httpConstants } from \"../constants\";\n\nexport default {\n  CoinMarketExchangeForToken,\n  getTokenLists,\n  getTotalToken,\n  getSomeDaysHolders,\n  getTokenSearch,\n  getHolderDetailsUsingAddressforToken,\n  getTransferTransactionDetailsUsingHash,\n  getTotalTransferTransactionsForToken,\n  getListOfTransferTransactionsForToken,\n  getListOfHoldersForToken,\n};\nfunction getHeaders() {\n  return {\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\n  };\n}\n\nasync function CoinMarketExchangeForToken(data) {\n  let url = process.env.REACT_APP_GET_TOKEN_MARKETCAP + \"/\" + data;\n\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      ) {\n        return Promise.reject();\n      }\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nasync function getTokenLists(data) {\n  let url = process.env.REACT_APP_ACCOUNT_SERVICE_BASEURL + httpConstants.API_END_POINT.GET_TOKEN_LIST;//\"?skip=\" + Math.ceil(data.pageNum) + \"&limit=\" + data.perpage;\n  // let url = \"http://localhost:3007/getListOfTokens\";\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      ) {\n        return Promise.reject();\n      }\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\nasync function getSomeDaysHolders(path, data) {\n  let url = process.env.REACT_APP_GET_SOME_DAYS_HOLDERS + path;\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nasync function getTokenSearch(data) {\n  let url =\n    process.env.REACT_APP_GET_TOKEN_SEARCH +\n    \"?skip=\" +\n    Math.ceil(data.pageNum) +\n    \"&limit=\" +\n    data.perpage +\n    \"&data=\" +\n    data.searchkey;\n\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      ) {\n        return Promise.reject();\n      }\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nasync function getTotalToken() {\n  let url = process.env.REACT_APP_GET_TOTAL_TOKEN;\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      ) {\n        return Promise.reject();\n      }\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nasync function getListOfTransferTransactionsForToken(data) {\n  // let url = \"http://localhost:3005/getListOfTransferTransactionsForToken/\"+data.addr;\n  let url = process.env.REACT_APP_GET_LIST_OF_TRANSFER_FOR_TOKEN + data.addr;\n  delete data.addr;\n    //+ \"?skip=\" + Math.ceil(data.pageNum) + \"&limit=\" + data.perpage + (data.searchValue ? \"&searchValue=\" + data.searchValue : \"\") + (data.startDate ? \"&startDate=\" + data.startDate : \"\");\n\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\nasync function getTotalTransferTransactionsForToken(data) {\n    let url = process.env.REACT_APP_GET_TOTAL_TRANSFER_FOR_TOKEN + data.addr + (data.searchValue ? \"?searchValue=\" + data.searchValue : \"\")\n        + (data.startDate ? (data.searchValue ? \"&startDate=\" : \"?startDate=\") + data.startDate : \"\");\n\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), {}, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\nasync function getListOfHoldersForToken(data) {\n   let url = process.env.REACT_APP_GET_LIST_OF_HOLDERS_FOR_TOKEN + data.address;\n    // let url = \"http://localhost:3007/getListOfHoldersForToken/\"+data.address;\n    delete data.address;\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\nasync function getTransferTransactionDetailsUsingHash(path, data) {\n  let url =\n    process.env.REACT_APP_GET_TRANSFER_TRANSACTION_DETAIL_USING_ADDRESS + path;\n  return httpService(httpConstants.METHOD_TYPE.GET, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\nasync function getHolderDetailsUsingAddressforToken(data) {\n  let url = process.env.REACT_APP_GET_HOLDER_DETAIL_USING_ADDRESS_FOR_TOKEN\n  // let url = \"http://localhost:3007/getHolderDetailsUsingAddress\"\n  return httpService(httpConstants.METHOD_TYPE.POST, getHeaders(), data, url)\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n"],"sourceRoot":""}