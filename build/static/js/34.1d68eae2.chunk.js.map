{"version":3,"sources":["services/contractverify.js","modules/dashboard/verifyContract.js","modules/dashboard/contractTab.js"],"names":["getContractVerify","getHeaders","httpConstants","CONTENT_TYPE","APPLICATION_JSON","process","reqObj","a","httpService","METHOD_TYPE","POST","then","response","success","responseCode","responseData","length","Promise","resolve","reject","catch","err","VerifyContract","props","address","useParams","undefined","str","includes","replace","useState","isLoading","setisLoading","msg","setMessage","inputValue","setInputValue","validationSchema","useRef","Yup","shape","addr","required","contractname","version","code","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","handleChange","event","txtValue","target","value","onSubmitHandler","data","contractAddress","ifSCM","window","location","search","contractverify","resp","Error","href","message","url","onSubmit","style","display","justifyContent","marginTop","className","theme","elevation","name","type","placeholder","onChange","Releases","builds","map","row","index","finalVersion","split","ver","subversion","sreadOnly","backgroundColor","borderRadius","onClick","connect","state","dispatchAction","toggleState","setToggleState","currentTheme","flexDirection","borderBottom"],"mappings":"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","file":"static/js/34.1d68eae2.chunk.js","sourcesContent":["import { httpService } from \"../managers/httpService\";\nimport { httpConstants } from \"../constants\";\n\nexport default { getContractVerify };\nfunction getHeaders() {\n  return {\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\n  };\n}\nasync function getContractVerify(reqObj) {\n  let url = process.env.REACT_APP_CONTRACT_VERIFY;\n  return httpService(\n    httpConstants.METHOD_TYPE.POST,\n    getHeaders(),\n    reqObj,\n    url\n  )\n    .then((response) => {\n      if (\n        !response.success ||\n        response.responseCode !== 200 ||\n        !response.responseData ||\n        response.responseData.length === 0\n      )\n        return Promise.reject();\n      return Promise.resolve(response.responseData);\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport Releases from \"./list.json\";\nimport contractverify from \"../../services/contractverify\";\nexport default function VerifyContract(props) {\n    let address = useParams();\n\n    if (address.address !== undefined) {\n        if (address.address.length != undefined) {\n            let str = address.address\n            if (str.includes(\"xdc\")) {\n                let result = str.replace(/^.{3}/g, '0x');\n                address = result\n            }\n        }\n    }\n\n\n\n    const [isLoading, setisLoading] = useState(false)\n    const [msg, setMessage] = useState(\"\")\n    const [inputValue, setInputValue] = useState(\"\")\n    const inputRef = useRef();\n    const validationSchema = Yup.object().shape({\n        addr: Yup.string()\n            .required('Contract address is required'),\n        contractname: Yup.string()\n            .required('Contract name is required'),\n        version: Yup.string()\n            .required('Version is required'),\n        code: Yup.string()\n            .required('Contract code is required')\n    });\n    const { register, handleSubmit, formState: { errors }, reset } = useForm({\n        resolver: yupResolver(validationSchema)\n    });\n    function clearMessage() {\n        setMessage(\"\");\n    }\n    const handleChange = (event) => {\n        let txtValue = event.target.value\n        if (txtValue !== undefined) {\n            if (txtValue.includes(\"xdc\")) {\n                setInputValue(txtValue.replace(/^.{3}/g, '0x'))\n            } else {\n                setInputValue(txtValue)\n            }\n        }\n    }\n    const onSubmitHandler = async (data) => {\n        let contractAddress = data.addr?.replace(/^.{2}/g, 'xdc');\n        let ifSCM = window.location.search.replace(\"?\", \"\")\n        try {\n            setisLoading(true)\n            const resp = await contractverify.getContractVerify(data)\n            setisLoading(false)\n\n            if (resp[0].Error == 0 && !ifSCM) {\n                let url = \"/address/\" + contractAddress\n                window.location.href = url;\n            }\n            else if(resp[0].Error == 0 && ifSCM){\n                window.location.href = process.env.REACT_APP_SCM_WEBAPP + \"?contractAddress=\" + contractAddress;\n            }\n             else {\n                setMessage(resp[0].message)\n            }\n        } catch (err) {\n            setisLoading(false)\n            //setMessage(err)\n        }\n    };\n\n    return (\n        <>\n\n            <form onSubmit={handleSubmit(onSubmitHandler)} >\n                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }} className={isLoading == true ? \"cover-spin-5\" : \"\"}>\n\n                    <div className={props.theme === \"dark\" ? \"paper-verify-contracts table-bg-dark border-none-dark mb-60\" : \"paper-verify-contracts\"} elevation={3}>\n\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-white\" : \"verify-contracts-head\"}>Verify and Publish Contract Source Code</div><br />\n                        <div className=\"textarea-verify-contract\">\n                            <p className={props.theme === \"dark\" ? \"verify-contract-first-div fc-black\" : \"verify-contract-first-div\"}>Enter Contract Source Code below.</p>\n                            <p className={props.theme === \"dark\" ? \"verify-contract-first-div-text fc-black\" : \"verify-contract-first-div-text\"}>If the compiled bytecode matches the Creation Address bytecode, the contract is then Verified and will be published online.</p>\n                        </div>\n                        <br />\n                        {msg ? <p className=\"validation-error-message txt-center\">{msg}</p> : \"\"}\n                        <br />\n\n                        <div className=\"flex-row\">\n                            <div className={props.theme === \"dark\" ? \"vc-contract-add fc-white\" : \"vc-contract-add\"}>Contract Address\n                                {\n                                    address.length ? <div>\n                                        <input {...register(\"addr\")} name=\"addr\" className={props.theme === \"dark\" ? \"vc-input-contract-add-dark\" : \"vc-input-contract-add\"} type=\"text\" placeholder=\"Contract Address\" onChange={handleChange} value={address.length ? address : \"\"} />\n                                    </div> : <div>\n                                        <input {...register(\"addr\")} name=\"addr\" className={props.theme === \"dark\" ? \"vc-input-contract-add-dark\" : \"vc-input-contract-add\"} type=\"text\" placeholder=\"Contract Address\" onChange={handleChange} value={inputValue} />\n                                    </div>\n                                }\n                                <p className=\"validation-error-message\">{errors?.addr?.message}</p>\n                            </div>\n                            <div className={props.theme === \"dark\" ? \"vc-contract-name fc-white\" : \"vc-contract-name\"} >Contract Name\n                                <div>\n                                    <input {...register(\"contractname\")} name=\"contractname\" className={props.theme === \"dark\" ? \"vc-input-contract-name-dark\" : \"vc-input-contract-name\"} type=\"text\" placeholder=\"Contract Name\" />\n                                </div>\n                                <p className=\"validation-error-message\">{errors?.contractname?.message}</p>\n                            </div>\n\n                            <div className={props.theme === \"dark\" ? \"vc-contract-compiler fc-white\" : \"vc-contract-compiler\"}>Compiler\n                                <div>\n\n                                    <select {...register(\"version\")} name=\"version\" className={props.theme === \"dark\" ? \"vc-contract-add-select-dark\" : \"vc-contract-add-select\"}  >\n                                        <option value=\"\">Select compiler</option>\n                                        <option value=\"latest\">Latest</option>\n                                        {Releases.builds.map((row, index) => {\n                                            let finalVersion = row.split('-')\n                                            let ver = ''\n                                            if (finalVersion.length > 2) {\n                                                let subversion = finalVersion[2].split('+')\n                                                ver = finalVersion[1] + '+' + subversion[1]\n                                            } else {\n                                                ver = finalVersion[1]\n                                            }\n\n                                            return (\n                                                <option value={ver}>{row}</option>\n                                            )\n                                        })\n                                        }\n                                    </select>\n                                    <p className=\"validation-error-message\">{errors?.version?.message}</p>\n                                </div>\n                            </div>\n\n\n                        </div>\n                        {/* <br /> */}\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-white\" : \"verify-contracts-head\"}>Contract Code</div>\n                        <textarea {...register(\"code\")} name=\"code\" className={props.theme === \"dark\" ? \"textarea-contract-code-dark\" : \"textarea-contract-code\"} placeholder=\"Contract Code\" ></textarea>\n                        <p className=\"validation-error-message\">{errors?.code?.message}</p>\n                        <br />\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-b1c3e1\" : \"verify-contracts-head\"}>\n                            <input type=\"checkbox\" value=\"1\" name=\"optimise\" {...register(\"optimise\")} />\n                            &nbsp;Optimization Enabled</div>\n                        <br />\n\n                        <div className={props.theme === \"dark\" ? \"constructor-arg fc-white\" : \"constructor-arg\"}>Constructor arguments ABI-encoded (OPTIONAL required for certain contracts only)</div>\n                        <input {...register(\"argument\")} name=\"argument\" sreadOnly className={props.theme === \"dark\" ? \"textarea-constructor-arg-dark\" : \"textarea-constructor-arg\"} placeholder=\"Constructor Arguments\" />\n                        <br /><br />\n\n                        <div>\n                            <button style={{ backgroundColor: '#3763dd', borderRadius: '4px' }} className=\"validate-button\">Validate Code</button>\n                            <button type=\"button\" onClick={() => { reset(); clearMessage(); }} style={props.theme === \"dark\" ? { backgroundColor: 'transparent', borderRadius: '4px' } : { backgroundColor: '#9fa9ba', borderRadius: '4px' }} className={props.theme === \"dark\" ? \"reset-button pagination-btn-dark-border\" : \"reset-button\"}>Reset</button>\n                        </div>\n\n                    </div>\n\n                </div>\n            </form>\n        </>\n    );\n}","import React from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport VerifyContract from \"./verifyContract\";\nimport Tokensearchbar from \"../explorer/tokensearchBar\";\nimport FooterComponent from \"../common/footerComponent\";\nimport { connect } from \"react-redux\";\nimport { dispatchAction } from \"../../utility\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\n// function a11yProps(index) {\n//   return {\n//     id: `simple-tab-${index}`,\n//     \"aria-controls\": `simple-tabpanel-${index}`,\n//   };\n// }\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginLeft: '19%',\n//     width: '62%',\n//     flexGrow: 1,\n\n//   },\n// }));\n\nfunction SimpleTabs(props) {\n  // const [value, setValue] = React.useState(0);\n\n  const [toggleState, setToggleState] = useState(1);\n\n  const toggleTab = (index) => {\n    setToggleState(index);\n  };\n\n  return (\n    <div className={props.theme.currentTheme === \"dark\" ? \"dark-theme-bg\" : \"\"}>\n      <Tokensearchbar theme={props.theme.currentTheme}/>\n      <div className=\"vc-header\">\n        <div className={props.theme.currentTheme === \"dark\" ? \"vc-header-child fc-white\" : 'vc-header-child'}>Verify Contract</div>\n      </div>\n      <div className=\"vc-tab-all\">\n        <div\n          style={props.theme.currentTheme === \"dark\" ? {\n            display: \"flex\",\n            flexDirection: \"row\",\n            backgroundColor: \"transparent\",\n            marginTop: \"20px\",\n            borderBottom: \"solid 1px #4a5d94\",\n          } : {\n            display: \"flex\",\n            flexDirection: \"row\",\n            backgroundColor: \"transparent\",\n            marginTop: \"20px\",\n            borderBottom: \"solid 1px #e3e7eb\",\n          }}\n        >\n          <div>\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <button\n                className={\n                  toggleState === 1 \n                  ? props.theme.currentTheme === \"dark\" ? \"tabs-vc active-tabs-contract fc-4878ff\" : \"tabs-vc active-tabs-contract\" \n                  : props.theme.currentTheme === \"dark\" ? \"tabs-vc fc-b1c3e1\" : \"tabs-vc\"\n                }\n                onClick={() => toggleTab(1)}\n              >\n                Source Code\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            <div style={{ marginTop: \"10px\" }}>\n              <VerifyContract theme={props.theme.currentTheme}/>\n            </div>\n          </div>\n        </div>\n      </div>\n      <FooterComponent />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {  theme: state.theme };\n};\nexport default connect(mapStateToProps, { dispatchAction })(SimpleTabs);"],"sourceRoot":""}