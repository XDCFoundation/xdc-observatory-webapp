{"version":3,"sources":["services/contractverify.js","modules/dashboard/verifyContract.js","modules/dashboard/contractTab.js"],"names":["getContractVerify","getHeaders","httpConstants","CONTENT_TYPE","APPLICATION_JSON","process","reqObj","a","httpService","METHOD_TYPE","POST","then","response","success","responseCode","responseData","length","Promise","resolve","reject","catch","err","VerifyContract","props","address","useParams","undefined","str","includes","replace","useState","isLoading","setisLoading","msg","setMessage","inputValue","setInputValue","validationSchema","useRef","Yup","shape","addr","required","contractname","version","code","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","handleChange","event","txtValue","target","value","onSubmitHandler","data","contractAddress","ifSCM","window","location","search","contractverify","resp","Error","href","message","url","onSubmit","style","display","justifyContent","marginTop","className","theme","elevation","name","type","placeholder","onChange","Releases","builds","map","row","index","finalVersion","split","ver","subversion","sreadOnly","backgroundColor","borderRadius","onClick","connect","state","dispatchAction","toggleState","setToggleState","currentTheme","flexDirection","borderBottom"],"mappings":"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","file":"static/js/34.a218cf46.chunk.js","sourcesContent":["import { httpService } from \"../managers/httpService\";\r\nimport { httpConstants } from \"../constants\";\r\n\r\nexport default { getContractVerify };\r\nfunction getHeaders() {\r\n  return {\r\n    \"Content-Type\": httpConstants.CONTENT_TYPE.APPLICATION_JSON,\r\n    \"X-API-key\": process.env.REACT_APP_X_API_KEY,\r\n  };\r\n}\r\nasync function getContractVerify(reqObj) {\r\n  let url = process.env.REACT_APP_CONTRACT_VERIFY;\r\n  return httpService(\r\n    httpConstants.METHOD_TYPE.POST,\r\n    getHeaders(),\r\n    reqObj,\r\n    url\r\n  )\r\n    .then((response) => {\r\n      if (\r\n        !response.success ||\r\n        response.responseCode !== 200 ||\r\n        !response.responseData ||\r\n        response.responseData.length === 0\r\n      )\r\n        return Promise.reject();\r\n      return Promise.resolve(response.responseData);\r\n    })\r\n    .catch(function (err) {\r\n      return Promise.reject(err);\r\n    });\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport Releases from \"./list.json\";\r\nimport contractverify from \"../../services/contractverify\";\r\nexport default function VerifyContract(props) {\r\n    let address = useParams();\r\n\r\n    if (address.address !== undefined) {\r\n        if (address.address.length != undefined) {\r\n            let str = address.address\r\n            if (str.includes(\"xdc\")) {\r\n                let result = str.replace(/^.{3}/g, '0x');\r\n                address = result\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const [isLoading, setisLoading] = useState(false)\r\n    const [msg, setMessage] = useState(\"\")\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const inputRef = useRef();\r\n    const validationSchema = Yup.object().shape({\r\n        addr: Yup.string()\r\n            .required('Contract address is required'),\r\n        contractname: Yup.string()\r\n            .required('Contract name is required'),\r\n        version: Yup.string()\r\n            .required('Version is required'),\r\n        code: Yup.string()\r\n            .required('Contract code is required')\r\n    });\r\n    const { register, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    function clearMessage() {\r\n        setMessage(\"\");\r\n    }\r\n    const handleChange = (event) => {\r\n        let txtValue = event.target.value\r\n        if (txtValue !== undefined) {\r\n            if (txtValue.includes(\"xdc\")) {\r\n                setInputValue(txtValue.replace(/^.{3}/g, '0x'))\r\n            } else {\r\n                setInputValue(txtValue)\r\n            }\r\n        }\r\n    }\r\n    const onSubmitHandler = async (data) => {\r\n        let contractAddress = data.addr?.replace(/^.{2}/g, 'xdc');\r\n        let ifSCM = window.location.search.replace(\"?\", \"\")\r\n        try {\r\n            setisLoading(true)\r\n            const resp = await contractverify.getContractVerify(data)\r\n            setisLoading(false)\r\n\r\n            if (resp[0].Error == 0 && !ifSCM) {\r\n                let url = \"/address/\" + contractAddress\r\n                window.location.href = url;\r\n            }\r\n            else if(resp[0].Error == 0 && ifSCM){\r\n                window.location.href = process.env.REACT_APP_SCM_WEBAPP + \"?contractAddress=\" + contractAddress;\r\n            }\r\n             else {\r\n                setMessage(resp[0].message)\r\n            }\r\n        } catch (err) {\r\n            setisLoading(false)\r\n            //setMessage(err)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <form onSubmit={handleSubmit(onSubmitHandler)} >\r\n                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }} className={isLoading == true ? \"cover-spin-5\" : \"\"}>\r\n\r\n                    <div className={props.theme === \"dark\" ? \"paper-verify-contracts table-bg-dark border-none-dark mb-60\" : \"paper-verify-contracts\"} elevation={3}>\r\n\r\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-white\" : \"verify-contracts-head\"}>Verify and Publish Contract Source Code</div><br />\r\n                        <div className=\"textarea-verify-contract\">\r\n                            <p className={props.theme === \"dark\" ? \"verify-contract-first-div fc-black\" : \"verify-contract-first-div\"}>Enter Contract Source Code below.</p>\r\n                            <p className={props.theme === \"dark\" ? \"verify-contract-first-div-text fc-black\" : \"verify-contract-first-div-text\"}>If the compiled bytecode matches the Creation Address bytecode, the contract is then Verified and will be published online.</p>\r\n                        </div>\r\n                        <br />\r\n                        {msg ? <p className=\"validation-error-message txt-center\">{msg}</p> : \"\"}\r\n                        <br />\r\n\r\n                        <div className=\"flex-row\">\r\n                            <div className={props.theme === \"dark\" ? \"vc-contract-add fc-white\" : \"vc-contract-add\"}>Contract Address\r\n                                {\r\n                                    address.length ? <div>\r\n                                        <input {...register(\"addr\")} name=\"addr\" className={props.theme === \"dark\" ? \"vc-input-contract-add-dark\" : \"vc-input-contract-add\"} type=\"text\" placeholder=\"Contract Address\" onChange={handleChange} value={address.length ? address : \"\"} />\r\n                                    </div> : <div>\r\n                                        <input {...register(\"addr\")} name=\"addr\" className={props.theme === \"dark\" ? \"vc-input-contract-add-dark\" : \"vc-input-contract-add\"} type=\"text\" placeholder=\"Contract Address\" onChange={handleChange} value={inputValue} />\r\n                                    </div>\r\n                                }\r\n                                <p className=\"validation-error-message\">{errors?.addr?.message}</p>\r\n                            </div>\r\n                            <div className={props.theme === \"dark\" ? \"vc-contract-name fc-white\" : \"vc-contract-name\"} >Contract Name\r\n                                <div>\r\n                                    <input {...register(\"contractname\")} name=\"contractname\" className={props.theme === \"dark\" ? \"vc-input-contract-name-dark\" : \"vc-input-contract-name\"} type=\"text\" placeholder=\"Contract Name\" />\r\n                                </div>\r\n                                <p className=\"validation-error-message\">{errors?.contractname?.message}</p>\r\n                            </div>\r\n\r\n                            <div className={props.theme === \"dark\" ? \"vc-contract-compiler fc-white\" : \"vc-contract-compiler\"}>Compiler\r\n                                <div>\r\n\r\n                                    <select {...register(\"version\")} name=\"version\" className={props.theme === \"dark\" ? \"vc-contract-add-select-dark\" : \"vc-contract-add-select\"}  >\r\n                                        <option value=\"\">Select compiler</option>\r\n                                        <option value=\"latest\">Latest</option>\r\n                                        {Releases.builds.map((row, index) => {\r\n                                            let finalVersion = row.split('-')\r\n                                            let ver = ''\r\n                                            if (finalVersion.length > 2) {\r\n                                                let subversion = finalVersion[2].split('+')\r\n                                                ver = finalVersion[1] + '+' + subversion[1]\r\n                                            } else {\r\n                                                ver = finalVersion[1]\r\n                                            }\r\n\r\n                                            return (\r\n                                                <option value={ver}>{row}</option>\r\n                                            )\r\n                                        })\r\n                                        }\r\n                                    </select>\r\n                                    <p className=\"validation-error-message\">{errors?.version?.message}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        {/* <br /> */}\r\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-white\" : \"verify-contracts-head\"}>Contract Code</div>\r\n                        <textarea {...register(\"code\")} name=\"code\" className={props.theme === \"dark\" ? \"textarea-contract-code-dark\" : \"textarea-contract-code\"} placeholder=\"Contract Code\" ></textarea>\r\n                        <p className=\"validation-error-message\">{errors?.code?.message}</p>\r\n                        <br />\r\n                        <div className={props.theme === \"dark\" ? \"verify-contracts-head fc-b1c3e1\" : \"verify-contracts-head\"}>\r\n                            <input type=\"checkbox\" value=\"1\" name=\"optimise\" {...register(\"optimise\")} />\r\n                            &nbsp;Optimization Enabled</div>\r\n                        <br />\r\n\r\n                        <div className={props.theme === \"dark\" ? \"constructor-arg fc-white\" : \"constructor-arg\"}>Constructor arguments ABI-encoded (OPTIONAL required for certain contracts only)</div>\r\n                        <input {...register(\"argument\")} name=\"argument\" sreadOnly className={props.theme === \"dark\" ? \"textarea-constructor-arg-dark\" : \"textarea-constructor-arg\"} placeholder=\"Constructor Arguments\" />\r\n                        <br /><br />\r\n\r\n                        <div>\r\n                            <button style={{ backgroundColor: '#3763dd', borderRadius: '4px' }} className=\"validate-button\">Validate Code</button>\r\n                            <button type=\"button\" onClick={() => { reset(); clearMessage(); }} style={props.theme === \"dark\" ? { backgroundColor: 'transparent', borderRadius: '4px' } : { backgroundColor: '#9fa9ba', borderRadius: '4px' }} className={props.theme === \"dark\" ? \"reset-button pagination-btn-dark-border\" : \"reset-button\"}>Reset</button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport VerifyContract from \"./verifyContract\";\r\nimport Tokensearchbar from \"../explorer/tokensearchBar\";\r\nimport FooterComponent from \"../common/footerComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport { dispatchAction } from \"../../utility\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\n// function a11yProps(index) {\r\n//   return {\r\n//     id: `simple-tab-${index}`,\r\n//     \"aria-controls\": `simple-tabpanel-${index}`,\r\n//   };\r\n// }\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     marginLeft: '19%',\r\n//     width: '62%',\r\n//     flexGrow: 1,\r\n\r\n//   },\r\n// }));\r\n\r\nfunction SimpleTabs(props) {\r\n  // const [value, setValue] = React.useState(0);\r\n\r\n  const [toggleState, setToggleState] = useState(1);\r\n\r\n  const toggleTab = (index) => {\r\n    setToggleState(index);\r\n  };\r\n\r\n  return (\r\n    <div className={props.theme.currentTheme === \"dark\" ? \"dark-theme-bg\" : \"\"}>\r\n      <Tokensearchbar theme={props.theme.currentTheme}/>\r\n      <div className=\"vc-header\">\r\n        <div className={props.theme.currentTheme === \"dark\" ? \"vc-header-child fc-white\" : 'vc-header-child'}>Verify Contract</div>\r\n      </div>\r\n      <div className=\"vc-tab-all\">\r\n        <div\r\n          style={props.theme.currentTheme === \"dark\" ? {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            backgroundColor: \"transparent\",\r\n            marginTop: \"20px\",\r\n            borderBottom: \"solid 1px #4a5d94\",\r\n          } : {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            backgroundColor: \"transparent\",\r\n            marginTop: \"20px\",\r\n            borderBottom: \"solid 1px #e3e7eb\",\r\n          }}\r\n        >\r\n          <div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <button\r\n                className={\r\n                  toggleState === 1 \r\n                  ? props.theme.currentTheme === \"dark\" ? \"tabs-vc active-tabs-contract fc-4878ff\" : \"tabs-vc active-tabs-contract\" \r\n                  : props.theme.currentTheme === \"dark\" ? \"tabs-vc fc-b1c3e1\" : \"tabs-vc\"\r\n                }\r\n                onClick={() => toggleTab(1)}\r\n              >\r\n                Source Code\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div\r\n            className={\r\n              toggleState === 1 ? \"content  active-content\" : \"content\"\r\n            }\r\n          >\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <VerifyContract theme={props.theme.currentTheme}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <FooterComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  theme: state.theme };\r\n};\r\nexport default connect(mapStateToProps, { dispatchAction })(SimpleTabs);"],"sourceRoot":""}